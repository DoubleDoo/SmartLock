
SmartLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b6  00800100  00000c66  00000cfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000410  008003b6  008003b6  00000fb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fe0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ad5  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e04  00000000  00000000  00003c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a70  00000000  00000000  00004a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  0000548c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000971  00000000  00000000  000057b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b1e  00000000  00000000  00006129  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006c47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	53 c1       	rjmp	.+678    	; 0x2b8 <__vector_4>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	17 04       	cpc	r1, r7

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e4       	ldi	r29, 0x40	; 64
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	13 e0       	ldi	r17, 0x03	; 3
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	e6 e6       	ldi	r30, 0x66	; 102
  a2:	fc e0       	ldi	r31, 0x0C	; 12
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	a6 3b       	cpi	r26, 0xB6	; 182
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	27 e0       	ldi	r18, 0x07	; 7
  b6:	a6 eb       	ldi	r26, 0xB6	; 182
  b8:	b3 e0       	ldi	r27, 0x03	; 3
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a6 3c       	cpi	r26, 0xC6	; 198
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c7 e4       	ldi	r28, 0x47	; 71
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <__do_global_ctors+0xe>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	bf d5       	rcall	.+2942   	; 0xc50 <__tablejump2__>
  d2:	c6 34       	cpi	r28, 0x46	; 70
  d4:	d1 07       	cpc	r29, r17
  d6:	d1 f7       	brne	.-12     	; 0xcc <__do_global_ctors+0x8>
  d8:	07 d3       	rcall	.+1550   	; 0x6e8 <main>
  da:	c3 c5       	rjmp	.+2950   	; 0xc62 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <_ZN9Main_Menu7refreshEv>:
    {
		oled.OLED_Write_To_Bufer(MAIN_MENU_IMG_X-20,MAIN_MENU_IMG_Y+1,1,16,lt);
		oled.OLED_Write_To_Bufer(MAIN_MENU_IMG_X+56,MAIN_MENU_IMG_Y+1,1,16,rt);
    };
	
    void refresh() override
  de:	08 95       	ret

000000e0 <_ZN9Main_Menu4nextEv>:
		oled.OLED_Bufer_Clear();
	};
	
	void next()override
	{
		pointer++;
  e0:	dc 01       	movw	r26, r24
  e2:	14 96       	adiw	r26, 0x04	; 4
  e4:	2d 91       	ld	r18, X+
  e6:	3c 91       	ld	r19, X
  e8:	15 97       	sbiw	r26, 0x05	; 5
  ea:	2f 5f       	subi	r18, 0xFF	; 255
  ec:	3f 4f       	sbci	r19, 0xFF	; 255
		if(pointer>MAIN_MENU_POINER_COUNT) pointer=0;
  ee:	23 30       	cpi	r18, 0x03	; 3
  f0:	31 05       	cpc	r19, r1
  f2:	2c f4       	brge	.+10     	; 0xfe <_ZN9Main_Menu4nextEv+0x1e>
		oled.OLED_Bufer_Clear();
	};
	
	void next()override
	{
		pointer++;
  f4:	15 96       	adiw	r26, 0x05	; 5
  f6:	3c 93       	st	X, r19
  f8:	2e 93       	st	-X, r18
  fa:	14 97       	sbiw	r26, 0x04	; 4
  fc:	03 c0       	rjmp	.+6      	; 0x104 <_ZN9Main_Menu4nextEv+0x24>
		if(pointer>MAIN_MENU_POINER_COUNT) pointer=0;
  fe:	fc 01       	movw	r30, r24
 100:	15 82       	std	Z+5, r1	; 0x05
 102:	14 82       	std	Z+4, r1	; 0x04
		actions();
 104:	dc 01       	movw	r26, r24
 106:	ed 91       	ld	r30, X+
 108:	fc 91       	ld	r31, X
 10a:	00 88       	ldd	r0, Z+16	; 0x10
 10c:	f1 89       	ldd	r31, Z+17	; 0x11
 10e:	e0 2d       	mov	r30, r0
 110:	09 95       	icall
 112:	08 95       	ret

00000114 <_ZN9Main_Menu8previousEv>:
	};
	
	void previous()override
	{
		pointer--;
 114:	dc 01       	movw	r26, r24
 116:	14 96       	adiw	r26, 0x04	; 4
 118:	2d 91       	ld	r18, X+
 11a:	3c 91       	ld	r19, X
 11c:	15 97       	sbiw	r26, 0x05	; 5
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	31 09       	sbc	r19, r1
		if(pointer<0) pointer=MAIN_MENU_POINER_COUNT;
 122:	2a f0       	brmi	.+10     	; 0x12e <_ZN9Main_Menu8previousEv+0x1a>
		actions();
	};
	
	void previous()override
	{
		pointer--;
 124:	15 96       	adiw	r26, 0x05	; 5
 126:	3c 93       	st	X, r19
 128:	2e 93       	st	-X, r18
 12a:	14 97       	sbiw	r26, 0x04	; 4
 12c:	05 c0       	rjmp	.+10     	; 0x138 <_ZN9Main_Menu8previousEv+0x24>
		if(pointer<0) pointer=MAIN_MENU_POINER_COUNT;
 12e:	22 e0       	ldi	r18, 0x02	; 2
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	35 83       	std	Z+5, r19	; 0x05
 136:	24 83       	std	Z+4, r18	; 0x04
		actions();
 138:	dc 01       	movw	r26, r24
 13a:	ed 91       	ld	r30, X+
 13c:	fc 91       	ld	r31, X
 13e:	00 88       	ldd	r0, Z+16	; 0x10
 140:	f1 89       	ldd	r31, Z+17	; 0x11
 142:	e0 2d       	mov	r30, r0
 144:	09 95       	icall
 146:	08 95       	ret

00000148 <_ZN9Main_Menu6choiseEv>:
	};
	
	void choise()override
	{
		switch(pointer)
 148:	dc 01       	movw	r26, r24
 14a:	14 96       	adiw	r26, 0x04	; 4
 14c:	2d 91       	ld	r18, X+
 14e:	3c 91       	ld	r19, X
 150:	15 97       	sbiw	r26, 0x05	; 5
 152:	21 30       	cpi	r18, 0x01	; 1
 154:	31 05       	cpc	r19, r1
 156:	61 f0       	breq	.+24     	; 0x170 <_ZN9Main_Menu6choiseEv+0x28>
 158:	22 30       	cpi	r18, 0x02	; 2
 15a:	31 05       	cpc	r19, r1
 15c:	89 f0       	breq	.+34     	; 0x180 <_ZN9Main_Menu6choiseEv+0x38>
 15e:	23 2b       	or	r18, r19
 160:	b1 f4       	brne	.+44     	; 0x18e <_ZN9Main_Menu6choiseEv+0x46>
		{
			case 0:
			{
				close();
 162:	ed 91       	ld	r30, X+
 164:	fc 91       	ld	r31, X
 166:	04 80       	ldd	r0, Z+4	; 0x04
 168:	f5 81       	ldd	r31, Z+5	; 0x05
 16a:	e0 2d       	mov	r30, r0
 16c:	09 95       	icall
				break;
 16e:	08 95       	ret
			}
			case 1:
			{
				close();
 170:	dc 01       	movw	r26, r24
 172:	ed 91       	ld	r30, X+
 174:	fc 91       	ld	r31, X
 176:	04 80       	ldd	r0, Z+4	; 0x04
 178:	f5 81       	ldd	r31, Z+5	; 0x05
 17a:	e0 2d       	mov	r30, r0
 17c:	09 95       	icall
				break;
 17e:	08 95       	ret
			}
			case 2:
			{
				close();
 180:	dc 01       	movw	r26, r24
 182:	ed 91       	ld	r30, X+
 184:	fc 91       	ld	r31, X
 186:	04 80       	ldd	r0, Z+4	; 0x04
 188:	f5 81       	ldd	r31, Z+5	; 0x05
 18a:	e0 2d       	mov	r30, r0
 18c:	09 95       	icall
 18e:	08 95       	ret

00000190 <_ZN9Main_Menu4backEv>:
				break;
			}
		}
	};
	
	void back()override
 190:	08 95       	ret

00000192 <_ZN9Main_Menu7animateEv>:
	{
		
		
	};
	
	void animate()override
 192:	08 95       	ret

00000194 <_ZN9Main_Menu7DefaultEv>:
	{
		Default();
		actions();
	};
	
    void Default() override
 194:	ef 92       	push	r14
 196:	ff 92       	push	r15
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
    {
		oled.OLED_Write_To_Bufer(MAIN_MENU_IMG_X-20,MAIN_MENU_IMG_Y+1,1,16,lt);
 19c:	0f 2e       	mov	r0, r31
 19e:	f0 eb       	ldi	r31, 0xB0	; 176
 1a0:	ef 2e       	mov	r14, r31
 1a2:	f1 e0       	ldi	r31, 0x01	; 1
 1a4:	ff 2e       	mov	r15, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	00 e1       	ldi	r16, 0x10	; 16
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	43 e0       	ldi	r20, 0x03	; 3
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	6e e1       	ldi	r22, 0x1E	; 30
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	84 ec       	ldi	r24, 0xC4	; 196
 1ba:	93 e0       	ldi	r25, 0x03	; 3
 1bc:	81 d4       	rcall	.+2306   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.OLED_Write_To_Bufer(MAIN_MENU_IMG_X+56,MAIN_MENU_IMG_Y+1,1,16,rt);
 1be:	0f 2e       	mov	r0, r31
 1c0:	f0 ec       	ldi	r31, 0xC0	; 192
 1c2:	ef 2e       	mov	r14, r31
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	ff 2e       	mov	r15, r31
 1c8:	f0 2d       	mov	r31, r0
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	43 e0       	ldi	r20, 0x03	; 3
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	6a e6       	ldi	r22, 0x6A	; 106
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	84 ec       	ldi	r24, 0xC4	; 196
 1d8:	93 e0       	ldi	r25, 0x03	; 3
 1da:	72 d4       	rcall	.+2276   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
    };
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	08 95       	ret

000001e6 <_ZN9Main_Menu7actionsEv>:
	{
		
		
	};
	
	void actions()override
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
	{
		switch(pointer)
 1ee:	fc 01       	movw	r30, r24
 1f0:	84 81       	ldd	r24, Z+4	; 0x04
 1f2:	95 81       	ldd	r25, Z+5	; 0x05
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	91 05       	cpc	r25, r1
 1f8:	09 f1       	breq	.+66     	; 0x23c <_ZN9Main_Menu7actionsEv+0x56>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	91 05       	cpc	r25, r1
 1fe:	c9 f1       	breq	.+114    	; 0x272 <_ZN9Main_Menu7actionsEv+0x8c>
 200:	89 2b       	or	r24, r25
 202:	09 f0       	breq	.+2      	; 0x206 <_ZN9Main_Menu7actionsEv+0x20>
 204:	50 c0       	rjmp	.+160    	; 0x2a6 <_ZN9Main_Menu7actionsEv+0xc0>
		{
			case 0:
			{
				oled.OLED_Clear_Bufer_part(MAIN_MENU_IMG_X,MAIN_MENU_IMG_Y,4,32);
 206:	00 e2       	ldi	r16, 0x20	; 32
 208:	10 e0       	ldi	r17, 0x00	; 0
 20a:	24 e0       	ldi	r18, 0x04	; 4
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	42 e0       	ldi	r20, 0x02	; 2
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	62 e3       	ldi	r22, 0x32	; 50
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	84 ec       	ldi	r24, 0xC4	; 196
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	03 d4       	rcall	.+2054   	; 0xa22 <_ZN4OLED21OLED_Clear_Bufer_partEiiii>
				oled.OLED_Write_To_Bufer(MAIN_MENU_IMG_X,MAIN_MENU_IMG_Y,4,32,lock);
 21c:	0f 2e       	mov	r0, r31
 21e:	f0 ed       	ldi	r31, 0xD0	; 208
 220:	ef 2e       	mov	r14, r31
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	ff 2e       	mov	r15, r31
 226:	f0 2d       	mov	r31, r0
 228:	24 e0       	ldi	r18, 0x04	; 4
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	42 e0       	ldi	r20, 0x02	; 2
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	62 e3       	ldi	r22, 0x32	; 50
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	84 ec       	ldi	r24, 0xC4	; 196
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	43 d4       	rcall	.+2182   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
				break;
 23a:	35 c0       	rjmp	.+106    	; 0x2a6 <_ZN9Main_Menu7actionsEv+0xc0>
			}
			case 1:
			{
				oled.OLED_Clear_Bufer_part(MAIN_MENU_IMG_X,MAIN_MENU_IMG_Y,4,32);
 23c:	00 e2       	ldi	r16, 0x20	; 32
 23e:	10 e0       	ldi	r17, 0x00	; 0
 240:	24 e0       	ldi	r18, 0x04	; 4
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	42 e0       	ldi	r20, 0x02	; 2
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	62 e3       	ldi	r22, 0x32	; 50
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	84 ec       	ldi	r24, 0xC4	; 196
 24e:	93 e0       	ldi	r25, 0x03	; 3
 250:	e8 d3       	rcall	.+2000   	; 0xa22 <_ZN4OLED21OLED_Clear_Bufer_partEiiii>
				oled.OLED_Write_To_Bufer(MAIN_MENU_IMG_X,MAIN_MENU_IMG_Y,4,32,gear);
 252:	0f 2e       	mov	r0, r31
 254:	f0 ee       	ldi	r31, 0xE0	; 224
 256:	ef 2e       	mov	r14, r31
 258:	f2 e0       	ldi	r31, 0x02	; 2
 25a:	ff 2e       	mov	r15, r31
 25c:	f0 2d       	mov	r31, r0
 25e:	24 e0       	ldi	r18, 0x04	; 4
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	42 e0       	ldi	r20, 0x02	; 2
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	62 e3       	ldi	r22, 0x32	; 50
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	84 ec       	ldi	r24, 0xC4	; 196
 26c:	93 e0       	ldi	r25, 0x03	; 3
 26e:	28 d4       	rcall	.+2128   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
				break;
 270:	1a c0       	rjmp	.+52     	; 0x2a6 <_ZN9Main_Menu7actionsEv+0xc0>
			}
			case 2:
			{
				oled.OLED_Clear_Bufer_part(MAIN_MENU_IMG_X,MAIN_MENU_IMG_Y,4,32);
 272:	00 e2       	ldi	r16, 0x20	; 32
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	24 e0       	ldi	r18, 0x04	; 4
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	42 e0       	ldi	r20, 0x02	; 2
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	62 e3       	ldi	r22, 0x32	; 50
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	84 ec       	ldi	r24, 0xC4	; 196
 284:	93 e0       	ldi	r25, 0x03	; 3
 286:	cd d3       	rcall	.+1946   	; 0xa22 <_ZN4OLED21OLED_Clear_Bufer_partEiiii>
				oled.OLED_Write_To_Bufer(MAIN_MENU_IMG_X,MAIN_MENU_IMG_Y,4,32,info);
 288:	0f 2e       	mov	r0, r31
 28a:	f0 e5       	ldi	r31, 0x50	; 80
 28c:	ef 2e       	mov	r14, r31
 28e:	f2 e0       	ldi	r31, 0x02	; 2
 290:	ff 2e       	mov	r15, r31
 292:	f0 2d       	mov	r31, r0
 294:	24 e0       	ldi	r18, 0x04	; 4
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	42 e0       	ldi	r20, 0x02	; 2
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	62 e3       	ldi	r22, 0x32	; 50
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	84 ec       	ldi	r24, 0xC4	; 196
 2a2:	93 e0       	ldi	r25, 0x03	; 3
 2a4:	0d d4       	rcall	.+2074   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
				break;
			}	
		}
	};
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	08 95       	ret

000002b0 <_ZN9Main_Menu5closeEv>:
		
	};
	
	void close()override
	{
		oled.OLED_Bufer_Clear();
 2b0:	84 ec       	ldi	r24, 0xC4	; 196
 2b2:	93 e0       	ldi	r25, 0x03	; 3
 2b4:	25 c3       	rjmp	.+1610   	; 0x900 <_ZN4OLED16OLED_Bufer_ClearEv>
 2b6:	08 95       	ret

000002b8 <__vector_4>:
bool btn3=false;
bool btn03=false;
bool btn12=false;

ISR(PCINT0_vect)
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	8f 93       	push	r24
 2c4:	9f 93       	push	r25
    cli();
 2c6:	f8 94       	cli
	if(PINA==0b00000100&!btn0 )
 2c8:	90 b1       	in	r25, 0x00	; 0
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	94 30       	cpi	r25, 0x04	; 4
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <__vector_4+0x1a>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <btn0>
 2d6:	98 17       	cp	r25, r24
 2d8:	18 f4       	brcc	.+6      	; 0x2e0 <__vector_4+0x28>
	{
		btn0=true;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <btn0>
	}
	if(PINA==0b00001000&!btn1 )
 2e0:	90 b1       	in	r25, 0x00	; 0
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	98 30       	cpi	r25, 0x08	; 8
 2e6:	09 f0       	breq	.+2      	; 0x2ea <__vector_4+0x32>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <btn1>
 2ee:	98 17       	cp	r25, r24
 2f0:	18 f4       	brcc	.+6      	; 0x2f8 <__vector_4+0x40>
	{
		btn1=true;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <btn1>
	}
	if(PINA==0b00010000&!btn2 )
 2f8:	90 b1       	in	r25, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 31       	cpi	r25, 0x10	; 16
 2fe:	09 f0       	breq	.+2      	; 0x302 <__vector_4+0x4a>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <btn2>
 306:	98 17       	cp	r25, r24
 308:	18 f4       	brcc	.+6      	; 0x310 <__vector_4+0x58>
	{
		btn2=true;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <btn2>
	}
	if(PINA==0b00100000&!btn3 )
 310:	90 b1       	in	r25, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 32       	cpi	r25, 0x20	; 32
 316:	09 f0       	breq	.+2      	; 0x31a <__vector_4+0x62>
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <btn3>
 31e:	98 17       	cp	r25, r24
 320:	18 f4       	brcc	.+6      	; 0x328 <__vector_4+0x70>
	{
		btn3=true;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <btn3>
	}
	if(PINA==0b00011000&!btn03)
 328:	90 b1       	in	r25, 0x00	; 0
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	98 31       	cpi	r25, 0x18	; 24
 32e:	09 f0       	breq	.+2      	; 0x332 <__vector_4+0x7a>
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 91 b9 03 	lds	r25, 0x03B9	; 0x8003b9 <btn03>
 336:	98 17       	cp	r25, r24
 338:	18 f4       	brcc	.+6      	; 0x340 <__vector_4+0x88>
	{
		btn03=true;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <btn03>
	}
	if(PINA==0b00100100&!btn12)
 340:	90 b1       	in	r25, 0x00	; 0
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	94 32       	cpi	r25, 0x24	; 36
 346:	09 f0       	breq	.+2      	; 0x34a <__vector_4+0x92>
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 91 b8 03 	lds	r25, 0x03B8	; 0x8003b8 <btn12>
 34e:	98 17       	cp	r25, r24
 350:	18 f4       	brcc	.+6      	; 0x358 <__vector_4+0xa0>
	{
		btn12=true;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <btn12>
	}
	sei();
 358:	78 94       	sei

}
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <_Z5checkv>:


void check()
{
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
	if(btn0 & !btn1 & !btn2 & btn3) btn03=true;
 372:	50 91 bd 03 	lds	r21, 0x03BD	; 0x8003bd <btn0>
 376:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <btn1>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	39 2f       	mov	r19, r25
 37e:	38 27       	eor	r19, r24
 380:	20 91 bb 03 	lds	r18, 0x03BB	; 0x8003bb <btn2>
 384:	62 2f       	mov	r22, r18
 386:	68 27       	eor	r22, r24
 388:	b3 2f       	mov	r27, r19
 38a:	b6 23       	and	r27, r22
 38c:	75 2f       	mov	r23, r21
 38e:	7b 23       	and	r23, r27
 390:	c0 91 ba 03 	lds	r28, 0x03BA	; 0x8003ba <btn3>
 394:	ac 2f       	mov	r26, r28
 396:	a7 23       	and	r26, r23
 398:	51 f0       	breq	.+20     	; 0x3ae <_Z5checkv+0x46>
 39a:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <btn03>
	if(!btn0 & btn1 & btn2 & !btn3) btn12=true;
 39e:	f5 2f       	mov	r31, r21
 3a0:	f8 27       	eor	r31, r24
 3a2:	8c 27       	eor	r24, r28
 3a4:	9f 23       	and	r25, r31
 3a6:	92 23       	and	r25, r18
 3a8:	c9 17       	cp	r28, r25
 3aa:	50 f0       	brcs	.+20     	; 0x3c0 <_Z5checkv+0x58>
 3ac:	1a c1       	rjmp	.+564    	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	f5 2f       	mov	r31, r21
 3b2:	f8 27       	eor	r31, r24
 3b4:	9f 23       	and	r25, r31
 3b6:	8c 27       	eor	r24, r28
 3b8:	42 2f       	mov	r20, r18
 3ba:	49 23       	and	r20, r25
 3bc:	c4 17       	cp	r28, r20
 3be:	40 f4       	brcc	.+16     	; 0x3d0 <_Z5checkv+0x68>
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <btn12>
	
	if(btn0 & !btn1 & !btn2 & !btn3 & !btn12 & !btn03)
 3c6:	a0 91 b9 03 	lds	r26, 0x03B9	; 0x8003b9 <btn03>
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	e1 e0       	ldi	r30, 0x01	; 1
 3ce:	62 c0       	rjmp	.+196    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 3d0:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <btn12>
 3d4:	51 e0       	ldi	r21, 0x01	; 1
 3d6:	4e 2f       	mov	r20, r30
 3d8:	45 27       	eor	r20, r21
 3da:	a0 91 b9 03 	lds	r26, 0x03B9	; 0x8003b9 <btn03>
 3de:	58 2f       	mov	r21, r24
 3e0:	54 23       	and	r21, r20
 3e2:	75 23       	and	r23, r21
 3e4:	a7 17       	cp	r26, r23
 3e6:	b0 f5       	brcc	.+108    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
 3e8:	08 e0       	ldi	r16, 0x08	; 8
 3ea:	10 e0       	ldi	r17, 0x00	; 0
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	40 e0       	ldi	r20, 0x00	; 0
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	84 ec       	ldi	r24, 0xC4	; 196
 3fa:	93 e0       	ldi	r25, 0x03	; 3
 3fc:	12 d3       	rcall	.+1572   	; 0xa22 <_ZN4OLED21OLED_Clear_Bufer_partEiiii>
		oled.OLED_Write_To_Bufer(0,0,1,8,zero);
 3fe:	0f 2e       	mov	r0, r31
 400:	f8 e9       	ldi	r31, 0x98	; 152
 402:	ef 2e       	mov	r14, r31
 404:	f3 e0       	ldi	r31, 0x03	; 3
 406:	ff 2e       	mov	r15, r31
 408:	f0 2d       	mov	r31, r0
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	84 ec       	ldi	r24, 0xC4	; 196
 418:	93 e0       	ldi	r25, 0x03	; 3
 41a:	52 d3       	rcall	.+1700   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		actions();
	};
	
	void previous()override
	{
		pointer--;
 41c:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <menu+0x4>
 420:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <menu+0x5>
 424:	01 97       	sbiw	r24, 0x01	; 1
		if(pointer<0) pointer=MAIN_MENU_POINER_COUNT;
 426:	2a f0       	brmi	.+10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		actions();
	};
	
	void previous()override
	{
		pointer--;
 428:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <menu+0x5>
 42c:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <menu+0x4>
 430:	06 c0       	rjmp	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		if(pointer<0) pointer=MAIN_MENU_POINER_COUNT;
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <menu+0x5>
 43a:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <menu+0x4>
		actions();
 43e:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <menu>
 442:	f0 91 bf 03 	lds	r31, 0x03BF	; 0x8003bf <menu+0x1>
 446:	00 88       	ldd	r0, Z+16	; 0x10
 448:	f1 89       	ldd	r31, Z+17	; 0x11
 44a:	e0 2d       	mov	r30, r0
 44c:	8e eb       	ldi	r24, 0xBE	; 190
 44e:	93 e0       	ldi	r25, 0x03	; 3
 450:	09 95       	icall
 452:	ba c0       	rjmp	.+372    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
	//	if(!pss)passw.up();
		//else passww.up();
		menu.previous();
		//passw_menu.previous();
	}
	else if(!btn0 & btn1 & !btn2 & !btn3 & !btn12 & !btn03)
 454:	98 23       	and	r25, r24
 456:	96 23       	and	r25, r22
 458:	94 23       	and	r25, r20
 45a:	a9 17       	cp	r26, r25
 45c:	d8 f4       	brcc	.+54     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
 45e:	08 e0       	ldi	r16, 0x08	; 8
 460:	10 e0       	ldi	r17, 0x00	; 0
 462:	21 e0       	ldi	r18, 0x01	; 1
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	40 e0       	ldi	r20, 0x00	; 0
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	84 ec       	ldi	r24, 0xC4	; 196
 470:	93 e0       	ldi	r25, 0x03	; 3
 472:	d7 d2       	rcall	.+1454   	; 0xa22 <_ZN4OLED21OLED_Clear_Bufer_partEiiii>
		oled.OLED_Write_To_Bufer(0,0,1,8,one);
 474:	0f 2e       	mov	r0, r31
 476:	f0 e9       	ldi	r31, 0x90	; 144
 478:	ef 2e       	mov	r14, r31
 47a:	f3 e0       	ldi	r31, 0x03	; 3
 47c:	ff 2e       	mov	r15, r31
 47e:	f0 2d       	mov	r31, r0
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	84 ec       	ldi	r24, 0xC4	; 196
 48e:	93 e0       	ldi	r25, 0x03	; 3
 490:	17 d3       	rcall	.+1582   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
 492:	9a c0       	rjmp	.+308    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 494:	3f 23       	and	r19, r31
		
	}
	else if(!btn0 & !btn1 & btn2 & !btn3 & !btn12 & !btn03)
 496:	98 2f       	mov	r25, r24
 498:	94 23       	and	r25, r20
 49a:	29 23       	and	r18, r25
 49c:	23 23       	and	r18, r19
 49e:	a2 17       	cp	r26, r18
 4a0:	d8 f4       	brcc	.+54     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
 4a2:	08 e0       	ldi	r16, 0x08	; 8
 4a4:	10 e0       	ldi	r17, 0x00	; 0
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 e0       	ldi	r20, 0x00	; 0
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	84 ec       	ldi	r24, 0xC4	; 196
 4b4:	93 e0       	ldi	r25, 0x03	; 3
 4b6:	b5 d2       	rcall	.+1386   	; 0xa22 <_ZN4OLED21OLED_Clear_Bufer_partEiiii>
		oled.OLED_Write_To_Bufer(0,0,1,8,two);
 4b8:	0f 2e       	mov	r0, r31
 4ba:	f8 e8       	ldi	r31, 0x88	; 136
 4bc:	ef 2e       	mov	r14, r31
 4be:	f3 e0       	ldi	r31, 0x03	; 3
 4c0:	ff 2e       	mov	r15, r31
 4c2:	f0 2d       	mov	r31, r0
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	84 ec       	ldi	r24, 0xC4	; 196
 4d2:	93 e0       	ldi	r25, 0x03	; 3
 4d4:	f5 d2       	rcall	.+1514   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
 4d6:	78 c0       	rjmp	.+240    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
		
	}
	else if(!btn0 & !btn1 & !btn2 & btn3 & !btn12 & !btn03)
 4d8:	6c 23       	and	r22, r28
 4da:	64 23       	and	r22, r20
 4dc:	36 23       	and	r19, r22
 4de:	a3 17       	cp	r26, r19
 4e0:	b0 f5       	brcc	.+108    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
 4e2:	08 e0       	ldi	r16, 0x08	; 8
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	21 e0       	ldi	r18, 0x01	; 1
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	40 e0       	ldi	r20, 0x00	; 0
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	84 ec       	ldi	r24, 0xC4	; 196
 4f4:	93 e0       	ldi	r25, 0x03	; 3
 4f6:	95 d2       	rcall	.+1322   	; 0xa22 <_ZN4OLED21OLED_Clear_Bufer_partEiiii>
		oled.OLED_Write_To_Bufer(0,0,1,8,three);
 4f8:	0f 2e       	mov	r0, r31
 4fa:	f0 e8       	ldi	r31, 0x80	; 128
 4fc:	ef 2e       	mov	r14, r31
 4fe:	f3 e0       	ldi	r31, 0x03	; 3
 500:	ff 2e       	mov	r15, r31
 502:	f0 2d       	mov	r31, r0
 504:	21 e0       	ldi	r18, 0x01	; 1
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	84 ec       	ldi	r24, 0xC4	; 196
 512:	93 e0       	ldi	r25, 0x03	; 3
 514:	d5 d2       	rcall	.+1450   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.OLED_Bufer_Clear();
	};
	
	void next()override
	{
		pointer++;
 516:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <menu+0x4>
 51a:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <menu+0x5>
 51e:	01 96       	adiw	r24, 0x01	; 1
		if(pointer>MAIN_MENU_POINER_COUNT) pointer=0;
 520:	83 30       	cpi	r24, 0x03	; 3
 522:	91 05       	cpc	r25, r1
 524:	2c f4       	brge	.+10     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
		oled.OLED_Bufer_Clear();
	};
	
	void next()override
	{
		pointer++;
 526:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <menu+0x5>
 52a:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <menu+0x4>
 52e:	04 c0       	rjmp	.+8      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
		if(pointer>MAIN_MENU_POINER_COUNT) pointer=0;
 530:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <menu+0x5>
 534:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <menu+0x4>
		actions();
 538:	e0 91 be 03 	lds	r30, 0x03BE	; 0x8003be <menu>
 53c:	f0 91 bf 03 	lds	r31, 0x03BF	; 0x8003bf <menu+0x1>
 540:	00 88       	ldd	r0, Z+16	; 0x10
 542:	f1 89       	ldd	r31, Z+17	; 0x11
 544:	e0 2d       	mov	r30, r0
 546:	8e eb       	ldi	r24, 0xBE	; 190
 548:	93 e0       	ldi	r25, 0x03	; 3
 54a:	09 95       	icall
 54c:	3d c0       	rjmp	.+122    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
	//	if(!pss)passw.down();
		//else passww.down();
		menu.next();
		//passw_menu.next();
	}
	else if(!btn0  & !btn3 & btn12 & !btn03)
 54e:	8f 23       	and	r24, r31
 550:	e8 23       	and	r30, r24
 552:	ae 17       	cp	r26, r30
 554:	d8 f4       	brcc	.+54     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
 556:	08 e0       	ldi	r16, 0x08	; 8
 558:	10 e0       	ldi	r17, 0x00	; 0
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	84 ec       	ldi	r24, 0xC4	; 196
 568:	93 e0       	ldi	r25, 0x03	; 3
 56a:	5b d2       	rcall	.+1206   	; 0xa22 <_ZN4OLED21OLED_Clear_Bufer_partEiiii>
		oled.OLED_Write_To_Bufer(0,0,1,8,four);
 56c:	0f 2e       	mov	r0, r31
 56e:	f8 e7       	ldi	r31, 0x78	; 120
 570:	ef 2e       	mov	r14, r31
 572:	f3 e0       	ldi	r31, 0x03	; 3
 574:	ff 2e       	mov	r15, r31
 576:	f0 2d       	mov	r31, r0
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	84 ec       	ldi	r24, 0xC4	; 196
 586:	93 e0       	ldi	r25, 0x03	; 3
 588:	9b d2       	rcall	.+1334   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
 58a:	1e c0       	rjmp	.+60     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
		//if(!pss)passw.forward();
	//	else passww.forward();
	menu.back();
		
	}
	else if(!btn1 & !btn2 & !btn12 & btn03)
 58c:	4b 23       	and	r20, r27
 58e:	e1 f0       	breq	.+56     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 590:	aa 23       	and	r26, r26
 592:	d1 f0       	breq	.+52     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
 594:	08 e0       	ldi	r16, 0x08	; 8
 596:	10 e0       	ldi	r17, 0x00	; 0
 598:	21 e0       	ldi	r18, 0x01	; 1
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	84 ec       	ldi	r24, 0xC4	; 196
 5a6:	93 e0       	ldi	r25, 0x03	; 3
 5a8:	3c d2       	rcall	.+1144   	; 0xa22 <_ZN4OLED21OLED_Clear_Bufer_partEiiii>
		oled.OLED_Write_To_Bufer(0,0,1,8,five);
 5aa:	0f 2e       	mov	r0, r31
 5ac:	f0 e7       	ldi	r31, 0x70	; 112
 5ae:	ef 2e       	mov	r14, r31
 5b0:	f3 e0       	ldi	r31, 0x03	; 3
 5b2:	ff 2e       	mov	r15, r31
 5b4:	f0 2d       	mov	r31, r0
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	70 e0       	ldi	r23, 0x00	; 0
 5c2:	84 ec       	ldi	r24, 0xC4	; 196
 5c4:	93 e0       	ldi	r25, 0x03	; 3
 5c6:	7c d2       	rcall	.+1272   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
	//	if(!pss)passw.back();
	//	else passww.back();
	//passw_menu.choise();
		
	}
		btn0=false;
 5c8:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <btn0>
		btn1=false;
 5cc:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <btn1>
		btn2=false;
 5d0:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <btn2>
		btn3=false;
 5d4:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <btn3>
		btn03=false;
 5d8:	10 92 b9 03 	sts	0x03B9, r1	; 0x8003b9 <btn03>
		btn12=false;
 5dc:	10 92 b8 03 	sts	0x03B8, r1	; 0x8003b8 <btn12>
	
}
 5e0:	06 c0       	rjmp	.+12     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
void check()
{
	if(btn0 & !btn1 & !btn2 & btn3) btn03=true;
	if(!btn0 & btn1 & btn2 & !btn3) btn12=true;
	
	if(btn0 & !btn1 & !btn2 & !btn3 & !btn12 & !btn03)
 5e2:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <btn12>
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	4e 2f       	mov	r20, r30
 5ea:	49 27       	eor	r20, r25
 5ec:	53 cf       	rjmp	.-346    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
		btn2=false;
		btn3=false;
		btn03=false;
		btn12=false;
	
}
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	ff 90       	pop	r15
 5f6:	ef 90       	pop	r14
 5f8:	08 95       	ret

000005fa <_ZN6Batary19printlvltoOLEDbuferEv>:
	if((PINB>>2)&0b00000001==1) kf++;
	if((PINB>>3)&0b00000001==1) kf++;
	curlvl=kf;
}

void printlvltoOLEDbufer()
 5fa:	ef 92       	push	r14
 5fc:	ff 92       	push	r15
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	ec 01       	movw	r28, r24
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
 608:	88 81       	ld	r24, Y
 60a:	99 81       	ldd	r25, Y+1	; 0x01
 60c:	89 2b       	or	r24, r25
 60e:	89 f4       	brne	.+34     	; 0x632 <_ZN6Batary19printlvltoOLEDbuferEv+0x38>
 610:	0f 2e       	mov	r0, r31
 612:	f0 e9       	ldi	r31, 0x90	; 144
 614:	ef 2e       	mov	r14, r31
 616:	f1 e0       	ldi	r31, 0x01	; 1
 618:	ff 2e       	mov	r15, r31
 61a:	f0 2d       	mov	r31, r0
 61c:	08 e0       	ldi	r16, 0x08	; 8
 61e:	10 e0       	ldi	r17, 0x00	; 0
 620:	24 e0       	ldi	r18, 0x04	; 4
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	40 e0       	ldi	r20, 0x00	; 0
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	60 e6       	ldi	r22, 0x60	; 96
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	84 ec       	ldi	r24, 0xC4	; 196
 62e:	93 e0       	ldi	r25, 0x03	; 3
 630:	47 d2       	rcall	.+1166   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
 632:	88 81       	ld	r24, Y
 634:	99 81       	ldd	r25, Y+1	; 0x01
 636:	01 97       	sbiw	r24, 0x01	; 1
 638:	89 f4       	brne	.+34     	; 0x65c <_ZN6Batary19printlvltoOLEDbuferEv+0x62>
 63a:	0f 2e       	mov	r0, r31
 63c:	f0 e7       	ldi	r31, 0x70	; 112
 63e:	ef 2e       	mov	r14, r31
 640:	f1 e0       	ldi	r31, 0x01	; 1
 642:	ff 2e       	mov	r15, r31
 644:	f0 2d       	mov	r31, r0
 646:	08 e0       	ldi	r16, 0x08	; 8
 648:	10 e0       	ldi	r17, 0x00	; 0
 64a:	24 e0       	ldi	r18, 0x04	; 4
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	60 e6       	ldi	r22, 0x60	; 96
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	84 ec       	ldi	r24, 0xC4	; 196
 658:	93 e0       	ldi	r25, 0x03	; 3
 65a:	32 d2       	rcall	.+1124   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
 65c:	88 81       	ld	r24, Y
 65e:	99 81       	ldd	r25, Y+1	; 0x01
 660:	02 97       	sbiw	r24, 0x02	; 2
 662:	89 f4       	brne	.+34     	; 0x686 <_ZN6Batary19printlvltoOLEDbuferEv+0x8c>
 664:	0f 2e       	mov	r0, r31
 666:	f0 e5       	ldi	r31, 0x50	; 80
 668:	ef 2e       	mov	r14, r31
 66a:	f1 e0       	ldi	r31, 0x01	; 1
 66c:	ff 2e       	mov	r15, r31
 66e:	f0 2d       	mov	r31, r0
 670:	08 e0       	ldi	r16, 0x08	; 8
 672:	10 e0       	ldi	r17, 0x00	; 0
 674:	24 e0       	ldi	r18, 0x04	; 4
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	40 e0       	ldi	r20, 0x00	; 0
 67a:	50 e0       	ldi	r21, 0x00	; 0
 67c:	60 e6       	ldi	r22, 0x60	; 96
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	84 ec       	ldi	r24, 0xC4	; 196
 682:	93 e0       	ldi	r25, 0x03	; 3
 684:	1d d2       	rcall	.+1082   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
 686:	88 81       	ld	r24, Y
 688:	99 81       	ldd	r25, Y+1	; 0x01
 68a:	03 97       	sbiw	r24, 0x03	; 3
 68c:	89 f4       	brne	.+34     	; 0x6b0 <_ZN6Batary19printlvltoOLEDbuferEv+0xb6>
 68e:	0f 2e       	mov	r0, r31
 690:	f0 e3       	ldi	r31, 0x30	; 48
 692:	ef 2e       	mov	r14, r31
 694:	f1 e0       	ldi	r31, 0x01	; 1
 696:	ff 2e       	mov	r15, r31
 698:	f0 2d       	mov	r31, r0
 69a:	08 e0       	ldi	r16, 0x08	; 8
 69c:	10 e0       	ldi	r17, 0x00	; 0
 69e:	24 e0       	ldi	r18, 0x04	; 4
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	40 e0       	ldi	r20, 0x00	; 0
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	60 e6       	ldi	r22, 0x60	; 96
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	84 ec       	ldi	r24, 0xC4	; 196
 6ac:	93 e0       	ldi	r25, 0x03	; 3
 6ae:	08 d2       	rcall	.+1040   	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
 6b0:	88 81       	ld	r24, Y
 6b2:	99 81       	ldd	r25, Y+1	; 0x01
 6b4:	04 97       	sbiw	r24, 0x04	; 4
 6b6:	89 f4       	brne	.+34     	; 0x6da <_ZN6Batary19printlvltoOLEDbuferEv+0xe0>
 6b8:	0f 2e       	mov	r0, r31
 6ba:	f0 e1       	ldi	r31, 0x10	; 16
 6bc:	ef 2e       	mov	r14, r31
 6be:	f1 e0       	ldi	r31, 0x01	; 1
 6c0:	ff 2e       	mov	r15, r31
 6c2:	f0 2d       	mov	r31, r0
 6c4:	08 e0       	ldi	r16, 0x08	; 8
 6c6:	10 e0       	ldi	r17, 0x00	; 0
 6c8:	24 e0       	ldi	r18, 0x04	; 4
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	40 e0       	ldi	r20, 0x00	; 0
 6ce:	50 e0       	ldi	r21, 0x00	; 0
 6d0:	60 e6       	ldi	r22, 0x60	; 96
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	84 ec       	ldi	r24, 0xC4	; 196
 6d6:	93 e0       	ldi	r25, 0x03	; 3
 6d8:	f3 d1       	rcall	.+998    	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	08 95       	ret

000006e8 <main>:
		oled.OLED_Write_To_Bufer(84,4,1,8,arrow);
		*/
		
		//oled.OLED_Clear_Bufer_part(0,0,1,8);
		//oled.OLED_Write_To_Bufer(2,2,1,8,arrow);
		oled.OLED_Write_Bufer();
 6e8:	84 ec       	ldi	r24, 0xC4	; 196
 6ea:	93 e0       	ldi	r25, 0x03	; 3
 6ec:	f0 d0       	rcall	.+480    	; 0x8ce <_ZN4OLED16OLED_Write_BuferEv>
		//Interupts

	DDRA = 0x00;
 6ee:	11 b8       	out	0x01, r1	; 1
		PORTA=0x00;
 6f0:	12 b8       	out	0x02, r1	; 2
		PCMSK0=0b00111100;
 6f2:	8c e3       	ldi	r24, 0x3C	; 60
 6f4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
		PCICR|=0b00000001;
 6f8:	e8 e6       	ldi	r30, 0x68	; 104
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	81 60       	ori	r24, 0x01	; 1
 700:	80 83       	st	Z, r24
		sei();
 702:	78 94       	sei
}

void refreshlvl()
{
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
 704:	83 b1       	in	r24, 0x03	; 3
	printlvltoOLEDbufer();
}

void refreshlvl()
{
	int kf=0;
 706:	81 70       	andi	r24, 0x01	; 1
 708:	c8 2f       	mov	r28, r24
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	d8 2f       	mov	r29, r24
 70e:	ce 01       	movw	r24, r28
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
 710:	19 99       	sbic	0x03, 1	; 3
 712:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>2)&0b00000001==1) kf++;
 714:	1a 99       	sbic	0x03, 2	; 3
 716:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>3)&0b00000001==1) kf++;
 718:	1b 99       	sbic	0x03, 3	; 3
 71a:	01 96       	adiw	r24, 0x01	; 1
	curlvl=kf;
 71c:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <__data_end+0x1>
 720:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <__data_end>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
 724:	89 2b       	or	r24, r25
 726:	89 f4       	brne	.+34     	; 0x74a <main+0x62>
 728:	0f 2e       	mov	r0, r31
 72a:	f0 e9       	ldi	r31, 0x90	; 144
 72c:	ef 2e       	mov	r14, r31
 72e:	f1 e0       	ldi	r31, 0x01	; 1
 730:	ff 2e       	mov	r15, r31
 732:	f0 2d       	mov	r31, r0
 734:	08 e0       	ldi	r16, 0x08	; 8
 736:	10 e0       	ldi	r17, 0x00	; 0
 738:	24 e0       	ldi	r18, 0x04	; 4
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	40 e0       	ldi	r20, 0x00	; 0
 73e:	50 e0       	ldi	r21, 0x00	; 0
 740:	60 e6       	ldi	r22, 0x60	; 96
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	84 ec       	ldi	r24, 0xC4	; 196
 746:	93 e0       	ldi	r25, 0x03	; 3
 748:	bb d1       	rcall	.+886    	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
 74a:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <__data_end>
 74e:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <__data_end+0x1>
 752:	01 97       	sbiw	r24, 0x01	; 1
 754:	89 f4       	brne	.+34     	; 0x778 <main+0x90>
 756:	0f 2e       	mov	r0, r31
 758:	f0 e7       	ldi	r31, 0x70	; 112
 75a:	ef 2e       	mov	r14, r31
 75c:	f1 e0       	ldi	r31, 0x01	; 1
 75e:	ff 2e       	mov	r15, r31
 760:	f0 2d       	mov	r31, r0
 762:	08 e0       	ldi	r16, 0x08	; 8
 764:	10 e0       	ldi	r17, 0x00	; 0
 766:	24 e0       	ldi	r18, 0x04	; 4
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	40 e0       	ldi	r20, 0x00	; 0
 76c:	50 e0       	ldi	r21, 0x00	; 0
 76e:	60 e6       	ldi	r22, 0x60	; 96
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	84 ec       	ldi	r24, 0xC4	; 196
 774:	93 e0       	ldi	r25, 0x03	; 3
 776:	a4 d1       	rcall	.+840    	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
 778:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <__data_end>
 77c:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <__data_end+0x1>
 780:	02 97       	sbiw	r24, 0x02	; 2
 782:	89 f4       	brne	.+34     	; 0x7a6 <main+0xbe>
 784:	0f 2e       	mov	r0, r31
 786:	f0 e5       	ldi	r31, 0x50	; 80
 788:	ef 2e       	mov	r14, r31
 78a:	f1 e0       	ldi	r31, 0x01	; 1
 78c:	ff 2e       	mov	r15, r31
 78e:	f0 2d       	mov	r31, r0
 790:	08 e0       	ldi	r16, 0x08	; 8
 792:	10 e0       	ldi	r17, 0x00	; 0
 794:	24 e0       	ldi	r18, 0x04	; 4
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	40 e0       	ldi	r20, 0x00	; 0
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	60 e6       	ldi	r22, 0x60	; 96
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	84 ec       	ldi	r24, 0xC4	; 196
 7a2:	93 e0       	ldi	r25, 0x03	; 3
 7a4:	8d d1       	rcall	.+794    	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
 7a6:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <__data_end>
 7aa:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <__data_end+0x1>
 7ae:	03 97       	sbiw	r24, 0x03	; 3
 7b0:	89 f4       	brne	.+34     	; 0x7d4 <main+0xec>
 7b2:	0f 2e       	mov	r0, r31
 7b4:	f0 e3       	ldi	r31, 0x30	; 48
 7b6:	ef 2e       	mov	r14, r31
 7b8:	f1 e0       	ldi	r31, 0x01	; 1
 7ba:	ff 2e       	mov	r15, r31
 7bc:	f0 2d       	mov	r31, r0
 7be:	08 e0       	ldi	r16, 0x08	; 8
 7c0:	10 e0       	ldi	r17, 0x00	; 0
 7c2:	24 e0       	ldi	r18, 0x04	; 4
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	40 e0       	ldi	r20, 0x00	; 0
 7c8:	50 e0       	ldi	r21, 0x00	; 0
 7ca:	60 e6       	ldi	r22, 0x60	; 96
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	84 ec       	ldi	r24, 0xC4	; 196
 7d0:	93 e0       	ldi	r25, 0x03	; 3
 7d2:	76 d1       	rcall	.+748    	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
 7d4:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <__data_end>
 7d8:	90 91 b7 03 	lds	r25, 0x03B7	; 0x8003b7 <__data_end+0x1>
 7dc:	04 97       	sbiw	r24, 0x04	; 4
 7de:	89 f4       	brne	.+34     	; 0x802 <main+0x11a>
 7e0:	0f 2e       	mov	r0, r31
 7e2:	f0 e1       	ldi	r31, 0x10	; 16
 7e4:	ef 2e       	mov	r14, r31
 7e6:	f1 e0       	ldi	r31, 0x01	; 1
 7e8:	ff 2e       	mov	r15, r31
 7ea:	f0 2d       	mov	r31, r0
 7ec:	08 e0       	ldi	r16, 0x08	; 8
 7ee:	10 e0       	ldi	r17, 0x00	; 0
 7f0:	24 e0       	ldi	r18, 0x04	; 4
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	40 e0       	ldi	r20, 0x00	; 0
 7f6:	50 e0       	ldi	r21, 0x00	; 0
 7f8:	60 e6       	ldi	r22, 0x60	; 96
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	84 ec       	ldi	r24, 0xC4	; 196
 7fe:	93 e0       	ldi	r25, 0x03	; 3
 800:	5f d1       	rcall	.+702    	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.writenumber((PINB>>3)&0b00000001);*/
	while(1)
	{
		
	 batary.refresh();
	 oled.OLED_Write_To_Bufer(80,0,2,8,Net0);
 802:	0f 2e       	mov	r0, r31
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	ef 2e       	mov	r14, r31
 808:	f1 e0       	ldi	r31, 0x01	; 1
 80a:	ff 2e       	mov	r15, r31
 80c:	f0 2d       	mov	r31, r0
 80e:	08 e0       	ldi	r16, 0x08	; 8
 810:	10 e0       	ldi	r17, 0x00	; 0
 812:	22 e0       	ldi	r18, 0x02	; 2
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	40 e0       	ldi	r20, 0x00	; 0
 818:	50 e0       	ldi	r21, 0x00	; 0
 81a:	60 e5       	ldi	r22, 0x50	; 80
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	84 ec       	ldi	r24, 0xC4	; 196
	// oled.OLED_Write_To_Bufer(1,1,1,8,zero);
	// oled.OLED_Write_To_Bufer(9,1,1,8,two);
	// oled.OLED_Write_To_Bufer(17,1,1,8,nine);
	 oled.OLED_Write_Bufer();
 820:	93 e0       	ldi	r25, 0x03	; 3
 822:	4e d1       	rcall	.+668    	; 0xac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
 824:	84 ec       	ldi	r24, 0xC4	; 196
 826:	93 e0       	ldi	r25, 0x03	; 3
	 //_delay_ms(1000);
	 
	// _delay_ms(100);
     check();
 828:	52 d0       	rcall	.+164    	; 0x8ce <_ZN4OLED16OLED_Write_BuferEv>
 82a:	9e dd       	rcall	.-1220   	; 0x368 <_Z5checkv>
				oled.writenumber(4-kf);
						oled.writenumber((PINB>>0)&0b00000001);
		oled.writenumber((PINB>>1)&0b00000001);
		oled.writenumber((PINB>>2)&0b00000001);
		oled.writenumber((PINB>>3)&0b00000001);*/
	while(1)
 82c:	6b cf       	rjmp	.-298    	; 0x704 <main+0x1c>

0000082e <_GLOBAL__sub_I_zero>:
	 //_delay_ms(1000);
	 
	// _delay_ms(100);
     check();
	}
}
 82e:	cf 93       	push	r28
 830:	df 93       	push	r29





TWI wire;
 832:	85 ec       	ldi	r24, 0xC5	; 197
 834:	97 e0       	ldi	r25, 0x07	; 7
 836:	f1 d1       	rcall	.+994    	; 0xc1a <_ZN3TWIC1Ev>
OLED oled(wire);
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	84 ec       	ldi	r24, 0xC4	; 196
 83c:	93 e0       	ldi	r25, 0x03	; 3
 83e:	67 d0       	rcall	.+206    	; 0x90e <_ZN4OLEDC1E3TWI>
{
	protected:
	int pointer=0;
	public:
	Main_Menu()
	{
 840:	ee eb       	ldi	r30, 0xBE	; 190
 842:	f3 e0       	ldi	r31, 0x03	; 3
 844:	84 ea       	ldi	r24, 0xA4	; 164
 846:	93 e0       	ldi	r25, 0x03	; 3
 848:	91 83       	std	Z+1, r25	; 0x01
 84a:	80 83       	st	Z, r24
 84c:	15 82       	std	Z+5, r1	; 0x05
		Default();
 84e:	14 82       	std	Z+4, r1	; 0x04
 850:	cf 01       	movw	r24, r30
		actions();
 852:	a0 dc       	rcall	.-1728   	; 0x194 <_ZN9Main_Menu7DefaultEv>
 854:	8e eb       	ldi	r24, 0xBE	; 190
 856:	93 e0       	ldi	r25, 0x03	; 3
 858:	c6 dc       	rcall	.-1652   	; 0x1e6 <_ZN9Main_Menu7actionsEv>
private:
int curlvl;
public:
Batary()
{
	DDRB=0x00;
 85a:	14 b8       	out	0x04, r1	; 4
	PORTB=0x0F;	
 85c:	8f e0       	ldi	r24, 0x0F	; 15
 85e:	85 b9       	out	0x05, r24	; 5
}

void refreshlvl()
{
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
 860:	83 b1       	in	r24, 0x03	; 3
	printlvltoOLEDbufer();
}

void refreshlvl()
{
	int kf=0;
 862:	81 70       	andi	r24, 0x01	; 1
 864:	c8 2f       	mov	r28, r24
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	d8 2f       	mov	r29, r24
 86a:	ce 01       	movw	r24, r28
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
 86c:	19 99       	sbic	0x03, 1	; 3
 86e:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>2)&0b00000001==1) kf++;
 870:	1a 99       	sbic	0x03, 2	; 3
 872:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>3)&0b00000001==1) kf++;
 874:	1b 99       	sbic	0x03, 3	; 3
 876:	01 96       	adiw	r24, 0x01	; 1
	curlvl=kf;
 878:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <__data_end+0x1>
 87c:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <__data_end>
Batary()
{
	DDRB=0x00;
	PORTB=0x0F;	
	refreshlvl();
	printlvltoOLEDbufer();
 880:	86 eb       	ldi	r24, 0xB6	; 182
 882:	93 e0       	ldi	r25, 0x03	; 3
 884:	ba de       	rcall	.-652    	; 0x5fa <_ZN6Batary19printlvltoOLEDbuferEv>
	 //_delay_ms(1000);
	 
	// _delay_ms(100);
     check();
	}
}
 886:	df 91       	pop	r29
 888:	cf 91       	pop	r28
 88a:	08 95       	ret

0000088c <_ZN4OLED12OLED_CommandEi>:
	}
	

	void OLED::OLED_Command(int command)
	{
		TWDR=0x80;
 88c:	80 e8       	ldi	r24, 0x80	; 128
 88e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR=(1<<TWINT)|(1<<TWEN);
 892:	84 e8       	ldi	r24, 0x84	; 132
 894:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
 898:	ec eb       	ldi	r30, 0xBC	; 188
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	80 81       	ld	r24, Z
 89e:	88 23       	and	r24, r24
 8a0:	ec f7       	brge	.-6      	; 0x89c <_ZN4OLED12OLED_CommandEi+0x10>

		TWDR=command;
 8a2:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR=(1<<TWINT)|(1<<TWEN);
 8a6:	84 e8       	ldi	r24, 0x84	; 132
 8a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
 8ac:	ec eb       	ldi	r30, 0xBC	; 188
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	88 23       	and	r24, r24
 8b4:	ec f7       	brge	.-6      	; 0x8b0 <_ZN4OLED12OLED_CommandEi+0x24>
	}
 8b6:	08 95       	ret

000008b8 <_ZN4OLED9OLED_DataEi>:


	void OLED::OLED_Data(int data)
	{
		TWDR=data;
 8b8:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR=(1<<TWINT)|(1<<TWEN);
 8bc:	84 e8       	ldi	r24, 0x84	; 132
 8be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
 8c2:	ec eb       	ldi	r30, 0xBC	; 188
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	88 23       	and	r24, r24
 8ca:	ec f7       	brge	.-6      	; 0x8c6 <_ZN4OLED9OLED_DataEi+0xe>
	}
 8cc:	08 95       	ret

000008ce <_ZN4OLED16OLED_Write_BuferEv>:


	void OLED::OLED_Write_Bufer()
	{
 8ce:	ef 92       	push	r14
 8d0:	ff 92       	push	r15
 8d2:	0f 93       	push	r16
 8d4:	1f 93       	push	r17
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	8c 01       	movw	r16, r24
 8dc:	ec 01       	movw	r28, r24
 8de:	7c 01       	movw	r14, r24
 8e0:	8c ef       	ldi	r24, 0xFC	; 252
 8e2:	f8 1a       	sub	r15, r24
		for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
		{
			OLED_Data(oled_bufer[i]);
 8e4:	69 91       	ld	r22, Y+
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	c8 01       	movw	r24, r16
 8ea:	e6 df       	rcall	.-52     	; 0x8b8 <_ZN4OLED9OLED_DataEi>
	}


	void OLED::OLED_Write_Bufer()
	{
		for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
 8ec:	ce 15       	cp	r28, r14
 8ee:	df 05       	cpc	r29, r15
 8f0:	c9 f7       	brne	.-14     	; 0x8e4 <_ZN4OLED16OLED_Write_BuferEv+0x16>
		{
			OLED_Data(oled_bufer[i]);
		}
	}
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	1f 91       	pop	r17
 8f8:	0f 91       	pop	r16
 8fa:	ff 90       	pop	r15
 8fc:	ef 90       	pop	r14
 8fe:	08 95       	ret

00000900 <_ZN4OLED16OLED_Bufer_ClearEv>:

	void OLED::OLED_Bufer_Clear()
	{
 900:	fc 01       	movw	r30, r24
 902:	9c 5f       	subi	r25, 0xFC	; 252
		for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
		{
			oled_bufer[i]=0b00000000;
 904:	11 92       	st	Z+, r1
		}
	}

	void OLED::OLED_Bufer_Clear()
	{
		for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
 906:	e8 17       	cp	r30, r24
 908:	f9 07       	cpc	r31, r25
 90a:	e1 f7       	brne	.-8      	; 0x904 <_ZN4OLED16OLED_Bufer_ClearEv+0x4>
		{
			oled_bufer[i]=0b00000000;
		}
	}
 90c:	08 95       	ret

0000090e <_ZN4OLEDC1E3TWI>:
#include "OLED.h"

	OLED::OLED(TWI _wire)
 90e:	0f 93       	push	r16
 910:	1f 93       	push	r17
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	ec 01       	movw	r28, r24
 918:	8c 01       	movw	r16, r24
 91a:	1c 5f       	subi	r17, 0xFC	; 252
 91c:	c8 01       	movw	r24, r16
 91e:	7d d1       	rcall	.+762    	; 0xc1a <_ZN3TWIC1Ev>
	{
		wire=_wire;
		wire.twi_Init();
 920:	c8 01       	movw	r24, r16
 922:	7c d1       	rcall	.+760    	; 0xc1c <_ZN3TWI8twi_InitEv>
		wire.twi_Start();
 924:	c8 01       	movw	r24, r16
 926:	8b d1       	rcall	.+790    	; 0xc3e <_ZN3TWI9twi_StartEv>
		wire.twi_SendAdress();
 928:	c8 01       	movw	r24, r16
 92a:	7d d1       	rcall	.+762    	; 0xc26 <_ZN3TWI14twi_SendAdressEv>
		OLED_Command(0xA8);
 92c:	68 ea       	ldi	r22, 0xA8	; 168
 92e:	70 e0       	ldi	r23, 0x00	; 0
 930:	ce 01       	movw	r24, r28
 932:	ac df       	rcall	.-168    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0x3F);
 934:	6f e3       	ldi	r22, 0x3F	; 63
 936:	70 e0       	ldi	r23, 0x00	; 0
 938:	ce 01       	movw	r24, r28
 93a:	a8 df       	rcall	.-176    	; 0x88c <_ZN4OLED12OLED_CommandEi>

		OLED_Command(0xD3);
 93c:	63 ed       	ldi	r22, 0xD3	; 211
 93e:	70 e0       	ldi	r23, 0x00	; 0
 940:	ce 01       	movw	r24, r28
 942:	a4 df       	rcall	.-184    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0x00);
 944:	60 e0       	ldi	r22, 0x00	; 0
 946:	70 e0       	ldi	r23, 0x00	; 0
 948:	ce 01       	movw	r24, r28
 94a:	a0 df       	rcall	.-192    	; 0x88c <_ZN4OLED12OLED_CommandEi>

		OLED_Command(0x40);
 94c:	60 e4       	ldi	r22, 0x40	; 64
 94e:	70 e0       	ldi	r23, 0x00	; 0
 950:	ce 01       	movw	r24, r28
 952:	9c df       	rcall	.-200    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0xA1);
 954:	61 ea       	ldi	r22, 0xA1	; 161
 956:	70 e0       	ldi	r23, 0x00	; 0
 958:	ce 01       	movw	r24, r28
 95a:	98 df       	rcall	.-208    	; 0x88c <_ZN4OLED12OLED_CommandEi>

		OLED_Command(0xC8);
 95c:	68 ec       	ldi	r22, 0xC8	; 200
 95e:	70 e0       	ldi	r23, 0x00	; 0
 960:	ce 01       	movw	r24, r28
 962:	94 df       	rcall	.-216    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0xDA);
 964:	6a ed       	ldi	r22, 0xDA	; 218
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	ce 01       	movw	r24, r28
 96a:	90 df       	rcall	.-224    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0x12);
 96c:	62 e1       	ldi	r22, 0x12	; 18
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	ce 01       	movw	r24, r28
 972:	8c df       	rcall	.-232    	; 0x88c <_ZN4OLED12OLED_CommandEi>

		OLED_Command(0x81);
 974:	61 e8       	ldi	r22, 0x81	; 129
 976:	70 e0       	ldi	r23, 0x00	; 0
 978:	ce 01       	movw	r24, r28
 97a:	88 df       	rcall	.-240    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0xFF);
 97c:	6f ef       	ldi	r22, 0xFF	; 255
 97e:	70 e0       	ldi	r23, 0x00	; 0
 980:	ce 01       	movw	r24, r28
 982:	84 df       	rcall	.-248    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0xA4);
 984:	64 ea       	ldi	r22, 0xA4	; 164
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	ce 01       	movw	r24, r28
 98a:	80 df       	rcall	.-256    	; 0x88c <_ZN4OLED12OLED_CommandEi>

		OLED_Command(0xA6);
 98c:	66 ea       	ldi	r22, 0xA6	; 166
 98e:	70 e0       	ldi	r23, 0x00	; 0
 990:	ce 01       	movw	r24, r28
 992:	7c df       	rcall	.-264    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0xD5);
 994:	65 ed       	ldi	r22, 0xD5	; 213
 996:	70 e0       	ldi	r23, 0x00	; 0
 998:	ce 01       	movw	r24, r28
 99a:	78 df       	rcall	.-272    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0x80);
 99c:	60 e8       	ldi	r22, 0x80	; 128
 99e:	70 e0       	ldi	r23, 0x00	; 0
 9a0:	ce 01       	movw	r24, r28
 9a2:	74 df       	rcall	.-280    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0x8D);
 9a4:	6d e8       	ldi	r22, 0x8D	; 141
 9a6:	70 e0       	ldi	r23, 0x00	; 0
 9a8:	ce 01       	movw	r24, r28
 9aa:	70 df       	rcall	.-288    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0x14);
 9ac:	64 e1       	ldi	r22, 0x14	; 20
 9ae:	70 e0       	ldi	r23, 0x00	; 0
 9b0:	ce 01       	movw	r24, r28
 9b2:	6c df       	rcall	.-296    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0xAF);
 9b4:	6f ea       	ldi	r22, 0xAF	; 175
 9b6:	70 e0       	ldi	r23, 0x00	; 0
 9b8:	ce 01       	movw	r24, r28
 9ba:	68 df       	rcall	.-304    	; 0x88c <_ZN4OLED12OLED_CommandEi>

		OLED_Command(0x20);
 9bc:	60 e2       	ldi	r22, 0x20	; 32
 9be:	70 e0       	ldi	r23, 0x00	; 0
 9c0:	ce 01       	movw	r24, r28
 9c2:	64 df       	rcall	.-312    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0x00);
 9c4:	60 e0       	ldi	r22, 0x00	; 0
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	ce 01       	movw	r24, r28
 9ca:	60 df       	rcall	.-320    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0x21);
 9cc:	61 e2       	ldi	r22, 0x21	; 33
 9ce:	70 e0       	ldi	r23, 0x00	; 0
 9d0:	ce 01       	movw	r24, r28
 9d2:	5c df       	rcall	.-328    	; 0x88c <_ZN4OLED12OLED_CommandEi>
 9d4:	60 e0       	ldi	r22, 0x00	; 0
		OLED_Command(0);
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	ce 01       	movw	r24, r28
 9da:	58 df       	rcall	.-336    	; 0x88c <_ZN4OLED12OLED_CommandEi>
 9dc:	6f e7       	ldi	r22, 0x7F	; 127
		OLED_Command(127);
 9de:	70 e0       	ldi	r23, 0x00	; 0
 9e0:	ce 01       	movw	r24, r28
 9e2:	54 df       	rcall	.-344    	; 0x88c <_ZN4OLED12OLED_CommandEi>
		OLED_Command(0x22);
 9e4:	62 e2       	ldi	r22, 0x22	; 34
 9e6:	70 e0       	ldi	r23, 0x00	; 0
 9e8:	ce 01       	movw	r24, r28
 9ea:	50 df       	rcall	.-352    	; 0x88c <_ZN4OLED12OLED_CommandEi>
 9ec:	60 e0       	ldi	r22, 0x00	; 0
		OLED_Command(0);
 9ee:	70 e0       	ldi	r23, 0x00	; 0
 9f0:	ce 01       	movw	r24, r28
 9f2:	4c df       	rcall	.-360    	; 0x88c <_ZN4OLED12OLED_CommandEi>
 9f4:	67 e0       	ldi	r22, 0x07	; 7
 9f6:	70 e0       	ldi	r23, 0x00	; 0
		OLED_Command(7);
 9f8:	ce 01       	movw	r24, r28
 9fa:	48 df       	rcall	.-368    	; 0x88c <_ZN4OLED12OLED_CommandEi>
 9fc:	80 e4       	ldi	r24, 0x40	; 64
 9fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWDR=0x40;
 a02:	84 e8       	ldi	r24, 0x84	; 132
 a04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		TWCR=(1<<TWINT)|(1<<TWEN);
 a08:	ce 01       	movw	r24, r28
 a0a:	7a df       	rcall	.-268    	; 0x900 <_ZN4OLED16OLED_Bufer_ClearEv>
 a0c:	60 e0       	ldi	r22, 0x00	; 0
		OLED_Bufer_Clear();
 a0e:	70 e0       	ldi	r23, 0x00	; 0
 a10:	ce 01       	movw	r24, r28
 a12:	52 df       	rcall	.-348    	; 0x8b8 <_ZN4OLED9OLED_DataEi>
		OLED_Data(0b00000000);
 a14:	ce 01       	movw	r24, r28
 a16:	5b df       	rcall	.-330    	; 0x8ce <_ZN4OLED16OLED_Write_BuferEv>
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	1f 91       	pop	r17
		OLED_Write_Bufer();
 a1e:	0f 91       	pop	r16
 a20:	08 95       	ret

00000a22 <_ZN4OLED21OLED_Clear_Bufer_partEiiii>:
 a22:	cf 92       	push	r12
	}
 a24:	df 92       	push	r13
 a26:	ef 92       	push	r14
 a28:	ff 92       	push	r15
 a2a:	0f 93       	push	r16
 a2c:	1f 93       	push	r17
		}
	}


	void OLED::OLED_Clear_Bufer_part(int x,int y,int width,int height)
	{
 a2e:	cf 93       	push	r28
 a30:	df 93       	push	r29
 a32:	ec 01       	movw	r28, r24
 a34:	7b 01       	movw	r14, r22
 a36:	6a 01       	movw	r12, r20
 a38:	b9 01       	movw	r22, r18
		for(int j=0;j<height;j++)
 a3a:	10 16       	cp	r1, r16
 a3c:	11 06       	cpc	r1, r17
 a3e:	bc f5       	brge	.+110    	; 0xaae <_ZN4OLED21OLED_Clear_Bufer_partEiiii+0x8c>
 a40:	20 e0       	ldi	r18, 0x00	; 0
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	ab 01       	movw	r20, r22
 a46:	44 0f       	add	r20, r20
 a48:	55 1f       	adc	r21, r21
 a4a:	44 0f       	add	r20, r20
 a4c:	55 1f       	adc	r21, r21
 a4e:	44 0f       	add	r20, r20
 a50:	55 1f       	adc	r21, r21
 a52:	4e 0d       	add	r20, r14
 a54:	5f 1d       	adc	r21, r15
		{
			
			for(int i=0;i<width;i++)
 a56:	16 16       	cp	r1, r22
 a58:	17 06       	cpc	r1, r23
 a5a:	24 f5       	brge	.+72     	; 0xaa4 <_ZN4OLED21OLED_Clear_Bufer_partEiiii+0x82>
 a5c:	c9 01       	movw	r24, r18
 a5e:	33 23       	and	r19, r19
 a60:	0c f4       	brge	.+2      	; 0xa64 <_ZN4OLED21OLED_Clear_Bufer_partEiiii+0x42>
 a62:	07 96       	adiw	r24, 0x07	; 7
 a64:	95 95       	asr	r25
 a66:	87 95       	ror	r24
 a68:	95 95       	asr	r25
 a6a:	87 95       	ror	r24
 a6c:	95 95       	asr	r25
 a6e:	87 95       	ror	r24
 a70:	8c 0d       	add	r24, r12
 a72:	9d 1d       	adc	r25, r13
 a74:	96 95       	lsr	r25
 a76:	98 2f       	mov	r25, r24
 a78:	88 27       	eor	r24, r24
 a7a:	97 95       	ror	r25
 a7c:	87 95       	ror	r24
 a7e:	fc 01       	movw	r30, r24
 a80:	ee 0d       	add	r30, r14
 a82:	ff 1d       	adc	r31, r15
 a84:	ec 0f       	add	r30, r28
 a86:	fd 1f       	adc	r31, r29
 a88:	84 0f       	add	r24, r20
 a8a:	95 1f       	adc	r25, r21
 a8c:	8c 0f       	add	r24, r28
 a8e:	9d 1f       	adc	r25, r29
 a90:	df 01       	movw	r26, r30
 a92:	18 96       	adiw	r26, 0x08	; 8
			{
				for(int k=0;k<8;k++)
				{
					oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
 a94:	11 92       	st	Z+, r1
		for(int j=0;j<height;j++)
		{
			
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
 a96:	ea 17       	cp	r30, r26
 a98:	fb 07       	cpc	r31, r27
 a9a:	e1 f7       	brne	.-8      	; 0xa94 <_ZN4OLED21OLED_Clear_Bufer_partEiiii+0x72>
 a9c:	fd 01       	movw	r30, r26
	void OLED::OLED_Clear_Bufer_part(int x,int y,int width,int height)
	{
		for(int j=0;j<height;j++)
		{
			
			for(int i=0;i<width;i++)
 a9e:	8a 17       	cp	r24, r26
 aa0:	9b 07       	cpc	r25, r27
 aa2:	b1 f7       	brne	.-20     	; 0xa90 <_ZN4OLED21OLED_Clear_Bufer_partEiiii+0x6e>
	}


	void OLED::OLED_Clear_Bufer_part(int x,int y,int width,int height)
	{
		for(int j=0;j<height;j++)
 aa4:	2f 5f       	subi	r18, 0xFF	; 255
 aa6:	3f 4f       	sbci	r19, 0xFF	; 255
 aa8:	02 17       	cp	r16, r18
 aaa:	13 07       	cpc	r17, r19
 aac:	a1 f6       	brne	.-88     	; 0xa56 <_ZN4OLED21OLED_Clear_Bufer_partEiiii+0x34>
				{
					oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
				}
			}
		}
	}
 aae:	df 91       	pop	r29
 ab0:	cf 91       	pop	r28
 ab2:	1f 91       	pop	r17
 ab4:	0f 91       	pop	r16
 ab6:	ff 90       	pop	r15
 ab8:	ef 90       	pop	r14
 aba:	df 90       	pop	r13
 abc:	cf 90       	pop	r12
 abe:	08 95       	ret

00000ac0 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>:

	void OLED::OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
	{
 ac0:	2f 92       	push	r2
 ac2:	3f 92       	push	r3
 ac4:	4f 92       	push	r4
 ac6:	5f 92       	push	r5
 ac8:	6f 92       	push	r6
 aca:	7f 92       	push	r7
 acc:	8f 92       	push	r8
 ace:	9f 92       	push	r9
 ad0:	af 92       	push	r10
 ad2:	bf 92       	push	r11
 ad4:	cf 92       	push	r12
 ad6:	df 92       	push	r13
 ad8:	ef 92       	push	r14
 ada:	ff 92       	push	r15
 adc:	0f 93       	push	r16
 ade:	1f 93       	push	r17
 ae0:	cf 93       	push	r28
 ae2:	df 93       	push	r29
 ae4:	00 d0       	rcall	.+0      	; 0xae6 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x26>
 ae6:	00 d0       	rcall	.+0      	; 0xae8 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x28>
 ae8:	00 d0       	rcall	.+0      	; 0xaea <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x2a>
 aea:	cd b7       	in	r28, 0x3d	; 61
 aec:	de b7       	in	r29, 0x3e	; 62
 aee:	9e 83       	std	Y+6, r25	; 0x06
 af0:	8d 83       	std	Y+5, r24	; 0x05
 af2:	3a 01       	movw	r6, r20
 af4:	29 01       	movw	r4, r18
 af6:	18 01       	movw	r2, r16
		for(int j=0;j<height;j++)
 af8:	10 16       	cp	r1, r16
 afa:	11 06       	cpc	r1, r17
 afc:	0c f0       	brlt	.+2      	; 0xb00 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x40>
 afe:	74 c0       	rjmp	.+232    	; 0xbe8 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x128>
 b00:	3c 83       	std	Y+4, r19	; 0x04
 b02:	2b 83       	std	Y+3, r18	; 0x03
 b04:	8e 2c       	mov	r8, r14
 b06:	9f 2c       	mov	r9, r15
 b08:	c1 2c       	mov	r12, r1
 b0a:	d1 2c       	mov	r13, r1
			
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
					oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
 b0c:	0f 2e       	mov	r0, r31
 b0e:	f7 e0       	ldi	r31, 0x07	; 7
 b10:	af 2e       	mov	r10, r31
 b12:	b1 2c       	mov	r11, r1
 b14:	f0 2d       	mov	r31, r0
 b16:	c9 01       	movw	r24, r18
 b18:	88 0f       	add	r24, r24
 b1a:	99 1f       	adc	r25, r25
 b1c:	88 0f       	add	r24, r24
 b1e:	99 1f       	adc	r25, r25
 b20:	88 0f       	add	r24, r24
 b22:	99 1f       	adc	r25, r25
 b24:	9b 01       	movw	r18, r22
 b26:	28 0f       	add	r18, r24
 b28:	39 1f       	adc	r19, r25
 b2a:	3a 83       	std	Y+2, r19	; 0x02
 b2c:	29 83       	std	Y+1, r18	; 0x01
	void OLED::OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
	{
		for(int j=0;j<height;j++)
		{
			
			for(int i=0;i<width;i++)
 b2e:	14 14       	cp	r1, r4
 b30:	15 04       	cpc	r1, r5
 b32:	0c f0       	brlt	.+2      	; 0xb36 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x76>
 b34:	4e c0       	rjmp	.+156    	; 0xbd2 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x112>
			{
				for(int k=0;k<8;k++)
				{
					oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
 b36:	c6 01       	movw	r24, r12
 b38:	87 70       	andi	r24, 0x07	; 7
 b3a:	90 78       	andi	r25, 0x80	; 128
 b3c:	99 23       	and	r25, r25
 b3e:	24 f4       	brge	.+8      	; 0xb48 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x88>
 b40:	01 97       	sbiw	r24, 0x01	; 1
 b42:	88 6f       	ori	r24, 0xF8	; 248
 b44:	9f 6f       	ori	r25, 0xFF	; 255
 b46:	01 96       	adiw	r24, 0x01	; 1
 b48:	85 01       	movw	r16, r10
 b4a:	08 1b       	sub	r16, r24
 b4c:	19 0b       	sbc	r17, r25
 b4e:	76 01       	movw	r14, r12
 b50:	dd 20       	and	r13, r13
 b52:	1c f4       	brge	.+6      	; 0xb5a <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x9a>
 b54:	97 e0       	ldi	r25, 0x07	; 7
 b56:	e9 0e       	add	r14, r25
 b58:	f1 1c       	adc	r15, r1
 b5a:	f5 94       	asr	r15
 b5c:	e7 94       	ror	r14
 b5e:	f5 94       	asr	r15
 b60:	e7 94       	ror	r14
 b62:	f5 94       	asr	r15
 b64:	e7 94       	ror	r14
 b66:	e6 0c       	add	r14, r6
 b68:	f7 1c       	adc	r15, r7
 b6a:	f6 94       	lsr	r15
 b6c:	fe 2c       	mov	r15, r14
 b6e:	ee 24       	eor	r14, r14
 b70:	f7 94       	ror	r15
 b72:	e7 94       	ror	r14
 b74:	ab 01       	movw	r20, r22
 b76:	4e 0d       	add	r20, r14
 b78:	5f 1d       	adc	r21, r15
 b7a:	2d 81       	ldd	r18, Y+5	; 0x05
 b7c:	3e 81       	ldd	r19, Y+6	; 0x06
 b7e:	42 0f       	add	r20, r18
 b80:	53 1f       	adc	r21, r19
 b82:	89 81       	ldd	r24, Y+1	; 0x01
 b84:	9a 81       	ldd	r25, Y+2	; 0x02
 b86:	e8 0e       	add	r14, r24
 b88:	f9 1e       	adc	r15, r25
 b8a:	e2 0e       	add	r14, r18
 b8c:	f3 1e       	adc	r15, r19
 b8e:	d4 01       	movw	r26, r8
 b90:	fa 01       	movw	r30, r20
 b92:	20 e0       	ldi	r18, 0x00	; 0
 b94:	30 e0       	ldi	r19, 0x00	; 0
 b96:	8c 91       	ld	r24, X
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	02 2e       	mov	r0, r18
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xe2>
 b9e:	88 0f       	add	r24, r24
 ba0:	99 1f       	adc	r25, r25
 ba2:	0a 94       	dec	r0
 ba4:	e2 f7       	brpl	.-8      	; 0xb9e <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xde>
 ba6:	80 78       	andi	r24, 0x80	; 128
 ba8:	99 27       	eor	r25, r25
 baa:	00 2e       	mov	r0, r16
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xf2>
 bae:	95 95       	asr	r25
 bb0:	87 95       	ror	r24
 bb2:	0a 94       	dec	r0
 bb4:	e2 f7       	brpl	.-8      	; 0xbae <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xee>
 bb6:	90 81       	ld	r25, Z
 bb8:	89 2b       	or	r24, r25
 bba:	81 93       	st	Z+, r24
		for(int j=0;j<height;j++)
		{
			
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
 bbc:	2f 5f       	subi	r18, 0xFF	; 255
 bbe:	3f 4f       	sbci	r19, 0xFF	; 255
 bc0:	28 30       	cpi	r18, 0x08	; 8
 bc2:	31 05       	cpc	r19, r1
 bc4:	41 f7       	brne	.-48     	; 0xb96 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xd6>
 bc6:	48 5f       	subi	r20, 0xF8	; 248
 bc8:	5f 4f       	sbci	r21, 0xFF	; 255
 bca:	11 96       	adiw	r26, 0x01	; 1
	void OLED::OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
	{
		for(int j=0;j<height;j++)
		{
			
			for(int i=0;i<width;i++)
 bcc:	4e 15       	cp	r20, r14
 bce:	5f 05       	cpc	r21, r15
 bd0:	f9 f6       	brne	.-66     	; 0xb90 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xd0>
		}
	}

	void OLED::OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
	{
		for(int j=0;j<height;j++)
 bd2:	3f ef       	ldi	r19, 0xFF	; 255
 bd4:	c3 1a       	sub	r12, r19
 bd6:	d3 0a       	sbc	r13, r19
 bd8:	8b 81       	ldd	r24, Y+3	; 0x03
 bda:	9c 81       	ldd	r25, Y+4	; 0x04
 bdc:	88 0e       	add	r8, r24
 bde:	99 1e       	adc	r9, r25
 be0:	2c 14       	cp	r2, r12
 be2:	3d 04       	cpc	r3, r13
 be4:	09 f0       	breq	.+2      	; 0xbe8 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x128>
 be6:	a3 cf       	rjmp	.-186    	; 0xb2e <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x6e>
				{
					oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
				}
			}
		}
	}
 be8:	26 96       	adiw	r28, 0x06	; 6
 bea:	0f b6       	in	r0, 0x3f	; 63
 bec:	f8 94       	cli
 bee:	de bf       	out	0x3e, r29	; 62
 bf0:	0f be       	out	0x3f, r0	; 63
 bf2:	cd bf       	out	0x3d, r28	; 61
 bf4:	df 91       	pop	r29
 bf6:	cf 91       	pop	r28
 bf8:	1f 91       	pop	r17
 bfa:	0f 91       	pop	r16
 bfc:	ff 90       	pop	r15
 bfe:	ef 90       	pop	r14
 c00:	df 90       	pop	r13
 c02:	cf 90       	pop	r12
 c04:	bf 90       	pop	r11
 c06:	af 90       	pop	r10
 c08:	9f 90       	pop	r9
 c0a:	8f 90       	pop	r8
 c0c:	7f 90       	pop	r7
 c0e:	6f 90       	pop	r6
 c10:	5f 90       	pop	r5
 c12:	4f 90       	pop	r4
 c14:	3f 90       	pop	r3
 c16:	2f 90       	pop	r2
 c18:	08 95       	ret

00000c1a <_ZN3TWIC1Ev>:
#include "TWI.h"


	TWI::TWI(){}
 c1a:	08 95       	ret

00000c1c <_ZN3TWI8twi_InitEv>:

	void TWI::twi_Init(void)
	{
		TWBR=(((CPU_F)/(SCL_F)-16)/2);
 c1c:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
		TWSR=0;
 c20:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 c24:	08 95       	ret

00000c26 <_ZN3TWI14twi_SendAdressEv>:
	}

	void TWI::twi_SendAdress(void)
	{
		TWDR=(Dev_Adr<<1)|0;
 c26:	88 e7       	ldi	r24, 0x78	; 120
 c28:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR=(1<<TWINT)|(1<<TWEN);
 c2c:	84 e8       	ldi	r24, 0x84	; 132
 c2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
 c32:	ec eb       	ldi	r30, 0xBC	; 188
 c34:	f0 e0       	ldi	r31, 0x00	; 0
 c36:	80 81       	ld	r24, Z
 c38:	88 23       	and	r24, r24
 c3a:	ec f7       	brge	.-6      	; 0xc36 <_ZN3TWI14twi_SendAdressEv+0x10>
	}
 c3c:	08 95       	ret

00000c3e <_ZN3TWI9twi_StartEv>:

	void TWI::twi_Start(void)
	{
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 c3e:	84 ea       	ldi	r24, 0xA4	; 164
 c40:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
 c44:	ec eb       	ldi	r30, 0xBC	; 188
 c46:	f0 e0       	ldi	r31, 0x00	; 0
 c48:	80 81       	ld	r24, Z
 c4a:	88 23       	and	r24, r24
 c4c:	ec f7       	brge	.-6      	; 0xc48 <_ZN3TWI9twi_StartEv+0xa>
	}
 c4e:	08 95       	ret

00000c50 <__tablejump2__>:
 c50:	ee 0f       	add	r30, r30
 c52:	ff 1f       	adc	r31, r31
 c54:	00 24       	eor	r0, r0
 c56:	00 1c       	adc	r0, r0
 c58:	0b be       	out	0x3b, r0	; 59
 c5a:	07 90       	elpm	r0, Z+
 c5c:	f6 91       	elpm	r31, Z
 c5e:	e0 2d       	mov	r30, r0
 c60:	09 94       	ijmp

00000c62 <_exit>:
 c62:	f8 94       	cli

00000c64 <__stop_program>:
 c64:	ff cf       	rjmp	.-2      	; 0xc64 <__stop_program>
