
SmartLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002da  00800100  000054de  00005572  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000054de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000422  008003da  008003da  0000584c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000584c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000587c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000058bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000542c  00000000  00000000  0000590c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0e  00000000  00000000  0000ad38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000160b  00000000  00000000  0000b746  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  0000cd54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a3f  00000000  00000000  0000cf08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000561f  00000000  00000000  0000d947  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000508  00000000  00000000  00012f66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
       6:	00 00       	nop
       8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
       a:	00 00       	nop
       c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
       e:	00 00       	nop
      10:	0c 94 47 08 	jmp	0x108e	; 0x108e <__vector_4>
      14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
      16:	00 00       	nop
      18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
      22:	00 00       	nop
      24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
      32:	00 00       	nop
      34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
      36:	00 00       	nop
      38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
      42:	00 00       	nop
      44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
      46:	00 00       	nop
      48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
      52:	00 00       	nop
      54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
      56:	00 00       	nop
      58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
      66:	00 00       	nop
      68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
      72:	00 00       	nop
      74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
      76:	00 00       	nop
      78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
      82:	00 00       	nop
      84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
      86:	00 00       	nop
      88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	0c 03       	fmul	r16, r20
      8e:	85 03       	fmuls	r16, r21
      90:	fe 03       	fmulsu	r23, r22
      92:	77 04       	cpc	r7, r7
      94:	f0 04       	cpc	r15, r0
      96:	69 05       	cpc	r22, r9
      98:	e2 05       	cpc	r30, r2
      9a:	5b 06       	cpc	r5, r27
      9c:	d4 06       	cpc	r13, r20
      9e:	4d 07       	cpc	r20, r29
      a0:	c6 07       	cpc	r28, r22

000000a2 <__ctors_start>:
      a2:	19 27       	eor	r17, r25

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e4       	ldi	r29, 0x40	; 64
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	13 e0       	ldi	r17, 0x03	; 3
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	ee ed       	ldi	r30, 0xDE	; 222
      b8:	f4 e5       	ldi	r31, 0x54	; 84
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	aa 3d       	cpi	r26, 0xDA	; 218
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	27 e0       	ldi	r18, 0x07	; 7
      cc:	aa ed       	ldi	r26, 0xDA	; 218
      ce:	b3 e0       	ldi	r27, 0x03	; 3
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	ac 3f       	cpi	r26, 0xFC	; 252
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>

000000da <__do_global_ctors>:
      da:	10 e0       	ldi	r17, 0x00	; 0
      dc:	c2 e5       	ldi	r28, 0x52	; 82
      de:	d0 e0       	ldi	r29, 0x00	; 0
      e0:	04 c0       	rjmp	.+8      	; 0xea <__do_global_ctors+0x10>
      e2:	21 97       	sbiw	r28, 0x01	; 1
      e4:	fe 01       	movw	r30, r28
      e6:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <__tablejump2__>
      ea:	c1 35       	cpi	r28, 0x51	; 81
      ec:	d1 07       	cpc	r29, r17
      ee:	c9 f7       	brne	.-14     	; 0xe2 <__do_global_ctors+0x8>
      f0:	0e 94 64 24 	call	0x48c8	; 0x48c8 <main>
      f4:	0c 94 6d 2a 	jmp	0x54da	; 0x54da <_exit>

000000f8 <__bad_interrupt>:
      f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_ZN4OLEDC1E3TWI>:
{
private:
uint8_t  oled_bufer[(OLED_HEIGHT/8)*OLED_WIDTH];
TWI wire;
public:
OLED(TWI _wire)
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
	public:
	TWI(){}

	void twi_Init(void)
	{
		TWBR=(((CPU_F)/(SCL_F)-16)/2);
      fe:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
		TWSR=0;
     102:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		while(!(TWCR & (1<<TWINT))){};
	}

	void twi_Start(void)
	{
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     106:	24 ea       	ldi	r18, 0xA4	; 164
     108:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
     10c:	ec eb       	ldi	r30, 0xBC	; 188
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	20 81       	ld	r18, Z
     112:	22 23       	and	r18, r18
     114:	ec f7       	brge	.-6      	; 0x110 <_ZN4OLEDC1E3TWI+0x16>
		TWSR=0;
	}

	void twi_SendAdress(void) 
	{
		TWDR=(Dev_Adr<<1)|0;
     116:	28 e7       	ldi	r18, 0x78	; 120
     118:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR=(1<<TWINT)|(1<<TWEN);
     11c:	24 e8       	ldi	r18, 0x84	; 132
     11e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
     122:	ec eb       	ldi	r30, 0xBC	; 188
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	20 81       	ld	r18, Z
     128:	22 23       	and	r18, r18
     12a:	ec f7       	brge	.-6      	; 0x126 <_ZN4OLEDC1E3TWI+0x2c>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     12c:	20 e8       	ldi	r18, 0x80	; 128
     12e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     132:	24 e8       	ldi	r18, 0x84	; 132
     134:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     138:	ec eb       	ldi	r30, 0xBC	; 188
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	20 81       	ld	r18, Z
     13e:	22 23       	and	r18, r18
     140:	ec f7       	brge	.-6      	; 0x13c <_ZN4OLEDC1E3TWI+0x42>

	TWDR=command;							
     142:	28 ea       	ldi	r18, 0xA8	; 168
     144:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     148:	24 e8       	ldi	r18, 0x84	; 132
     14a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     14e:	ec eb       	ldi	r30, 0xBC	; 188
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	20 81       	ld	r18, Z
     154:	22 23       	and	r18, r18
     156:	ec f7       	brge	.-6      	; 0x152 <_ZN4OLEDC1E3TWI+0x58>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     158:	20 e8       	ldi	r18, 0x80	; 128
     15a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     15e:	24 e8       	ldi	r18, 0x84	; 132
     160:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     164:	ec eb       	ldi	r30, 0xBC	; 188
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	20 81       	ld	r18, Z
     16a:	22 23       	and	r18, r18
     16c:	ec f7       	brge	.-6      	; 0x168 <_ZN4OLEDC1E3TWI+0x6e>

	TWDR=command;							
     16e:	2f e3       	ldi	r18, 0x3F	; 63
     170:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     174:	24 e8       	ldi	r18, 0x84	; 132
     176:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     17a:	ec eb       	ldi	r30, 0xBC	; 188
     17c:	f0 e0       	ldi	r31, 0x00	; 0
     17e:	20 81       	ld	r18, Z
     180:	22 23       	and	r18, r18
     182:	ec f7       	brge	.-6      	; 0x17e <_ZN4OLEDC1E3TWI+0x84>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     184:	20 e8       	ldi	r18, 0x80	; 128
     186:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     18a:	24 e8       	ldi	r18, 0x84	; 132
     18c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     190:	ec eb       	ldi	r30, 0xBC	; 188
     192:	f0 e0       	ldi	r31, 0x00	; 0
     194:	20 81       	ld	r18, Z
     196:	22 23       	and	r18, r18
     198:	ec f7       	brge	.-6      	; 0x194 <_ZN4OLEDC1E3TWI+0x9a>

	TWDR=command;							
     19a:	23 ed       	ldi	r18, 0xD3	; 211
     19c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1a0:	24 e8       	ldi	r18, 0x84	; 132
     1a2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1a6:	ec eb       	ldi	r30, 0xBC	; 188
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
     1aa:	20 81       	ld	r18, Z
     1ac:	22 23       	and	r18, r18
     1ae:	ec f7       	brge	.-6      	; 0x1aa <_ZN4OLEDC1E3TWI+0xb0>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     1b0:	20 e8       	ldi	r18, 0x80	; 128
     1b2:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1b6:	24 e8       	ldi	r18, 0x84	; 132
     1b8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1bc:	ec eb       	ldi	r30, 0xBC	; 188
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	20 81       	ld	r18, Z
     1c2:	22 23       	and	r18, r18
     1c4:	ec f7       	brge	.-6      	; 0x1c0 <_ZN4OLEDC1E3TWI+0xc6>

	TWDR=command;							
     1c6:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1ca:	24 e8       	ldi	r18, 0x84	; 132
     1cc:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1d0:	ec eb       	ldi	r30, 0xBC	; 188
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	20 81       	ld	r18, Z
     1d6:	22 23       	and	r18, r18
     1d8:	ec f7       	brge	.-6      	; 0x1d4 <_ZN4OLEDC1E3TWI+0xda>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     1da:	20 e8       	ldi	r18, 0x80	; 128
     1dc:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1e0:	24 e8       	ldi	r18, 0x84	; 132
     1e2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1e6:	ec eb       	ldi	r30, 0xBC	; 188
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	20 81       	ld	r18, Z
     1ec:	22 23       	and	r18, r18
     1ee:	ec f7       	brge	.-6      	; 0x1ea <_ZN4OLEDC1E3TWI+0xf0>

	TWDR=command;							
     1f0:	20 e4       	ldi	r18, 0x40	; 64
     1f2:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1f6:	24 e8       	ldi	r18, 0x84	; 132
     1f8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1fc:	ec eb       	ldi	r30, 0xBC	; 188
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	20 81       	ld	r18, Z
     202:	22 23       	and	r18, r18
     204:	ec f7       	brge	.-6      	; 0x200 <_ZN4OLEDC1E3TWI+0x106>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     206:	20 e8       	ldi	r18, 0x80	; 128
     208:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     20c:	24 e8       	ldi	r18, 0x84	; 132
     20e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     212:	ec eb       	ldi	r30, 0xBC	; 188
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	20 81       	ld	r18, Z
     218:	22 23       	and	r18, r18
     21a:	ec f7       	brge	.-6      	; 0x216 <_ZN4OLEDC1E3TWI+0x11c>

	TWDR=command;							
     21c:	21 ea       	ldi	r18, 0xA1	; 161
     21e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     222:	24 e8       	ldi	r18, 0x84	; 132
     224:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     228:	ec eb       	ldi	r30, 0xBC	; 188
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	20 81       	ld	r18, Z
     22e:	22 23       	and	r18, r18
     230:	ec f7       	brge	.-6      	; 0x22c <_ZN4OLEDC1E3TWI+0x132>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     232:	20 e8       	ldi	r18, 0x80	; 128
     234:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     238:	24 e8       	ldi	r18, 0x84	; 132
     23a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     23e:	ec eb       	ldi	r30, 0xBC	; 188
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	20 81       	ld	r18, Z
     244:	22 23       	and	r18, r18
     246:	ec f7       	brge	.-6      	; 0x242 <_ZN4OLEDC1E3TWI+0x148>

	TWDR=command;							
     248:	28 ec       	ldi	r18, 0xC8	; 200
     24a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     24e:	24 e8       	ldi	r18, 0x84	; 132
     250:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     254:	ec eb       	ldi	r30, 0xBC	; 188
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	20 81       	ld	r18, Z
     25a:	22 23       	and	r18, r18
     25c:	ec f7       	brge	.-6      	; 0x258 <_ZN4OLEDC1E3TWI+0x15e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     25e:	20 e8       	ldi	r18, 0x80	; 128
     260:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     264:	24 e8       	ldi	r18, 0x84	; 132
     266:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     26a:	ec eb       	ldi	r30, 0xBC	; 188
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	20 81       	ld	r18, Z
     270:	22 23       	and	r18, r18
     272:	ec f7       	brge	.-6      	; 0x26e <_ZN4OLEDC1E3TWI+0x174>

	TWDR=command;							
     274:	2a ed       	ldi	r18, 0xDA	; 218
     276:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     27a:	24 e8       	ldi	r18, 0x84	; 132
     27c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     280:	ec eb       	ldi	r30, 0xBC	; 188
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	20 81       	ld	r18, Z
     286:	22 23       	and	r18, r18
     288:	ec f7       	brge	.-6      	; 0x284 <_ZN4OLEDC1E3TWI+0x18a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     28a:	20 e8       	ldi	r18, 0x80	; 128
     28c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     290:	24 e8       	ldi	r18, 0x84	; 132
     292:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     296:	ec eb       	ldi	r30, 0xBC	; 188
     298:	f0 e0       	ldi	r31, 0x00	; 0
     29a:	20 81       	ld	r18, Z
     29c:	22 23       	and	r18, r18
     29e:	ec f7       	brge	.-6      	; 0x29a <_ZN4OLEDC1E3TWI+0x1a0>

	TWDR=command;							
     2a0:	22 e1       	ldi	r18, 0x12	; 18
     2a2:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2a6:	24 e8       	ldi	r18, 0x84	; 132
     2a8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2ac:	ec eb       	ldi	r30, 0xBC	; 188
     2ae:	f0 e0       	ldi	r31, 0x00	; 0
     2b0:	20 81       	ld	r18, Z
     2b2:	22 23       	and	r18, r18
     2b4:	ec f7       	brge	.-6      	; 0x2b0 <_ZN4OLEDC1E3TWI+0x1b6>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     2b6:	20 e8       	ldi	r18, 0x80	; 128
     2b8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2bc:	24 e8       	ldi	r18, 0x84	; 132
     2be:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2c2:	ec eb       	ldi	r30, 0xBC	; 188
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	20 81       	ld	r18, Z
     2c8:	22 23       	and	r18, r18
     2ca:	ec f7       	brge	.-6      	; 0x2c6 <_ZN4OLEDC1E3TWI+0x1cc>

	TWDR=command;							
     2cc:	21 e8       	ldi	r18, 0x81	; 129
     2ce:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2d2:	24 e8       	ldi	r18, 0x84	; 132
     2d4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2d8:	ec eb       	ldi	r30, 0xBC	; 188
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	20 81       	ld	r18, Z
     2de:	22 23       	and	r18, r18
     2e0:	ec f7       	brge	.-6      	; 0x2dc <_ZN4OLEDC1E3TWI+0x1e2>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     2e2:	20 e8       	ldi	r18, 0x80	; 128
     2e4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2e8:	24 e8       	ldi	r18, 0x84	; 132
     2ea:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2ee:	ec eb       	ldi	r30, 0xBC	; 188
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	20 81       	ld	r18, Z
     2f4:	22 23       	and	r18, r18
     2f6:	ec f7       	brge	.-6      	; 0x2f2 <_ZN4OLEDC1E3TWI+0x1f8>

	TWDR=command;							
     2f8:	2f ef       	ldi	r18, 0xFF	; 255
     2fa:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2fe:	24 e8       	ldi	r18, 0x84	; 132
     300:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     304:	ec eb       	ldi	r30, 0xBC	; 188
     306:	f0 e0       	ldi	r31, 0x00	; 0
     308:	20 81       	ld	r18, Z
     30a:	22 23       	and	r18, r18
     30c:	ec f7       	brge	.-6      	; 0x308 <_ZN4OLEDC1E3TWI+0x20e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     30e:	20 e8       	ldi	r18, 0x80	; 128
     310:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     314:	24 e8       	ldi	r18, 0x84	; 132
     316:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     31a:	ec eb       	ldi	r30, 0xBC	; 188
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	20 81       	ld	r18, Z
     320:	22 23       	and	r18, r18
     322:	ec f7       	brge	.-6      	; 0x31e <_ZN4OLEDC1E3TWI+0x224>

	TWDR=command;							
     324:	24 ea       	ldi	r18, 0xA4	; 164
     326:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     32a:	24 e8       	ldi	r18, 0x84	; 132
     32c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     330:	ec eb       	ldi	r30, 0xBC	; 188
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	20 81       	ld	r18, Z
     336:	22 23       	and	r18, r18
     338:	ec f7       	brge	.-6      	; 0x334 <_ZN4OLEDC1E3TWI+0x23a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     33a:	20 e8       	ldi	r18, 0x80	; 128
     33c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     340:	24 e8       	ldi	r18, 0x84	; 132
     342:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     346:	ec eb       	ldi	r30, 0xBC	; 188
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	20 81       	ld	r18, Z
     34c:	22 23       	and	r18, r18
     34e:	ec f7       	brge	.-6      	; 0x34a <_ZN4OLEDC1E3TWI+0x250>

	TWDR=command;							
     350:	26 ea       	ldi	r18, 0xA6	; 166
     352:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     356:	24 e8       	ldi	r18, 0x84	; 132
     358:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     35c:	ec eb       	ldi	r30, 0xBC	; 188
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	20 81       	ld	r18, Z
     362:	22 23       	and	r18, r18
     364:	ec f7       	brge	.-6      	; 0x360 <_ZN4OLEDC1E3TWI+0x266>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     366:	20 e8       	ldi	r18, 0x80	; 128
     368:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     36c:	24 e8       	ldi	r18, 0x84	; 132
     36e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     372:	ec eb       	ldi	r30, 0xBC	; 188
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	20 81       	ld	r18, Z
     378:	22 23       	and	r18, r18
     37a:	ec f7       	brge	.-6      	; 0x376 <_ZN4OLEDC1E3TWI+0x27c>

	TWDR=command;							
     37c:	25 ed       	ldi	r18, 0xD5	; 213
     37e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     382:	24 e8       	ldi	r18, 0x84	; 132
     384:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     388:	ec eb       	ldi	r30, 0xBC	; 188
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	20 81       	ld	r18, Z
     38e:	22 23       	and	r18, r18
     390:	ec f7       	brge	.-6      	; 0x38c <_ZN4OLEDC1E3TWI+0x292>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     392:	20 e8       	ldi	r18, 0x80	; 128
     394:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     398:	24 e8       	ldi	r18, 0x84	; 132
     39a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     39e:	ec eb       	ldi	r30, 0xBC	; 188
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	20 81       	ld	r18, Z
     3a4:	22 23       	and	r18, r18
     3a6:	ec f7       	brge	.-6      	; 0x3a2 <_ZN4OLEDC1E3TWI+0x2a8>

	TWDR=command;							
     3a8:	20 e8       	ldi	r18, 0x80	; 128
     3aa:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3ae:	24 e8       	ldi	r18, 0x84	; 132
     3b0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3b4:	ec eb       	ldi	r30, 0xBC	; 188
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	20 81       	ld	r18, Z
     3ba:	22 23       	and	r18, r18
     3bc:	ec f7       	brge	.-6      	; 0x3b8 <_ZN4OLEDC1E3TWI+0x2be>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     3be:	20 e8       	ldi	r18, 0x80	; 128
     3c0:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3c4:	24 e8       	ldi	r18, 0x84	; 132
     3c6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3ca:	ec eb       	ldi	r30, 0xBC	; 188
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	20 81       	ld	r18, Z
     3d0:	22 23       	and	r18, r18
     3d2:	ec f7       	brge	.-6      	; 0x3ce <_ZN4OLEDC1E3TWI+0x2d4>

	TWDR=command;							
     3d4:	2d e8       	ldi	r18, 0x8D	; 141
     3d6:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3da:	24 e8       	ldi	r18, 0x84	; 132
     3dc:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3e0:	ec eb       	ldi	r30, 0xBC	; 188
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	20 81       	ld	r18, Z
     3e6:	22 23       	and	r18, r18
     3e8:	ec f7       	brge	.-6      	; 0x3e4 <_ZN4OLEDC1E3TWI+0x2ea>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     3ea:	20 e8       	ldi	r18, 0x80	; 128
     3ec:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3f0:	24 e8       	ldi	r18, 0x84	; 132
     3f2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3f6:	ec eb       	ldi	r30, 0xBC	; 188
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	20 81       	ld	r18, Z
     3fc:	22 23       	and	r18, r18
     3fe:	ec f7       	brge	.-6      	; 0x3fa <_ZN4OLEDC1E3TWI+0x300>

	TWDR=command;							
     400:	24 e1       	ldi	r18, 0x14	; 20
     402:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     406:	24 e8       	ldi	r18, 0x84	; 132
     408:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     40c:	ec eb       	ldi	r30, 0xBC	; 188
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	20 81       	ld	r18, Z
     412:	22 23       	and	r18, r18
     414:	ec f7       	brge	.-6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     416:	20 e8       	ldi	r18, 0x80	; 128
     418:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     41c:	24 e8       	ldi	r18, 0x84	; 132
     41e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     422:	ec eb       	ldi	r30, 0xBC	; 188
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	20 81       	ld	r18, Z
     428:	22 23       	and	r18, r18
     42a:	ec f7       	brge	.-6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>

	TWDR=command;							
     42c:	2f ea       	ldi	r18, 0xAF	; 175
     42e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     432:	24 e8       	ldi	r18, 0x84	; 132
     434:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     438:	ec eb       	ldi	r30, 0xBC	; 188
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	20 81       	ld	r18, Z
     43e:	22 23       	and	r18, r18
     440:	ec f7       	brge	.-6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     442:	20 e8       	ldi	r18, 0x80	; 128
     444:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     448:	24 e8       	ldi	r18, 0x84	; 132
     44a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     44e:	ec eb       	ldi	r30, 0xBC	; 188
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	20 81       	ld	r18, Z
     454:	22 23       	and	r18, r18
     456:	ec f7       	brge	.-6      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>

	TWDR=command;							
     458:	20 e2       	ldi	r18, 0x20	; 32
     45a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     45e:	24 e8       	ldi	r18, 0x84	; 132
     460:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     464:	ec eb       	ldi	r30, 0xBC	; 188
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	20 81       	ld	r18, Z
     46a:	22 23       	and	r18, r18
     46c:	ec f7       	brge	.-6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     46e:	20 e8       	ldi	r18, 0x80	; 128
     470:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     474:	24 e8       	ldi	r18, 0x84	; 132
     476:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     47a:	ec eb       	ldi	r30, 0xBC	; 188
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	20 81       	ld	r18, Z
     480:	22 23       	and	r18, r18
     482:	ec f7       	brge	.-6      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>

	TWDR=command;							
     484:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     488:	24 e8       	ldi	r18, 0x84	; 132
     48a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     48e:	ec eb       	ldi	r30, 0xBC	; 188
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	20 81       	ld	r18, Z
     494:	22 23       	and	r18, r18
     496:	ec f7       	brge	.-6      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     498:	20 e8       	ldi	r18, 0x80	; 128
     49a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     49e:	24 e8       	ldi	r18, 0x84	; 132
     4a0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4a4:	ec eb       	ldi	r30, 0xBC	; 188
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	20 81       	ld	r18, Z
     4aa:	22 23       	and	r18, r18
     4ac:	ec f7       	brge	.-6      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>

	TWDR=command;							
     4ae:	21 e2       	ldi	r18, 0x21	; 33
     4b0:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4b4:	24 e8       	ldi	r18, 0x84	; 132
     4b6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4ba:	ec eb       	ldi	r30, 0xBC	; 188
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	20 81       	ld	r18, Z
     4c0:	22 23       	and	r18, r18
     4c2:	ec f7       	brge	.-6      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     4c4:	20 e8       	ldi	r18, 0x80	; 128
     4c6:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4ca:	24 e8       	ldi	r18, 0x84	; 132
     4cc:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4d0:	ec eb       	ldi	r30, 0xBC	; 188
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	20 81       	ld	r18, Z
     4d6:	22 23       	and	r18, r18
     4d8:	ec f7       	brge	.-6      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>

	TWDR=command;							
     4da:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4de:	24 e8       	ldi	r18, 0x84	; 132
     4e0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4e4:	ec eb       	ldi	r30, 0xBC	; 188
     4e6:	f0 e0       	ldi	r31, 0x00	; 0
     4e8:	20 81       	ld	r18, Z
     4ea:	22 23       	and	r18, r18
     4ec:	ec f7       	brge	.-6      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     4ee:	20 e8       	ldi	r18, 0x80	; 128
     4f0:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4f4:	24 e8       	ldi	r18, 0x84	; 132
     4f6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4fa:	ec eb       	ldi	r30, 0xBC	; 188
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	20 81       	ld	r18, Z
     500:	22 23       	and	r18, r18
     502:	ec f7       	brge	.-6      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>

	TWDR=command;							
     504:	2f e7       	ldi	r18, 0x7F	; 127
     506:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     50a:	24 e8       	ldi	r18, 0x84	; 132
     50c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     510:	ec eb       	ldi	r30, 0xBC	; 188
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	20 81       	ld	r18, Z
     516:	22 23       	and	r18, r18
     518:	ec f7       	brge	.-6      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     51a:	20 e8       	ldi	r18, 0x80	; 128
     51c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     520:	24 e8       	ldi	r18, 0x84	; 132
     522:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     526:	ec eb       	ldi	r30, 0xBC	; 188
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	20 81       	ld	r18, Z
     52c:	22 23       	and	r18, r18
     52e:	ec f7       	brge	.-6      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>

	TWDR=command;							
     530:	22 e2       	ldi	r18, 0x22	; 34
     532:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     536:	24 e8       	ldi	r18, 0x84	; 132
     538:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     53c:	ec eb       	ldi	r30, 0xBC	; 188
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	20 81       	ld	r18, Z
     542:	22 23       	and	r18, r18
     544:	ec f7       	brge	.-6      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     546:	20 e8       	ldi	r18, 0x80	; 128
     548:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     54c:	24 e8       	ldi	r18, 0x84	; 132
     54e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     552:	ec eb       	ldi	r30, 0xBC	; 188
     554:	f0 e0       	ldi	r31, 0x00	; 0
     556:	20 81       	ld	r18, Z
     558:	22 23       	and	r18, r18
     55a:	ec f7       	brge	.-6      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>

	TWDR=command;							
     55c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     560:	24 e8       	ldi	r18, 0x84	; 132
     562:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     566:	ec eb       	ldi	r30, 0xBC	; 188
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	20 81       	ld	r18, Z
     56c:	22 23       	and	r18, r18
     56e:	ec f7       	brge	.-6      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     570:	20 e8       	ldi	r18, 0x80	; 128
     572:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     576:	24 e8       	ldi	r18, 0x84	; 132
     578:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     57c:	ec eb       	ldi	r30, 0xBC	; 188
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	20 81       	ld	r18, Z
     582:	22 23       	and	r18, r18
     584:	ec f7       	brge	.-6      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>

	TWDR=command;							
     586:	27 e0       	ldi	r18, 0x07	; 7
     588:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     58c:	24 e8       	ldi	r18, 0x84	; 132
     58e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     592:	ec eb       	ldi	r30, 0xBC	; 188
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	20 81       	ld	r18, Z
     598:	22 23       	and	r18, r18
     59a:	ec f7       	brge	.-6      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
	OLED_Command(0);
	OLED_Command(127);
	OLED_Command(0x22);
	OLED_Command(0);
	OLED_Command(7);
	TWDR=0x40;
     59c:	20 e4       	ldi	r18, 0x40	; 64
     59e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
     5a2:	24 e8       	ldi	r18, 0x84	; 132
     5a4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5a8:	dc 01       	movw	r26, r24
     5aa:	9c 01       	movw	r18, r24
     5ac:	3c 5f       	subi	r19, 0xFC	; 252
     5ae:	fc 01       	movw	r30, r24

void OLED_Bufer_Clear()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
		oled_bufer[i]=0b00000000;
     5b0:	11 92       	st	Z+, r1
	}
}

void OLED_Bufer_Clear()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
     5b2:	2e 17       	cp	r18, r30
     5b4:	3f 07       	cpc	r19, r31
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
}


void OLED_Data(int data)
{
	TWDR=data;							
     5b8:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     5bc:	84 e8       	ldi	r24, 0x84	; 132
     5be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     5c2:	ec eb       	ldi	r30, 0xBC	; 188
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	88 23       	and	r24, r24
     5ca:	ec f7       	brge	.-6      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
}


void OLED_Data(int data)
{
	TWDR=data;							
     5cc:	cb eb       	ldi	r28, 0xBB	; 187
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);				
     5d0:	ec eb       	ldi	r30, 0xBC	; 188
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	94 e8       	ldi	r25, 0x84	; 132

void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
			OLED_Data(oled_bufer[i]);
     5d6:	8d 91       	ld	r24, X+
}


void OLED_Data(int data)
{
	TWDR=data;							
     5d8:	88 83       	st	Y, r24
	TWCR=(1<<TWINT)|(1<<TWEN);				
     5da:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))){};
     5dc:	80 81       	ld	r24, Z
     5de:	88 23       	and	r24, r24
     5e0:	ec f7       	brge	.-6      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
}


void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
     5e2:	a2 17       	cp	r26, r18
     5e4:	b3 07       	cpc	r27, r19
     5e6:	b9 f7       	brne	.-18     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
	OLED_Bufer_Clear();
	OLED_Data(0b00000000);
	OLED_Write_Bufer();
	//OLED_Data(0b00000000);
	//OLED_Write_Bufer();
}
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <_ZN14password_scene8variantsEii>:
		}
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord+2,1,8);
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
	{
		switch(imgnum)
     5fe:	dc 01       	movw	r26, r24
     600:	12 96       	adiw	r26, 0x02	; 2
     602:	ed 91       	ld	r30, X+
     604:	fc 91       	ld	r31, X
     606:	13 97       	sbiw	r26, 0x03	; 3
     608:	eb 30       	cpi	r30, 0x0B	; 11
     60a:	f1 05       	cpc	r31, r1
     60c:	08 f0       	brcs	.+2      	; 0x610 <_ZN14password_scene8variantsEii+0x22>
     60e:	36 c5       	rjmp	.+2668   	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
     610:	ea 5b       	subi	r30, 0xBA	; 186
     612:	ff 4f       	sbci	r31, 0xFF	; 255
     614:	0c 94 64 2a 	jmp	0x54c8	; 0x54c8 <__tablejump2__>
     618:	20 e0       	ldi	r18, 0x00	; 0
     61a:	30 e0       	ldi	r19, 0x00	; 0
     61c:	d6 2f       	mov	r29, r22
     61e:	c7 2f       	mov	r28, r23
     620:	db 01       	movw	r26, r22
     622:	18 96       	adiw	r26, 0x08	; 8
     624:	ed 2e       	mov	r14, r29
     626:	fc 2e       	mov	r15, r28
     628:	c9 01       	movw	r24, r18
     62a:	33 23       	and	r19, r19
     62c:	0c f4       	brge	.+2      	; 0x630 <_ZN14password_scene8variantsEii+0x42>
     62e:	07 96       	adiw	r24, 0x07	; 7
     630:	95 95       	asr	r25
     632:	87 95       	ror	r24
     634:	95 95       	asr	r25
     636:	87 95       	ror	r24
     638:	95 95       	asr	r25
     63a:	87 95       	ror	r24
     63c:	84 0f       	add	r24, r20
     63e:	95 1f       	adc	r25, r21
     640:	96 95       	lsr	r25
     642:	98 2f       	mov	r25, r24
     644:	88 27       	eor	r24, r24
     646:	97 95       	ror	r25
     648:	87 95       	ror	r24
     64a:	fb 01       	movw	r30, r22
     64c:	e8 0f       	add	r30, r24
     64e:	f9 1f       	adc	r31, r25
     650:	e5 50       	subi	r30, 0x05	; 5
     652:	fc 4f       	sbci	r31, 0xFC	; 252
     654:	8a 0f       	add	r24, r26
     656:	9b 1f       	adc	r25, r27
     658:	85 50       	subi	r24, 0x05	; 5
     65a:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     65c:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     65e:	e8 17       	cp	r30, r24
     660:	f9 07       	cpc	r31, r25
     662:	e1 f7       	brne	.-8      	; 0x65c <_ZN14password_scene8variantsEii+0x6e>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     664:	2f 5f       	subi	r18, 0xFF	; 255
     666:	3f 4f       	sbci	r19, 0xFF	; 255
     668:	28 30       	cpi	r18, 0x08	; 8
     66a:	31 05       	cpc	r19, r1
     66c:	d9 f6       	brne	.-74     	; 0x624 <_ZN14password_scene8variantsEii+0x36>
     66e:	08 ec       	ldi	r16, 0xC8	; 200
     670:	13 e0       	ldi	r17, 0x03	; 3
     672:	c0 e0       	ldi	r28, 0x00	; 0
     674:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     676:	0f 2e       	mov	r0, r31
     678:	f7 e0       	ldi	r31, 0x07	; 7
     67a:	cf 2e       	mov	r12, r31
     67c:	d1 2c       	mov	r13, r1
     67e:	f0 2d       	mov	r31, r0
     680:	f8 01       	movw	r30, r16
     682:	61 91       	ld	r22, Z+
     684:	8f 01       	movw	r16, r30
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	ce 01       	movw	r24, r28
     68a:	87 70       	andi	r24, 0x07	; 7
     68c:	90 78       	andi	r25, 0x80	; 128
     68e:	99 23       	and	r25, r25
     690:	24 f4       	brge	.+8      	; 0x69a <_ZN14password_scene8variantsEii+0xac>
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	88 6f       	ori	r24, 0xF8	; 248
     696:	9f 6f       	ori	r25, 0xFF	; 255
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	d6 01       	movw	r26, r12
     69c:	a8 1b       	sub	r26, r24
     69e:	b9 0b       	sbc	r27, r25
     6a0:	ce 01       	movw	r24, r28
     6a2:	dd 23       	and	r29, r29
     6a4:	0c f4       	brge	.+2      	; 0x6a8 <_ZN14password_scene8variantsEii+0xba>
     6a6:	07 96       	adiw	r24, 0x07	; 7
     6a8:	fc 01       	movw	r30, r24
     6aa:	f5 95       	asr	r31
     6ac:	e7 95       	ror	r30
     6ae:	f5 95       	asr	r31
     6b0:	e7 95       	ror	r30
     6b2:	f5 95       	asr	r31
     6b4:	e7 95       	ror	r30
     6b6:	e4 0f       	add	r30, r20
     6b8:	f5 1f       	adc	r31, r21
     6ba:	f6 95       	lsr	r31
     6bc:	fe 2f       	mov	r31, r30
     6be:	ee 27       	eor	r30, r30
     6c0:	f7 95       	ror	r31
     6c2:	e7 95       	ror	r30
     6c4:	ee 0d       	add	r30, r14
     6c6:	ff 1d       	adc	r31, r15
     6c8:	e5 50       	subi	r30, 0x05	; 5
     6ca:	fc 4f       	sbci	r31, 0xFC	; 252
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	cb 01       	movw	r24, r22
     6d2:	02 2e       	mov	r0, r18
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <_ZN14password_scene8variantsEii+0xec>
     6d6:	88 0f       	add	r24, r24
     6d8:	99 1f       	adc	r25, r25
     6da:	0a 94       	dec	r0
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <_ZN14password_scene8variantsEii+0xe8>
     6de:	80 78       	andi	r24, 0x80	; 128
     6e0:	99 27       	eor	r25, r25
     6e2:	0a 2e       	mov	r0, r26
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <_ZN14password_scene8variantsEii+0xfc>
     6e6:	95 95       	asr	r25
     6e8:	87 95       	ror	r24
     6ea:	0a 94       	dec	r0
     6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <_ZN14password_scene8variantsEii+0xf8>
     6ee:	90 81       	ld	r25, Z
     6f0:	89 2b       	or	r24, r25
     6f2:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     6f4:	2f 5f       	subi	r18, 0xFF	; 255
     6f6:	3f 4f       	sbci	r19, 0xFF	; 255
     6f8:	28 30       	cpi	r18, 0x08	; 8
     6fa:	31 05       	cpc	r19, r1
     6fc:	49 f7       	brne	.-46     	; 0x6d0 <_ZN14password_scene8variantsEii+0xe2>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     6fe:	21 96       	adiw	r28, 0x01	; 1
     700:	c8 30       	cpi	r28, 0x08	; 8
     702:	d1 05       	cpc	r29, r1
     704:	09 f0       	breq	.+2      	; 0x708 <_ZN14password_scene8variantsEii+0x11a>
     706:	bc cf       	rjmp	.-136    	; 0x680 <_ZN14password_scene8variantsEii+0x92>
     708:	b9 c4       	rjmp	.+2418   	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	d6 2f       	mov	r29, r22
     710:	c7 2f       	mov	r28, r23
     712:	db 01       	movw	r26, r22
     714:	18 96       	adiw	r26, 0x08	; 8
     716:	ed 2e       	mov	r14, r29
     718:	fc 2e       	mov	r15, r28
     71a:	c9 01       	movw	r24, r18
     71c:	33 23       	and	r19, r19
     71e:	0c f4       	brge	.+2      	; 0x722 <_ZN14password_scene8variantsEii+0x134>
     720:	07 96       	adiw	r24, 0x07	; 7
     722:	95 95       	asr	r25
     724:	87 95       	ror	r24
     726:	95 95       	asr	r25
     728:	87 95       	ror	r24
     72a:	95 95       	asr	r25
     72c:	87 95       	ror	r24
     72e:	84 0f       	add	r24, r20
     730:	95 1f       	adc	r25, r21
     732:	96 95       	lsr	r25
     734:	98 2f       	mov	r25, r24
     736:	88 27       	eor	r24, r24
     738:	97 95       	ror	r25
     73a:	87 95       	ror	r24
     73c:	fb 01       	movw	r30, r22
     73e:	e8 0f       	add	r30, r24
     740:	f9 1f       	adc	r31, r25
     742:	e5 50       	subi	r30, 0x05	; 5
     744:	fc 4f       	sbci	r31, 0xFC	; 252
     746:	8a 0f       	add	r24, r26
     748:	9b 1f       	adc	r25, r27
     74a:	85 50       	subi	r24, 0x05	; 5
     74c:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     74e:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     750:	8e 17       	cp	r24, r30
     752:	9f 07       	cpc	r25, r31
     754:	e1 f7       	brne	.-8      	; 0x74e <_ZN14password_scene8variantsEii+0x160>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     756:	2f 5f       	subi	r18, 0xFF	; 255
     758:	3f 4f       	sbci	r19, 0xFF	; 255
     75a:	28 30       	cpi	r18, 0x08	; 8
     75c:	31 05       	cpc	r19, r1
     75e:	d9 f6       	brne	.-74     	; 0x716 <_ZN14password_scene8variantsEii+0x128>
     760:	00 ec       	ldi	r16, 0xC0	; 192
     762:	13 e0       	ldi	r17, 0x03	; 3
     764:	c0 e0       	ldi	r28, 0x00	; 0
     766:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     768:	0f 2e       	mov	r0, r31
     76a:	f7 e0       	ldi	r31, 0x07	; 7
     76c:	cf 2e       	mov	r12, r31
     76e:	d1 2c       	mov	r13, r1
     770:	f0 2d       	mov	r31, r0
     772:	d8 01       	movw	r26, r16
     774:	6d 91       	ld	r22, X+
     776:	8d 01       	movw	r16, r26
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	ce 01       	movw	r24, r28
     77c:	87 70       	andi	r24, 0x07	; 7
     77e:	90 78       	andi	r25, 0x80	; 128
     780:	99 23       	and	r25, r25
     782:	24 f4       	brge	.+8      	; 0x78c <_ZN14password_scene8variantsEii+0x19e>
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	88 6f       	ori	r24, 0xF8	; 248
     788:	9f 6f       	ori	r25, 0xFF	; 255
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	d6 01       	movw	r26, r12
     78e:	a8 1b       	sub	r26, r24
     790:	b9 0b       	sbc	r27, r25
     792:	ce 01       	movw	r24, r28
     794:	dd 23       	and	r29, r29
     796:	0c f4       	brge	.+2      	; 0x79a <_ZN14password_scene8variantsEii+0x1ac>
     798:	07 96       	adiw	r24, 0x07	; 7
     79a:	fc 01       	movw	r30, r24
     79c:	f5 95       	asr	r31
     79e:	e7 95       	ror	r30
     7a0:	f5 95       	asr	r31
     7a2:	e7 95       	ror	r30
     7a4:	f5 95       	asr	r31
     7a6:	e7 95       	ror	r30
     7a8:	e4 0f       	add	r30, r20
     7aa:	f5 1f       	adc	r31, r21
     7ac:	f6 95       	lsr	r31
     7ae:	fe 2f       	mov	r31, r30
     7b0:	ee 27       	eor	r30, r30
     7b2:	f7 95       	ror	r31
     7b4:	e7 95       	ror	r30
     7b6:	ee 0d       	add	r30, r14
     7b8:	ff 1d       	adc	r31, r15
     7ba:	e5 50       	subi	r30, 0x05	; 5
     7bc:	fc 4f       	sbci	r31, 0xFC	; 252
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	cb 01       	movw	r24, r22
     7c4:	02 2e       	mov	r0, r18
     7c6:	02 c0       	rjmp	.+4      	; 0x7cc <_ZN14password_scene8variantsEii+0x1de>
     7c8:	88 0f       	add	r24, r24
     7ca:	99 1f       	adc	r25, r25
     7cc:	0a 94       	dec	r0
     7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <_ZN14password_scene8variantsEii+0x1da>
     7d0:	80 78       	andi	r24, 0x80	; 128
     7d2:	99 27       	eor	r25, r25
     7d4:	0a 2e       	mov	r0, r26
     7d6:	02 c0       	rjmp	.+4      	; 0x7dc <_ZN14password_scene8variantsEii+0x1ee>
     7d8:	95 95       	asr	r25
     7da:	87 95       	ror	r24
     7dc:	0a 94       	dec	r0
     7de:	e2 f7       	brpl	.-8      	; 0x7d8 <_ZN14password_scene8variantsEii+0x1ea>
     7e0:	90 81       	ld	r25, Z
     7e2:	89 2b       	or	r24, r25
     7e4:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     7e6:	2f 5f       	subi	r18, 0xFF	; 255
     7e8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ea:	28 30       	cpi	r18, 0x08	; 8
     7ec:	31 05       	cpc	r19, r1
     7ee:	49 f7       	brne	.-46     	; 0x7c2 <_ZN14password_scene8variantsEii+0x1d4>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     7f0:	21 96       	adiw	r28, 0x01	; 1
     7f2:	c8 30       	cpi	r28, 0x08	; 8
     7f4:	d1 05       	cpc	r29, r1
     7f6:	09 f0       	breq	.+2      	; 0x7fa <_ZN14password_scene8variantsEii+0x20c>
     7f8:	bc cf       	rjmp	.-136    	; 0x772 <_ZN14password_scene8variantsEii+0x184>
     7fa:	40 c4       	rjmp	.+2176   	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	d6 2f       	mov	r29, r22
     802:	c7 2f       	mov	r28, r23
     804:	db 01       	movw	r26, r22
     806:	18 96       	adiw	r26, 0x08	; 8
     808:	ed 2e       	mov	r14, r29
     80a:	fc 2e       	mov	r15, r28
     80c:	c9 01       	movw	r24, r18
     80e:	33 23       	and	r19, r19
     810:	0c f4       	brge	.+2      	; 0x814 <_ZN14password_scene8variantsEii+0x226>
     812:	07 96       	adiw	r24, 0x07	; 7
     814:	95 95       	asr	r25
     816:	87 95       	ror	r24
     818:	95 95       	asr	r25
     81a:	87 95       	ror	r24
     81c:	95 95       	asr	r25
     81e:	87 95       	ror	r24
     820:	84 0f       	add	r24, r20
     822:	95 1f       	adc	r25, r21
     824:	96 95       	lsr	r25
     826:	98 2f       	mov	r25, r24
     828:	88 27       	eor	r24, r24
     82a:	97 95       	ror	r25
     82c:	87 95       	ror	r24
     82e:	fb 01       	movw	r30, r22
     830:	e8 0f       	add	r30, r24
     832:	f9 1f       	adc	r31, r25
     834:	e5 50       	subi	r30, 0x05	; 5
     836:	fc 4f       	sbci	r31, 0xFC	; 252
     838:	8a 0f       	add	r24, r26
     83a:	9b 1f       	adc	r25, r27
     83c:	85 50       	subi	r24, 0x05	; 5
     83e:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     840:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     842:	e8 17       	cp	r30, r24
     844:	f9 07       	cpc	r31, r25
     846:	e1 f7       	brne	.-8      	; 0x840 <_ZN14password_scene8variantsEii+0x252>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     848:	2f 5f       	subi	r18, 0xFF	; 255
     84a:	3f 4f       	sbci	r19, 0xFF	; 255
     84c:	28 30       	cpi	r18, 0x08	; 8
     84e:	31 05       	cpc	r19, r1
     850:	d9 f6       	brne	.-74     	; 0x808 <_ZN14password_scene8variantsEii+0x21a>
     852:	08 eb       	ldi	r16, 0xB8	; 184
     854:	13 e0       	ldi	r17, 0x03	; 3
     856:	c0 e0       	ldi	r28, 0x00	; 0
     858:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     85a:	0f 2e       	mov	r0, r31
     85c:	f7 e0       	ldi	r31, 0x07	; 7
     85e:	cf 2e       	mov	r12, r31
     860:	d1 2c       	mov	r13, r1
     862:	f0 2d       	mov	r31, r0
     864:	f8 01       	movw	r30, r16
     866:	61 91       	ld	r22, Z+
     868:	8f 01       	movw	r16, r30
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	ce 01       	movw	r24, r28
     86e:	87 70       	andi	r24, 0x07	; 7
     870:	90 78       	andi	r25, 0x80	; 128
     872:	99 23       	and	r25, r25
     874:	24 f4       	brge	.+8      	; 0x87e <_ZN14password_scene8variantsEii+0x290>
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	88 6f       	ori	r24, 0xF8	; 248
     87a:	9f 6f       	ori	r25, 0xFF	; 255
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	d6 01       	movw	r26, r12
     880:	a8 1b       	sub	r26, r24
     882:	b9 0b       	sbc	r27, r25
     884:	ce 01       	movw	r24, r28
     886:	dd 23       	and	r29, r29
     888:	0c f4       	brge	.+2      	; 0x88c <_ZN14password_scene8variantsEii+0x29e>
     88a:	07 96       	adiw	r24, 0x07	; 7
     88c:	fc 01       	movw	r30, r24
     88e:	f5 95       	asr	r31
     890:	e7 95       	ror	r30
     892:	f5 95       	asr	r31
     894:	e7 95       	ror	r30
     896:	f5 95       	asr	r31
     898:	e7 95       	ror	r30
     89a:	e4 0f       	add	r30, r20
     89c:	f5 1f       	adc	r31, r21
     89e:	f6 95       	lsr	r31
     8a0:	fe 2f       	mov	r31, r30
     8a2:	ee 27       	eor	r30, r30
     8a4:	f7 95       	ror	r31
     8a6:	e7 95       	ror	r30
     8a8:	ee 0d       	add	r30, r14
     8aa:	ff 1d       	adc	r31, r15
     8ac:	e5 50       	subi	r30, 0x05	; 5
     8ae:	fc 4f       	sbci	r31, 0xFC	; 252
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	cb 01       	movw	r24, r22
     8b6:	02 2e       	mov	r0, r18
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <_ZN14password_scene8variantsEii+0x2d0>
     8ba:	88 0f       	add	r24, r24
     8bc:	99 1f       	adc	r25, r25
     8be:	0a 94       	dec	r0
     8c0:	e2 f7       	brpl	.-8      	; 0x8ba <_ZN14password_scene8variantsEii+0x2cc>
     8c2:	80 78       	andi	r24, 0x80	; 128
     8c4:	99 27       	eor	r25, r25
     8c6:	0a 2e       	mov	r0, r26
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <_ZN14password_scene8variantsEii+0x2e0>
     8ca:	95 95       	asr	r25
     8cc:	87 95       	ror	r24
     8ce:	0a 94       	dec	r0
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <_ZN14password_scene8variantsEii+0x2dc>
     8d2:	90 81       	ld	r25, Z
     8d4:	89 2b       	or	r24, r25
     8d6:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     8d8:	2f 5f       	subi	r18, 0xFF	; 255
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	28 30       	cpi	r18, 0x08	; 8
     8de:	31 05       	cpc	r19, r1
     8e0:	49 f7       	brne	.-46     	; 0x8b4 <_ZN14password_scene8variantsEii+0x2c6>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     8e2:	21 96       	adiw	r28, 0x01	; 1
     8e4:	c8 30       	cpi	r28, 0x08	; 8
     8e6:	d1 05       	cpc	r29, r1
     8e8:	09 f0       	breq	.+2      	; 0x8ec <_ZN14password_scene8variantsEii+0x2fe>
     8ea:	bc cf       	rjmp	.-136    	; 0x864 <_ZN14password_scene8variantsEii+0x276>
     8ec:	c7 c3       	rjmp	.+1934   	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	d6 2f       	mov	r29, r22
     8f4:	c7 2f       	mov	r28, r23
     8f6:	db 01       	movw	r26, r22
     8f8:	18 96       	adiw	r26, 0x08	; 8
     8fa:	ed 2e       	mov	r14, r29
     8fc:	fc 2e       	mov	r15, r28
     8fe:	c9 01       	movw	r24, r18
     900:	33 23       	and	r19, r19
     902:	0c f4       	brge	.+2      	; 0x906 <_ZN14password_scene8variantsEii+0x318>
     904:	07 96       	adiw	r24, 0x07	; 7
     906:	95 95       	asr	r25
     908:	87 95       	ror	r24
     90a:	95 95       	asr	r25
     90c:	87 95       	ror	r24
     90e:	95 95       	asr	r25
     910:	87 95       	ror	r24
     912:	84 0f       	add	r24, r20
     914:	95 1f       	adc	r25, r21
     916:	96 95       	lsr	r25
     918:	98 2f       	mov	r25, r24
     91a:	88 27       	eor	r24, r24
     91c:	97 95       	ror	r25
     91e:	87 95       	ror	r24
     920:	fb 01       	movw	r30, r22
     922:	e8 0f       	add	r30, r24
     924:	f9 1f       	adc	r31, r25
     926:	e5 50       	subi	r30, 0x05	; 5
     928:	fc 4f       	sbci	r31, 0xFC	; 252
     92a:	8a 0f       	add	r24, r26
     92c:	9b 1f       	adc	r25, r27
     92e:	85 50       	subi	r24, 0x05	; 5
     930:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     932:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     934:	e8 17       	cp	r30, r24
     936:	f9 07       	cpc	r31, r25
     938:	e1 f7       	brne	.-8      	; 0x932 <_ZN14password_scene8variantsEii+0x344>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     93a:	2f 5f       	subi	r18, 0xFF	; 255
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
     93e:	28 30       	cpi	r18, 0x08	; 8
     940:	31 05       	cpc	r19, r1
     942:	d9 f6       	brne	.-74     	; 0x8fa <_ZN14password_scene8variantsEii+0x30c>
     944:	00 eb       	ldi	r16, 0xB0	; 176
     946:	13 e0       	ldi	r17, 0x03	; 3
     948:	c0 e0       	ldi	r28, 0x00	; 0
     94a:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     94c:	0f 2e       	mov	r0, r31
     94e:	f7 e0       	ldi	r31, 0x07	; 7
     950:	cf 2e       	mov	r12, r31
     952:	d1 2c       	mov	r13, r1
     954:	f0 2d       	mov	r31, r0
     956:	d8 01       	movw	r26, r16
     958:	6d 91       	ld	r22, X+
     95a:	8d 01       	movw	r16, r26
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	ce 01       	movw	r24, r28
     960:	87 70       	andi	r24, 0x07	; 7
     962:	90 78       	andi	r25, 0x80	; 128
     964:	99 23       	and	r25, r25
     966:	24 f4       	brge	.+8      	; 0x970 <_ZN14password_scene8variantsEii+0x382>
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	88 6f       	ori	r24, 0xF8	; 248
     96c:	9f 6f       	ori	r25, 0xFF	; 255
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	d6 01       	movw	r26, r12
     972:	a8 1b       	sub	r26, r24
     974:	b9 0b       	sbc	r27, r25
     976:	ce 01       	movw	r24, r28
     978:	dd 23       	and	r29, r29
     97a:	0c f4       	brge	.+2      	; 0x97e <_ZN14password_scene8variantsEii+0x390>
     97c:	07 96       	adiw	r24, 0x07	; 7
     97e:	fc 01       	movw	r30, r24
     980:	f5 95       	asr	r31
     982:	e7 95       	ror	r30
     984:	f5 95       	asr	r31
     986:	e7 95       	ror	r30
     988:	f5 95       	asr	r31
     98a:	e7 95       	ror	r30
     98c:	e4 0f       	add	r30, r20
     98e:	f5 1f       	adc	r31, r21
     990:	f6 95       	lsr	r31
     992:	fe 2f       	mov	r31, r30
     994:	ee 27       	eor	r30, r30
     996:	f7 95       	ror	r31
     998:	e7 95       	ror	r30
     99a:	ee 0d       	add	r30, r14
     99c:	ff 1d       	adc	r31, r15
     99e:	e5 50       	subi	r30, 0x05	; 5
     9a0:	fc 4f       	sbci	r31, 0xFC	; 252
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	cb 01       	movw	r24, r22
     9a8:	02 2e       	mov	r0, r18
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <_ZN14password_scene8variantsEii+0x3c2>
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	0a 94       	dec	r0
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <_ZN14password_scene8variantsEii+0x3be>
     9b4:	80 78       	andi	r24, 0x80	; 128
     9b6:	99 27       	eor	r25, r25
     9b8:	0a 2e       	mov	r0, r26
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <_ZN14password_scene8variantsEii+0x3d2>
     9bc:	95 95       	asr	r25
     9be:	87 95       	ror	r24
     9c0:	0a 94       	dec	r0
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <_ZN14password_scene8variantsEii+0x3ce>
     9c4:	90 81       	ld	r25, Z
     9c6:	89 2b       	or	r24, r25
     9c8:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     9ca:	2f 5f       	subi	r18, 0xFF	; 255
     9cc:	3f 4f       	sbci	r19, 0xFF	; 255
     9ce:	28 30       	cpi	r18, 0x08	; 8
     9d0:	31 05       	cpc	r19, r1
     9d2:	49 f7       	brne	.-46     	; 0x9a6 <_ZN14password_scene8variantsEii+0x3b8>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     9d4:	21 96       	adiw	r28, 0x01	; 1
     9d6:	c8 30       	cpi	r28, 0x08	; 8
     9d8:	d1 05       	cpc	r29, r1
     9da:	09 f0       	breq	.+2      	; 0x9de <_ZN14password_scene8variantsEii+0x3f0>
     9dc:	bc cf       	rjmp	.-136    	; 0x956 <_ZN14password_scene8variantsEii+0x368>
     9de:	4e c3       	rjmp	.+1692   	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	d6 2f       	mov	r29, r22
     9e6:	c7 2f       	mov	r28, r23
     9e8:	db 01       	movw	r26, r22
     9ea:	18 96       	adiw	r26, 0x08	; 8
     9ec:	ed 2e       	mov	r14, r29
     9ee:	fc 2e       	mov	r15, r28
     9f0:	c9 01       	movw	r24, r18
     9f2:	33 23       	and	r19, r19
     9f4:	0c f4       	brge	.+2      	; 0x9f8 <_ZN14password_scene8variantsEii+0x40a>
     9f6:	07 96       	adiw	r24, 0x07	; 7
     9f8:	95 95       	asr	r25
     9fa:	87 95       	ror	r24
     9fc:	95 95       	asr	r25
     9fe:	87 95       	ror	r24
     a00:	95 95       	asr	r25
     a02:	87 95       	ror	r24
     a04:	84 0f       	add	r24, r20
     a06:	95 1f       	adc	r25, r21
     a08:	96 95       	lsr	r25
     a0a:	98 2f       	mov	r25, r24
     a0c:	88 27       	eor	r24, r24
     a0e:	97 95       	ror	r25
     a10:	87 95       	ror	r24
     a12:	fb 01       	movw	r30, r22
     a14:	e8 0f       	add	r30, r24
     a16:	f9 1f       	adc	r31, r25
     a18:	e5 50       	subi	r30, 0x05	; 5
     a1a:	fc 4f       	sbci	r31, 0xFC	; 252
     a1c:	8a 0f       	add	r24, r26
     a1e:	9b 1f       	adc	r25, r27
     a20:	85 50       	subi	r24, 0x05	; 5
     a22:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     a24:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     a26:	e8 17       	cp	r30, r24
     a28:	f9 07       	cpc	r31, r25
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <_ZN14password_scene8variantsEii+0x436>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     a2c:	2f 5f       	subi	r18, 0xFF	; 255
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	28 30       	cpi	r18, 0x08	; 8
     a32:	31 05       	cpc	r19, r1
     a34:	d9 f6       	brne	.-74     	; 0x9ec <_ZN14password_scene8variantsEii+0x3fe>
     a36:	08 ea       	ldi	r16, 0xA8	; 168
     a38:	13 e0       	ldi	r17, 0x03	; 3
     a3a:	c0 e0       	ldi	r28, 0x00	; 0
     a3c:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     a3e:	0f 2e       	mov	r0, r31
     a40:	f7 e0       	ldi	r31, 0x07	; 7
     a42:	cf 2e       	mov	r12, r31
     a44:	d1 2c       	mov	r13, r1
     a46:	f0 2d       	mov	r31, r0
     a48:	f8 01       	movw	r30, r16
     a4a:	61 91       	ld	r22, Z+
     a4c:	8f 01       	movw	r16, r30
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	ce 01       	movw	r24, r28
     a52:	87 70       	andi	r24, 0x07	; 7
     a54:	90 78       	andi	r25, 0x80	; 128
     a56:	99 23       	and	r25, r25
     a58:	24 f4       	brge	.+8      	; 0xa62 <_ZN14password_scene8variantsEii+0x474>
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	88 6f       	ori	r24, 0xF8	; 248
     a5e:	9f 6f       	ori	r25, 0xFF	; 255
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	d6 01       	movw	r26, r12
     a64:	a8 1b       	sub	r26, r24
     a66:	b9 0b       	sbc	r27, r25
     a68:	ce 01       	movw	r24, r28
     a6a:	dd 23       	and	r29, r29
     a6c:	0c f4       	brge	.+2      	; 0xa70 <_ZN14password_scene8variantsEii+0x482>
     a6e:	07 96       	adiw	r24, 0x07	; 7
     a70:	fc 01       	movw	r30, r24
     a72:	f5 95       	asr	r31
     a74:	e7 95       	ror	r30
     a76:	f5 95       	asr	r31
     a78:	e7 95       	ror	r30
     a7a:	f5 95       	asr	r31
     a7c:	e7 95       	ror	r30
     a7e:	e4 0f       	add	r30, r20
     a80:	f5 1f       	adc	r31, r21
     a82:	f6 95       	lsr	r31
     a84:	fe 2f       	mov	r31, r30
     a86:	ee 27       	eor	r30, r30
     a88:	f7 95       	ror	r31
     a8a:	e7 95       	ror	r30
     a8c:	ee 0d       	add	r30, r14
     a8e:	ff 1d       	adc	r31, r15
     a90:	e5 50       	subi	r30, 0x05	; 5
     a92:	fc 4f       	sbci	r31, 0xFC	; 252
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	cb 01       	movw	r24, r22
     a9a:	02 2e       	mov	r0, r18
     a9c:	02 c0       	rjmp	.+4      	; 0xaa2 <_ZN14password_scene8variantsEii+0x4b4>
     a9e:	88 0f       	add	r24, r24
     aa0:	99 1f       	adc	r25, r25
     aa2:	0a 94       	dec	r0
     aa4:	e2 f7       	brpl	.-8      	; 0xa9e <_ZN14password_scene8variantsEii+0x4b0>
     aa6:	80 78       	andi	r24, 0x80	; 128
     aa8:	99 27       	eor	r25, r25
     aaa:	0a 2e       	mov	r0, r26
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <_ZN14password_scene8variantsEii+0x4c4>
     aae:	95 95       	asr	r25
     ab0:	87 95       	ror	r24
     ab2:	0a 94       	dec	r0
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <_ZN14password_scene8variantsEii+0x4c0>
     ab6:	90 81       	ld	r25, Z
     ab8:	89 2b       	or	r24, r25
     aba:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     abc:	2f 5f       	subi	r18, 0xFF	; 255
     abe:	3f 4f       	sbci	r19, 0xFF	; 255
     ac0:	28 30       	cpi	r18, 0x08	; 8
     ac2:	31 05       	cpc	r19, r1
     ac4:	49 f7       	brne	.-46     	; 0xa98 <_ZN14password_scene8variantsEii+0x4aa>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     ac6:	21 96       	adiw	r28, 0x01	; 1
     ac8:	c8 30       	cpi	r28, 0x08	; 8
     aca:	d1 05       	cpc	r29, r1
     acc:	09 f0       	breq	.+2      	; 0xad0 <_ZN14password_scene8variantsEii+0x4e2>
     ace:	bc cf       	rjmp	.-136    	; 0xa48 <_ZN14password_scene8variantsEii+0x45a>
     ad0:	d5 c2       	rjmp	.+1450   	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	d6 2f       	mov	r29, r22
     ad8:	c7 2f       	mov	r28, r23
     ada:	db 01       	movw	r26, r22
     adc:	18 96       	adiw	r26, 0x08	; 8
     ade:	ed 2e       	mov	r14, r29
     ae0:	fc 2e       	mov	r15, r28
     ae2:	c9 01       	movw	r24, r18
     ae4:	33 23       	and	r19, r19
     ae6:	0c f4       	brge	.+2      	; 0xaea <_ZN14password_scene8variantsEii+0x4fc>
     ae8:	07 96       	adiw	r24, 0x07	; 7
     aea:	95 95       	asr	r25
     aec:	87 95       	ror	r24
     aee:	95 95       	asr	r25
     af0:	87 95       	ror	r24
     af2:	95 95       	asr	r25
     af4:	87 95       	ror	r24
     af6:	84 0f       	add	r24, r20
     af8:	95 1f       	adc	r25, r21
     afa:	96 95       	lsr	r25
     afc:	98 2f       	mov	r25, r24
     afe:	88 27       	eor	r24, r24
     b00:	97 95       	ror	r25
     b02:	87 95       	ror	r24
     b04:	fb 01       	movw	r30, r22
     b06:	e8 0f       	add	r30, r24
     b08:	f9 1f       	adc	r31, r25
     b0a:	e5 50       	subi	r30, 0x05	; 5
     b0c:	fc 4f       	sbci	r31, 0xFC	; 252
     b0e:	8a 0f       	add	r24, r26
     b10:	9b 1f       	adc	r25, r27
     b12:	85 50       	subi	r24, 0x05	; 5
     b14:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     b16:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     b18:	e8 17       	cp	r30, r24
     b1a:	f9 07       	cpc	r31, r25
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <_ZN14password_scene8variantsEii+0x528>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     b1e:	2f 5f       	subi	r18, 0xFF	; 255
     b20:	3f 4f       	sbci	r19, 0xFF	; 255
     b22:	28 30       	cpi	r18, 0x08	; 8
     b24:	31 05       	cpc	r19, r1
     b26:	d9 f6       	brne	.-74     	; 0xade <_ZN14password_scene8variantsEii+0x4f0>
     b28:	00 ea       	ldi	r16, 0xA0	; 160
     b2a:	13 e0       	ldi	r17, 0x03	; 3
     b2c:	c0 e0       	ldi	r28, 0x00	; 0
     b2e:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     b30:	0f 2e       	mov	r0, r31
     b32:	f7 e0       	ldi	r31, 0x07	; 7
     b34:	cf 2e       	mov	r12, r31
     b36:	d1 2c       	mov	r13, r1
     b38:	f0 2d       	mov	r31, r0
     b3a:	d8 01       	movw	r26, r16
     b3c:	6d 91       	ld	r22, X+
     b3e:	8d 01       	movw	r16, r26
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	ce 01       	movw	r24, r28
     b44:	87 70       	andi	r24, 0x07	; 7
     b46:	90 78       	andi	r25, 0x80	; 128
     b48:	99 23       	and	r25, r25
     b4a:	24 f4       	brge	.+8      	; 0xb54 <_ZN14password_scene8variantsEii+0x566>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	88 6f       	ori	r24, 0xF8	; 248
     b50:	9f 6f       	ori	r25, 0xFF	; 255
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	d6 01       	movw	r26, r12
     b56:	a8 1b       	sub	r26, r24
     b58:	b9 0b       	sbc	r27, r25
     b5a:	ce 01       	movw	r24, r28
     b5c:	dd 23       	and	r29, r29
     b5e:	0c f4       	brge	.+2      	; 0xb62 <_ZN14password_scene8variantsEii+0x574>
     b60:	07 96       	adiw	r24, 0x07	; 7
     b62:	fc 01       	movw	r30, r24
     b64:	f5 95       	asr	r31
     b66:	e7 95       	ror	r30
     b68:	f5 95       	asr	r31
     b6a:	e7 95       	ror	r30
     b6c:	f5 95       	asr	r31
     b6e:	e7 95       	ror	r30
     b70:	e4 0f       	add	r30, r20
     b72:	f5 1f       	adc	r31, r21
     b74:	f6 95       	lsr	r31
     b76:	fe 2f       	mov	r31, r30
     b78:	ee 27       	eor	r30, r30
     b7a:	f7 95       	ror	r31
     b7c:	e7 95       	ror	r30
     b7e:	ee 0d       	add	r30, r14
     b80:	ff 1d       	adc	r31, r15
     b82:	e5 50       	subi	r30, 0x05	; 5
     b84:	fc 4f       	sbci	r31, 0xFC	; 252
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	cb 01       	movw	r24, r22
     b8c:	02 2e       	mov	r0, r18
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <_ZN14password_scene8variantsEii+0x5a6>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	0a 94       	dec	r0
     b96:	e2 f7       	brpl	.-8      	; 0xb90 <_ZN14password_scene8variantsEii+0x5a2>
     b98:	80 78       	andi	r24, 0x80	; 128
     b9a:	99 27       	eor	r25, r25
     b9c:	0a 2e       	mov	r0, r26
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <_ZN14password_scene8variantsEii+0x5b6>
     ba0:	95 95       	asr	r25
     ba2:	87 95       	ror	r24
     ba4:	0a 94       	dec	r0
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <_ZN14password_scene8variantsEii+0x5b2>
     ba8:	90 81       	ld	r25, Z
     baa:	89 2b       	or	r24, r25
     bac:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     bae:	2f 5f       	subi	r18, 0xFF	; 255
     bb0:	3f 4f       	sbci	r19, 0xFF	; 255
     bb2:	28 30       	cpi	r18, 0x08	; 8
     bb4:	31 05       	cpc	r19, r1
     bb6:	49 f7       	brne	.-46     	; 0xb8a <_ZN14password_scene8variantsEii+0x59c>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     bb8:	21 96       	adiw	r28, 0x01	; 1
     bba:	c8 30       	cpi	r28, 0x08	; 8
     bbc:	d1 05       	cpc	r29, r1
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <_ZN14password_scene8variantsEii+0x5d4>
     bc0:	bc cf       	rjmp	.-136    	; 0xb3a <_ZN14password_scene8variantsEii+0x54c>
     bc2:	5c c2       	rjmp	.+1208   	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	d6 2f       	mov	r29, r22
     bca:	c7 2f       	mov	r28, r23
     bcc:	db 01       	movw	r26, r22
     bce:	18 96       	adiw	r26, 0x08	; 8
     bd0:	ed 2e       	mov	r14, r29
     bd2:	fc 2e       	mov	r15, r28
     bd4:	c9 01       	movw	r24, r18
     bd6:	33 23       	and	r19, r19
     bd8:	0c f4       	brge	.+2      	; 0xbdc <_ZN14password_scene8variantsEii+0x5ee>
     bda:	07 96       	adiw	r24, 0x07	; 7
     bdc:	95 95       	asr	r25
     bde:	87 95       	ror	r24
     be0:	95 95       	asr	r25
     be2:	87 95       	ror	r24
     be4:	95 95       	asr	r25
     be6:	87 95       	ror	r24
     be8:	84 0f       	add	r24, r20
     bea:	95 1f       	adc	r25, r21
     bec:	96 95       	lsr	r25
     bee:	98 2f       	mov	r25, r24
     bf0:	88 27       	eor	r24, r24
     bf2:	97 95       	ror	r25
     bf4:	87 95       	ror	r24
     bf6:	fb 01       	movw	r30, r22
     bf8:	e8 0f       	add	r30, r24
     bfa:	f9 1f       	adc	r31, r25
     bfc:	e5 50       	subi	r30, 0x05	; 5
     bfe:	fc 4f       	sbci	r31, 0xFC	; 252
     c00:	8a 0f       	add	r24, r26
     c02:	9b 1f       	adc	r25, r27
     c04:	85 50       	subi	r24, 0x05	; 5
     c06:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     c08:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     c0a:	8e 17       	cp	r24, r30
     c0c:	9f 07       	cpc	r25, r31
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <_ZN14password_scene8variantsEii+0x61a>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     c10:	2f 5f       	subi	r18, 0xFF	; 255
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
     c14:	28 30       	cpi	r18, 0x08	; 8
     c16:	31 05       	cpc	r19, r1
     c18:	d9 f6       	brne	.-74     	; 0xbd0 <_ZN14password_scene8variantsEii+0x5e2>
     c1a:	08 e9       	ldi	r16, 0x98	; 152
     c1c:	13 e0       	ldi	r17, 0x03	; 3
     c1e:	c0 e0       	ldi	r28, 0x00	; 0
     c20:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     c22:	0f 2e       	mov	r0, r31
     c24:	f7 e0       	ldi	r31, 0x07	; 7
     c26:	cf 2e       	mov	r12, r31
     c28:	d1 2c       	mov	r13, r1
     c2a:	f0 2d       	mov	r31, r0
     c2c:	f8 01       	movw	r30, r16
     c2e:	61 91       	ld	r22, Z+
     c30:	8f 01       	movw	r16, r30
     c32:	70 e0       	ldi	r23, 0x00	; 0
     c34:	ce 01       	movw	r24, r28
     c36:	87 70       	andi	r24, 0x07	; 7
     c38:	90 78       	andi	r25, 0x80	; 128
     c3a:	99 23       	and	r25, r25
     c3c:	24 f4       	brge	.+8      	; 0xc46 <_ZN14password_scene8variantsEii+0x658>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	88 6f       	ori	r24, 0xF8	; 248
     c42:	9f 6f       	ori	r25, 0xFF	; 255
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	d6 01       	movw	r26, r12
     c48:	a8 1b       	sub	r26, r24
     c4a:	b9 0b       	sbc	r27, r25
     c4c:	ce 01       	movw	r24, r28
     c4e:	dd 23       	and	r29, r29
     c50:	0c f4       	brge	.+2      	; 0xc54 <_ZN14password_scene8variantsEii+0x666>
     c52:	07 96       	adiw	r24, 0x07	; 7
     c54:	fc 01       	movw	r30, r24
     c56:	f5 95       	asr	r31
     c58:	e7 95       	ror	r30
     c5a:	f5 95       	asr	r31
     c5c:	e7 95       	ror	r30
     c5e:	f5 95       	asr	r31
     c60:	e7 95       	ror	r30
     c62:	e4 0f       	add	r30, r20
     c64:	f5 1f       	adc	r31, r21
     c66:	f6 95       	lsr	r31
     c68:	fe 2f       	mov	r31, r30
     c6a:	ee 27       	eor	r30, r30
     c6c:	f7 95       	ror	r31
     c6e:	e7 95       	ror	r30
     c70:	ee 0d       	add	r30, r14
     c72:	ff 1d       	adc	r31, r15
     c74:	e5 50       	subi	r30, 0x05	; 5
     c76:	fc 4f       	sbci	r31, 0xFC	; 252
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	cb 01       	movw	r24, r22
     c7e:	02 2e       	mov	r0, r18
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <_ZN14password_scene8variantsEii+0x698>
     c82:	88 0f       	add	r24, r24
     c84:	99 1f       	adc	r25, r25
     c86:	0a 94       	dec	r0
     c88:	e2 f7       	brpl	.-8      	; 0xc82 <_ZN14password_scene8variantsEii+0x694>
     c8a:	80 78       	andi	r24, 0x80	; 128
     c8c:	99 27       	eor	r25, r25
     c8e:	0a 2e       	mov	r0, r26
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <_ZN14password_scene8variantsEii+0x6a8>
     c92:	95 95       	asr	r25
     c94:	87 95       	ror	r24
     c96:	0a 94       	dec	r0
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <_ZN14password_scene8variantsEii+0x6a4>
     c9a:	90 81       	ld	r25, Z
     c9c:	89 2b       	or	r24, r25
     c9e:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     ca0:	2f 5f       	subi	r18, 0xFF	; 255
     ca2:	3f 4f       	sbci	r19, 0xFF	; 255
     ca4:	28 30       	cpi	r18, 0x08	; 8
     ca6:	31 05       	cpc	r19, r1
     ca8:	49 f7       	brne	.-46     	; 0xc7c <_ZN14password_scene8variantsEii+0x68e>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     caa:	21 96       	adiw	r28, 0x01	; 1
     cac:	c8 30       	cpi	r28, 0x08	; 8
     cae:	d1 05       	cpc	r29, r1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <_ZN14password_scene8variantsEii+0x6c6>
     cb2:	bc cf       	rjmp	.-136    	; 0xc2c <_ZN14password_scene8variantsEii+0x63e>
     cb4:	e3 c1       	rjmp	.+966    	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	d6 2f       	mov	r29, r22
     cbc:	c7 2f       	mov	r28, r23
     cbe:	db 01       	movw	r26, r22
     cc0:	18 96       	adiw	r26, 0x08	; 8
     cc2:	ed 2e       	mov	r14, r29
     cc4:	fc 2e       	mov	r15, r28
     cc6:	c9 01       	movw	r24, r18
     cc8:	33 23       	and	r19, r19
     cca:	0c f4       	brge	.+2      	; 0xcce <_ZN14password_scene8variantsEii+0x6e0>
     ccc:	07 96       	adiw	r24, 0x07	; 7
     cce:	95 95       	asr	r25
     cd0:	87 95       	ror	r24
     cd2:	95 95       	asr	r25
     cd4:	87 95       	ror	r24
     cd6:	95 95       	asr	r25
     cd8:	87 95       	ror	r24
     cda:	84 0f       	add	r24, r20
     cdc:	95 1f       	adc	r25, r21
     cde:	96 95       	lsr	r25
     ce0:	98 2f       	mov	r25, r24
     ce2:	88 27       	eor	r24, r24
     ce4:	97 95       	ror	r25
     ce6:	87 95       	ror	r24
     ce8:	fb 01       	movw	r30, r22
     cea:	e8 0f       	add	r30, r24
     cec:	f9 1f       	adc	r31, r25
     cee:	e5 50       	subi	r30, 0x05	; 5
     cf0:	fc 4f       	sbci	r31, 0xFC	; 252
     cf2:	8a 0f       	add	r24, r26
     cf4:	9b 1f       	adc	r25, r27
     cf6:	85 50       	subi	r24, 0x05	; 5
     cf8:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     cfa:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     cfc:	8e 17       	cp	r24, r30
     cfe:	9f 07       	cpc	r25, r31
     d00:	e1 f7       	brne	.-8      	; 0xcfa <_ZN14password_scene8variantsEii+0x70c>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     d02:	2f 5f       	subi	r18, 0xFF	; 255
     d04:	3f 4f       	sbci	r19, 0xFF	; 255
     d06:	28 30       	cpi	r18, 0x08	; 8
     d08:	31 05       	cpc	r19, r1
     d0a:	d9 f6       	brne	.-74     	; 0xcc2 <_ZN14password_scene8variantsEii+0x6d4>
     d0c:	00 e9       	ldi	r16, 0x90	; 144
     d0e:	13 e0       	ldi	r17, 0x03	; 3
     d10:	c0 e0       	ldi	r28, 0x00	; 0
     d12:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     d14:	0f 2e       	mov	r0, r31
     d16:	f7 e0       	ldi	r31, 0x07	; 7
     d18:	cf 2e       	mov	r12, r31
     d1a:	d1 2c       	mov	r13, r1
     d1c:	f0 2d       	mov	r31, r0
     d1e:	d8 01       	movw	r26, r16
     d20:	6d 91       	ld	r22, X+
     d22:	8d 01       	movw	r16, r26
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	ce 01       	movw	r24, r28
     d28:	87 70       	andi	r24, 0x07	; 7
     d2a:	90 78       	andi	r25, 0x80	; 128
     d2c:	99 23       	and	r25, r25
     d2e:	24 f4       	brge	.+8      	; 0xd38 <_ZN14password_scene8variantsEii+0x74a>
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	88 6f       	ori	r24, 0xF8	; 248
     d34:	9f 6f       	ori	r25, 0xFF	; 255
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	d6 01       	movw	r26, r12
     d3a:	a8 1b       	sub	r26, r24
     d3c:	b9 0b       	sbc	r27, r25
     d3e:	ce 01       	movw	r24, r28
     d40:	dd 23       	and	r29, r29
     d42:	0c f4       	brge	.+2      	; 0xd46 <_ZN14password_scene8variantsEii+0x758>
     d44:	07 96       	adiw	r24, 0x07	; 7
     d46:	fc 01       	movw	r30, r24
     d48:	f5 95       	asr	r31
     d4a:	e7 95       	ror	r30
     d4c:	f5 95       	asr	r31
     d4e:	e7 95       	ror	r30
     d50:	f5 95       	asr	r31
     d52:	e7 95       	ror	r30
     d54:	e4 0f       	add	r30, r20
     d56:	f5 1f       	adc	r31, r21
     d58:	f6 95       	lsr	r31
     d5a:	fe 2f       	mov	r31, r30
     d5c:	ee 27       	eor	r30, r30
     d5e:	f7 95       	ror	r31
     d60:	e7 95       	ror	r30
     d62:	ee 0d       	add	r30, r14
     d64:	ff 1d       	adc	r31, r15
     d66:	e5 50       	subi	r30, 0x05	; 5
     d68:	fc 4f       	sbci	r31, 0xFC	; 252
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	cb 01       	movw	r24, r22
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <_ZN14password_scene8variantsEii+0x78a>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <_ZN14password_scene8variantsEii+0x786>
     d7c:	80 78       	andi	r24, 0x80	; 128
     d7e:	99 27       	eor	r25, r25
     d80:	0a 2e       	mov	r0, r26
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <_ZN14password_scene8variantsEii+0x79a>
     d84:	95 95       	asr	r25
     d86:	87 95       	ror	r24
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <_ZN14password_scene8variantsEii+0x796>
     d8c:	90 81       	ld	r25, Z
     d8e:	89 2b       	or	r24, r25
     d90:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     d92:	2f 5f       	subi	r18, 0xFF	; 255
     d94:	3f 4f       	sbci	r19, 0xFF	; 255
     d96:	28 30       	cpi	r18, 0x08	; 8
     d98:	31 05       	cpc	r19, r1
     d9a:	49 f7       	brne	.-46     	; 0xd6e <_ZN14password_scene8variantsEii+0x780>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     d9c:	21 96       	adiw	r28, 0x01	; 1
     d9e:	c8 30       	cpi	r28, 0x08	; 8
     da0:	d1 05       	cpc	r29, r1
     da2:	09 f0       	breq	.+2      	; 0xda6 <_ZN14password_scene8variantsEii+0x7b8>
     da4:	bc cf       	rjmp	.-136    	; 0xd1e <_ZN14password_scene8variantsEii+0x730>
     da6:	6a c1       	rjmp	.+724    	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	d6 2f       	mov	r29, r22
     dae:	c7 2f       	mov	r28, r23
     db0:	db 01       	movw	r26, r22
     db2:	18 96       	adiw	r26, 0x08	; 8
     db4:	ed 2e       	mov	r14, r29
     db6:	fc 2e       	mov	r15, r28
     db8:	c9 01       	movw	r24, r18
     dba:	33 23       	and	r19, r19
     dbc:	0c f4       	brge	.+2      	; 0xdc0 <_ZN14password_scene8variantsEii+0x7d2>
     dbe:	07 96       	adiw	r24, 0x07	; 7
     dc0:	95 95       	asr	r25
     dc2:	87 95       	ror	r24
     dc4:	95 95       	asr	r25
     dc6:	87 95       	ror	r24
     dc8:	95 95       	asr	r25
     dca:	87 95       	ror	r24
     dcc:	84 0f       	add	r24, r20
     dce:	95 1f       	adc	r25, r21
     dd0:	96 95       	lsr	r25
     dd2:	98 2f       	mov	r25, r24
     dd4:	88 27       	eor	r24, r24
     dd6:	97 95       	ror	r25
     dd8:	87 95       	ror	r24
     dda:	fb 01       	movw	r30, r22
     ddc:	e8 0f       	add	r30, r24
     dde:	f9 1f       	adc	r31, r25
     de0:	e5 50       	subi	r30, 0x05	; 5
     de2:	fc 4f       	sbci	r31, 0xFC	; 252
     de4:	8a 0f       	add	r24, r26
     de6:	9b 1f       	adc	r25, r27
     de8:	85 50       	subi	r24, 0x05	; 5
     dea:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     dec:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     dee:	e8 17       	cp	r30, r24
     df0:	f9 07       	cpc	r31, r25
     df2:	e1 f7       	brne	.-8      	; 0xdec <_ZN14password_scene8variantsEii+0x7fe>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     df4:	2f 5f       	subi	r18, 0xFF	; 255
     df6:	3f 4f       	sbci	r19, 0xFF	; 255
     df8:	28 30       	cpi	r18, 0x08	; 8
     dfa:	31 05       	cpc	r19, r1
     dfc:	d9 f6       	brne	.-74     	; 0xdb4 <_ZN14password_scene8variantsEii+0x7c6>
     dfe:	08 e8       	ldi	r16, 0x88	; 136
     e00:	13 e0       	ldi	r17, 0x03	; 3
     e02:	c0 e0       	ldi	r28, 0x00	; 0
     e04:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     e06:	0f 2e       	mov	r0, r31
     e08:	f7 e0       	ldi	r31, 0x07	; 7
     e0a:	cf 2e       	mov	r12, r31
     e0c:	d1 2c       	mov	r13, r1
     e0e:	f0 2d       	mov	r31, r0
     e10:	f8 01       	movw	r30, r16
     e12:	61 91       	ld	r22, Z+
     e14:	8f 01       	movw	r16, r30
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	ce 01       	movw	r24, r28
     e1a:	87 70       	andi	r24, 0x07	; 7
     e1c:	90 78       	andi	r25, 0x80	; 128
     e1e:	99 23       	and	r25, r25
     e20:	24 f4       	brge	.+8      	; 0xe2a <_ZN14password_scene8variantsEii+0x83c>
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	88 6f       	ori	r24, 0xF8	; 248
     e26:	9f 6f       	ori	r25, 0xFF	; 255
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	d6 01       	movw	r26, r12
     e2c:	a8 1b       	sub	r26, r24
     e2e:	b9 0b       	sbc	r27, r25
     e30:	ce 01       	movw	r24, r28
     e32:	dd 23       	and	r29, r29
     e34:	0c f4       	brge	.+2      	; 0xe38 <_ZN14password_scene8variantsEii+0x84a>
     e36:	07 96       	adiw	r24, 0x07	; 7
     e38:	fc 01       	movw	r30, r24
     e3a:	f5 95       	asr	r31
     e3c:	e7 95       	ror	r30
     e3e:	f5 95       	asr	r31
     e40:	e7 95       	ror	r30
     e42:	f5 95       	asr	r31
     e44:	e7 95       	ror	r30
     e46:	e4 0f       	add	r30, r20
     e48:	f5 1f       	adc	r31, r21
     e4a:	f6 95       	lsr	r31
     e4c:	fe 2f       	mov	r31, r30
     e4e:	ee 27       	eor	r30, r30
     e50:	f7 95       	ror	r31
     e52:	e7 95       	ror	r30
     e54:	ee 0d       	add	r30, r14
     e56:	ff 1d       	adc	r31, r15
     e58:	e5 50       	subi	r30, 0x05	; 5
     e5a:	fc 4f       	sbci	r31, 0xFC	; 252
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	cb 01       	movw	r24, r22
     e62:	02 2e       	mov	r0, r18
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <_ZN14password_scene8variantsEii+0x87c>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	0a 94       	dec	r0
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <_ZN14password_scene8variantsEii+0x878>
     e6e:	80 78       	andi	r24, 0x80	; 128
     e70:	99 27       	eor	r25, r25
     e72:	0a 2e       	mov	r0, r26
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <_ZN14password_scene8variantsEii+0x88c>
     e76:	95 95       	asr	r25
     e78:	87 95       	ror	r24
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <_ZN14password_scene8variantsEii+0x888>
     e7e:	90 81       	ld	r25, Z
     e80:	89 2b       	or	r24, r25
     e82:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     e84:	2f 5f       	subi	r18, 0xFF	; 255
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	28 30       	cpi	r18, 0x08	; 8
     e8a:	31 05       	cpc	r19, r1
     e8c:	49 f7       	brne	.-46     	; 0xe60 <_ZN14password_scene8variantsEii+0x872>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     e8e:	21 96       	adiw	r28, 0x01	; 1
     e90:	c8 30       	cpi	r28, 0x08	; 8
     e92:	d1 05       	cpc	r29, r1
     e94:	09 f0       	breq	.+2      	; 0xe98 <_ZN14password_scene8variantsEii+0x8aa>
     e96:	bc cf       	rjmp	.-136    	; 0xe10 <_ZN14password_scene8variantsEii+0x822>
     e98:	f1 c0       	rjmp	.+482    	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	d6 2f       	mov	r29, r22
     ea0:	c7 2f       	mov	r28, r23
     ea2:	db 01       	movw	r26, r22
     ea4:	18 96       	adiw	r26, 0x08	; 8
     ea6:	ed 2e       	mov	r14, r29
     ea8:	fc 2e       	mov	r15, r28
     eaa:	c9 01       	movw	r24, r18
     eac:	33 23       	and	r19, r19
     eae:	0c f4       	brge	.+2      	; 0xeb2 <_ZN14password_scene8variantsEii+0x8c4>
     eb0:	07 96       	adiw	r24, 0x07	; 7
     eb2:	95 95       	asr	r25
     eb4:	87 95       	ror	r24
     eb6:	95 95       	asr	r25
     eb8:	87 95       	ror	r24
     eba:	95 95       	asr	r25
     ebc:	87 95       	ror	r24
     ebe:	84 0f       	add	r24, r20
     ec0:	95 1f       	adc	r25, r21
     ec2:	96 95       	lsr	r25
     ec4:	98 2f       	mov	r25, r24
     ec6:	88 27       	eor	r24, r24
     ec8:	97 95       	ror	r25
     eca:	87 95       	ror	r24
     ecc:	fb 01       	movw	r30, r22
     ece:	e8 0f       	add	r30, r24
     ed0:	f9 1f       	adc	r31, r25
     ed2:	e5 50       	subi	r30, 0x05	; 5
     ed4:	fc 4f       	sbci	r31, 0xFC	; 252
     ed6:	8a 0f       	add	r24, r26
     ed8:	9b 1f       	adc	r25, r27
     eda:	85 50       	subi	r24, 0x05	; 5
     edc:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     ede:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     ee0:	e8 17       	cp	r30, r24
     ee2:	f9 07       	cpc	r31, r25
     ee4:	e1 f7       	brne	.-8      	; 0xede <_ZN14password_scene8variantsEii+0x8f0>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     ee6:	2f 5f       	subi	r18, 0xFF	; 255
     ee8:	3f 4f       	sbci	r19, 0xFF	; 255
     eea:	28 30       	cpi	r18, 0x08	; 8
     eec:	31 05       	cpc	r19, r1
     eee:	d9 f6       	brne	.-74     	; 0xea6 <_ZN14password_scene8variantsEii+0x8b8>
     ef0:	00 e8       	ldi	r16, 0x80	; 128
     ef2:	13 e0       	ldi	r17, 0x03	; 3
     ef4:	c0 e0       	ldi	r28, 0x00	; 0
     ef6:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     ef8:	0f 2e       	mov	r0, r31
     efa:	f7 e0       	ldi	r31, 0x07	; 7
     efc:	cf 2e       	mov	r12, r31
     efe:	d1 2c       	mov	r13, r1
     f00:	f0 2d       	mov	r31, r0
     f02:	d8 01       	movw	r26, r16
     f04:	6d 91       	ld	r22, X+
     f06:	8d 01       	movw	r16, r26
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	ce 01       	movw	r24, r28
     f0c:	87 70       	andi	r24, 0x07	; 7
     f0e:	90 78       	andi	r25, 0x80	; 128
     f10:	99 23       	and	r25, r25
     f12:	24 f4       	brge	.+8      	; 0xf1c <_ZN14password_scene8variantsEii+0x92e>
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	88 6f       	ori	r24, 0xF8	; 248
     f18:	9f 6f       	ori	r25, 0xFF	; 255
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	d6 01       	movw	r26, r12
     f1e:	a8 1b       	sub	r26, r24
     f20:	b9 0b       	sbc	r27, r25
     f22:	ce 01       	movw	r24, r28
     f24:	dd 23       	and	r29, r29
     f26:	0c f4       	brge	.+2      	; 0xf2a <_ZN14password_scene8variantsEii+0x93c>
     f28:	07 96       	adiw	r24, 0x07	; 7
     f2a:	fc 01       	movw	r30, r24
     f2c:	f5 95       	asr	r31
     f2e:	e7 95       	ror	r30
     f30:	f5 95       	asr	r31
     f32:	e7 95       	ror	r30
     f34:	f5 95       	asr	r31
     f36:	e7 95       	ror	r30
     f38:	e4 0f       	add	r30, r20
     f3a:	f5 1f       	adc	r31, r21
     f3c:	f6 95       	lsr	r31
     f3e:	fe 2f       	mov	r31, r30
     f40:	ee 27       	eor	r30, r30
     f42:	f7 95       	ror	r31
     f44:	e7 95       	ror	r30
     f46:	ee 0d       	add	r30, r14
     f48:	ff 1d       	adc	r31, r15
     f4a:	e5 50       	subi	r30, 0x05	; 5
     f4c:	fc 4f       	sbci	r31, 0xFC	; 252
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	cb 01       	movw	r24, r22
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <_ZN14password_scene8variantsEii+0x96e>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <_ZN14password_scene8variantsEii+0x96a>
     f60:	80 78       	andi	r24, 0x80	; 128
     f62:	99 27       	eor	r25, r25
     f64:	0a 2e       	mov	r0, r26
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <_ZN14password_scene8variantsEii+0x97e>
     f68:	95 95       	asr	r25
     f6a:	87 95       	ror	r24
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <_ZN14password_scene8variantsEii+0x97a>
     f70:	90 81       	ld	r25, Z
     f72:	89 2b       	or	r24, r25
     f74:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     f76:	2f 5f       	subi	r18, 0xFF	; 255
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	28 30       	cpi	r18, 0x08	; 8
     f7c:	31 05       	cpc	r19, r1
     f7e:	49 f7       	brne	.-46     	; 0xf52 <_ZN14password_scene8variantsEii+0x964>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     f80:	21 96       	adiw	r28, 0x01	; 1
     f82:	c8 30       	cpi	r28, 0x08	; 8
     f84:	d1 05       	cpc	r29, r1
     f86:	09 f0       	breq	.+2      	; 0xf8a <_ZN14password_scene8variantsEii+0x99c>
     f88:	bc cf       	rjmp	.-136    	; 0xf02 <_ZN14password_scene8variantsEii+0x914>
     f8a:	78 c0       	rjmp	.+240    	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	d6 2f       	mov	r29, r22
     f92:	c7 2f       	mov	r28, r23
     f94:	db 01       	movw	r26, r22
     f96:	18 96       	adiw	r26, 0x08	; 8
     f98:	ed 2e       	mov	r14, r29
     f9a:	fc 2e       	mov	r15, r28
     f9c:	c9 01       	movw	r24, r18
     f9e:	33 23       	and	r19, r19
     fa0:	0c f4       	brge	.+2      	; 0xfa4 <_ZN14password_scene8variantsEii+0x9b6>
     fa2:	07 96       	adiw	r24, 0x07	; 7
     fa4:	95 95       	asr	r25
     fa6:	87 95       	ror	r24
     fa8:	95 95       	asr	r25
     faa:	87 95       	ror	r24
     fac:	95 95       	asr	r25
     fae:	87 95       	ror	r24
     fb0:	84 0f       	add	r24, r20
     fb2:	95 1f       	adc	r25, r21
     fb4:	96 95       	lsr	r25
     fb6:	98 2f       	mov	r25, r24
     fb8:	88 27       	eor	r24, r24
     fba:	97 95       	ror	r25
     fbc:	87 95       	ror	r24
     fbe:	fb 01       	movw	r30, r22
     fc0:	e8 0f       	add	r30, r24
     fc2:	f9 1f       	adc	r31, r25
     fc4:	e5 50       	subi	r30, 0x05	; 5
     fc6:	fc 4f       	sbci	r31, 0xFC	; 252
     fc8:	8a 0f       	add	r24, r26
     fca:	9b 1f       	adc	r25, r27
     fcc:	85 50       	subi	r24, 0x05	; 5
     fce:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     fd0:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     fd2:	8e 17       	cp	r24, r30
     fd4:	9f 07       	cpc	r25, r31
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <_ZN14password_scene8variantsEii+0x9e2>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     fd8:	2f 5f       	subi	r18, 0xFF	; 255
     fda:	3f 4f       	sbci	r19, 0xFF	; 255
     fdc:	28 30       	cpi	r18, 0x08	; 8
     fde:	31 05       	cpc	r19, r1
     fe0:	d9 f6       	brne	.-74     	; 0xf98 <_ZN14password_scene8variantsEii+0x9aa>
     fe2:	00 e7       	ldi	r16, 0x70	; 112
     fe4:	13 e0       	ldi	r17, 0x03	; 3
     fe6:	c0 e0       	ldi	r28, 0x00	; 0
     fe8:	d0 e0       	ldi	r29, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     fea:	0f 2e       	mov	r0, r31
     fec:	f7 e0       	ldi	r31, 0x07	; 7
     fee:	cf 2e       	mov	r12, r31
     ff0:	d1 2c       	mov	r13, r1
     ff2:	f0 2d       	mov	r31, r0
     ff4:	f8 01       	movw	r30, r16
     ff6:	61 91       	ld	r22, Z+
     ff8:	8f 01       	movw	r16, r30
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	ce 01       	movw	r24, r28
     ffe:	87 70       	andi	r24, 0x07	; 7
    1000:	90 78       	andi	r25, 0x80	; 128
    1002:	99 23       	and	r25, r25
    1004:	24 f4       	brge	.+8      	; 0x100e <_ZN14password_scene8variantsEii+0xa20>
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	88 6f       	ori	r24, 0xF8	; 248
    100a:	9f 6f       	ori	r25, 0xFF	; 255
    100c:	01 96       	adiw	r24, 0x01	; 1
    100e:	d6 01       	movw	r26, r12
    1010:	a8 1b       	sub	r26, r24
    1012:	b9 0b       	sbc	r27, r25
    1014:	ce 01       	movw	r24, r28
    1016:	dd 23       	and	r29, r29
    1018:	0c f4       	brge	.+2      	; 0x101c <_ZN14password_scene8variantsEii+0xa2e>
    101a:	07 96       	adiw	r24, 0x07	; 7
    101c:	fc 01       	movw	r30, r24
    101e:	f5 95       	asr	r31
    1020:	e7 95       	ror	r30
    1022:	f5 95       	asr	r31
    1024:	e7 95       	ror	r30
    1026:	f5 95       	asr	r31
    1028:	e7 95       	ror	r30
    102a:	e4 0f       	add	r30, r20
    102c:	f5 1f       	adc	r31, r21
    102e:	f6 95       	lsr	r31
    1030:	fe 2f       	mov	r31, r30
    1032:	ee 27       	eor	r30, r30
    1034:	f7 95       	ror	r31
    1036:	e7 95       	ror	r30
    1038:	ee 0d       	add	r30, r14
    103a:	ff 1d       	adc	r31, r15
    103c:	e5 50       	subi	r30, 0x05	; 5
    103e:	fc 4f       	sbci	r31, 0xFC	; 252
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	cb 01       	movw	r24, r22
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <_ZN14password_scene8variantsEii+0xa60>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <_ZN14password_scene8variantsEii+0xa5c>
    1052:	80 78       	andi	r24, 0x80	; 128
    1054:	99 27       	eor	r25, r25
    1056:	0a 2e       	mov	r0, r26
    1058:	02 c0       	rjmp	.+4      	; 0x105e <_ZN14password_scene8variantsEii+0xa70>
    105a:	95 95       	asr	r25
    105c:	87 95       	ror	r24
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <_ZN14password_scene8variantsEii+0xa6c>
    1062:	90 81       	ld	r25, Z
    1064:	89 2b       	or	r24, r25
    1066:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1068:	2f 5f       	subi	r18, 0xFF	; 255
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	28 30       	cpi	r18, 0x08	; 8
    106e:	31 05       	cpc	r19, r1
    1070:	49 f7       	brne	.-46     	; 0x1044 <_ZN14password_scene8variantsEii+0xa56>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1072:	21 96       	adiw	r28, 0x01	; 1
    1074:	c8 30       	cpi	r28, 0x08	; 8
    1076:	d1 05       	cpc	r29, r1
    1078:	09 f0       	breq	.+2      	; 0x107c <_ZN14password_scene8variantsEii+0xa8e>
    107a:	bc cf       	rjmp	.-136    	; 0xff4 <_ZN14password_scene8variantsEii+0xa06>
				break;
			}
			
		}
		
	}
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	ff 90       	pop	r15
    1086:	ef 90       	pop	r14
    1088:	df 90       	pop	r13
    108a:	cf 90       	pop	r12
    108c:	08 95       	ret

0000108e <__vector_4>:
bool btn3=false;
bool btn03=false;
bool btn12=false;

ISR(PCINT0_vect)
{
    108e:	1f 92       	push	r1
    1090:	0f 92       	push	r0
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
    cli();
    109c:	f8 94       	cli
	if(PINA==0b00000100&!btn0 )
    109e:	90 b1       	in	r25, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	94 30       	cpi	r25, 0x04	; 4
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <__vector_4+0x1a>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <btn0>
    10ac:	98 17       	cp	r25, r24
    10ae:	18 f4       	brcc	.+6      	; 0x10b6 <__vector_4+0x28>
	{
		btn0=true;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <btn0>
	}
	if(PINA==0b00001000&!btn1 )
    10b6:	90 b1       	in	r25, 0x00	; 0
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	98 30       	cpi	r25, 0x08	; 8
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <__vector_4+0x32>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <btn1>
    10c4:	98 17       	cp	r25, r24
    10c6:	18 f4       	brcc	.+6      	; 0x10ce <__vector_4+0x40>
	{
		btn1=true;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <btn1>
	}
	if(PINA==0b00010000&!btn2 )
    10ce:	90 b1       	in	r25, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 31       	cpi	r25, 0x10	; 16
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <__vector_4+0x4a>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 91 df 03 	lds	r25, 0x03DF	; 0x8003df <btn2>
    10dc:	98 17       	cp	r25, r24
    10de:	18 f4       	brcc	.+6      	; 0x10e6 <__vector_4+0x58>
	{
		btn2=true;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <btn2>
	}
	if(PINA==0b00100000&!btn3 )
    10e6:	90 b1       	in	r25, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 32       	cpi	r25, 0x20	; 32
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <__vector_4+0x62>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <btn3>
    10f4:	98 17       	cp	r25, r24
    10f6:	18 f4       	brcc	.+6      	; 0x10fe <__vector_4+0x70>
	{
		btn3=true;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	80 93 de 03 	sts	0x03DE, r24	; 0x8003de <btn3>
	}
	if(PINA==0b00011000&!btn03)
    10fe:	90 b1       	in	r25, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	98 31       	cpi	r25, 0x18	; 24
    1104:	09 f0       	breq	.+2      	; 0x1108 <__vector_4+0x7a>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <btn03>
    110c:	98 17       	cp	r25, r24
    110e:	18 f4       	brcc	.+6      	; 0x1116 <__vector_4+0x88>
	{
		btn03=true;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <btn03>
	}
	if(PINA==0b00100100&!btn12)
    1116:	90 b1       	in	r25, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	94 32       	cpi	r25, 0x24	; 36
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_4+0x92>
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <btn12>
    1124:	98 17       	cp	r25, r24
    1126:	18 f4       	brcc	.+6      	; 0x112e <__vector_4+0xa0>
	{
		btn12=true;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <btn12>
	}
	sei();
    112e:	78 94       	sei

}
    1130:	9f 91       	pop	r25
    1132:	8f 91       	pop	r24
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <_Z5checkv>:


void check()
{
    113e:	2f 92       	push	r2
    1140:	3f 92       	push	r3
    1142:	4f 92       	push	r4
    1144:	5f 92       	push	r5
    1146:	6f 92       	push	r6
    1148:	7f 92       	push	r7
    114a:	8f 92       	push	r8
    114c:	9f 92       	push	r9
    114e:	af 92       	push	r10
    1150:	bf 92       	push	r11
    1152:	cf 92       	push	r12
    1154:	df 92       	push	r13
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	62 97       	sbiw	r28, 0x12	; 18
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
	if(btn0 & !btn1 & !btn2 & btn3) btn03=true;
    1172:	f0 91 e1 03 	lds	r31, 0x03E1	; 0x8003e1 <btn0>
    1176:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <btn1>
    117a:	51 e0       	ldi	r21, 0x01	; 1
    117c:	49 2f       	mov	r20, r25
    117e:	45 27       	eor	r20, r21
    1180:	30 91 df 03 	lds	r19, 0x03DF	; 0x8003df <btn2>
    1184:	53 27       	eor	r21, r19
    1186:	b4 2f       	mov	r27, r20
    1188:	b5 23       	and	r27, r21
    118a:	af 2f       	mov	r26, r31
    118c:	ab 23       	and	r26, r27
    118e:	60 91 de 03 	lds	r22, 0x03DE	; 0x8003de <btn3>
    1192:	66 23       	and	r22, r22
    1194:	71 f0       	breq	.+28     	; 0x11b2 <_Z5checkv+0x74>
    1196:	aa 23       	and	r26, r26
    1198:	61 f0       	breq	.+24     	; 0x11b2 <_Z5checkv+0x74>
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <btn03>
	if(!btn0 & btn1 & btn2 & !btn3) btn12=true;
    11a0:	f8 27       	eor	r31, r24
    11a2:	9f 23       	and	r25, r31
    11a4:	86 27       	eor	r24, r22
    11a6:	23 2f       	mov	r18, r19
    11a8:	29 23       	and	r18, r25
    11aa:	62 17       	cp	r22, r18
    11ac:	60 f0       	brcs	.+24     	; 0x11c6 <_Z5checkv+0x88>
    11ae:	0c 94 36 22 	jmp	0x446c	; 0x446c <__stack+0x36d>
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	f8 27       	eor	r31, r24
    11b6:	9f 23       	and	r25, r31
    11b8:	86 27       	eor	r24, r22
    11ba:	23 2f       	mov	r18, r19
    11bc:	29 23       	and	r18, r25
    11be:	62 17       	cp	r22, r18
    11c0:	10 f0       	brcs	.+4      	; 0x11c6 <_Z5checkv+0x88>
    11c2:	0c 94 df 21 	jmp	0x43be	; 0x43be <__stack+0x2bf>
    11c6:	91 e0       	ldi	r25, 0x01	; 1
    11c8:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <btn12>
	
	if(btn0 & !btn1 & !btn2 & !btn3 & !btn12 & !btn03)
    11cc:	70 91 dd 03 	lds	r23, 0x03DD	; 0x8003dd <btn03>
    11d0:	e1 e0       	ldi	r30, 0x01	; 1
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	52 c5       	rjmp	.+2724   	; 0x1c7a <_Z5checkv+0xb3c>
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	c9 01       	movw	r24, r18
    11dc:	33 23       	and	r19, r19
    11de:	0c f4       	brge	.+2      	; 0x11e2 <_Z5checkv+0xa4>
    11e0:	07 96       	adiw	r24, 0x07	; 7
    11e2:	95 95       	asr	r25
    11e4:	87 95       	ror	r24
    11e6:	95 95       	asr	r25
    11e8:	87 95       	ror	r24
    11ea:	95 95       	asr	r25
    11ec:	87 95       	ror	r24
    11ee:	96 95       	lsr	r25
    11f0:	98 2f       	mov	r25, r24
    11f2:	88 27       	eor	r24, r24
    11f4:	97 95       	ror	r25
    11f6:	87 95       	ror	r24
    11f8:	fc 01       	movw	r30, r24
    11fa:	e5 50       	subi	r30, 0x05	; 5
    11fc:	fc 4f       	sbci	r31, 0xFC	; 252
    11fe:	8d 5f       	subi	r24, 0xFD	; 253
    1200:	9b 4f       	sbci	r25, 0xFB	; 251
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    1202:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    1204:	e8 17       	cp	r30, r24
    1206:	f9 07       	cpc	r31, r25
    1208:	e1 f7       	brne	.-8      	; 0x1202 <_Z5checkv+0xc4>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    120a:	2f 5f       	subi	r18, 0xFF	; 255
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	28 30       	cpi	r18, 0x08	; 8
    1210:	31 05       	cpc	r19, r1
    1212:	19 f7       	brne	.-58     	; 0x11da <_Z5checkv+0x9c>
    1214:	08 ec       	ldi	r16, 0xC8	; 200
    1216:	13 e0       	ldi	r17, 0x03	; 3
    1218:	1a 83       	std	Y+2, r17	; 0x02
    121a:	09 83       	std	Y+1, r16	; 0x01
    121c:	a0 e0       	ldi	r26, 0x00	; 0
    121e:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1220:	07 e0       	ldi	r16, 0x07	; 7
    1222:	10 e0       	ldi	r17, 0x00	; 0
    1224:	e9 81       	ldd	r30, Y+1	; 0x01
    1226:	fa 81       	ldd	r31, Y+2	; 0x02
    1228:	41 91       	ld	r20, Z+
    122a:	fa 83       	std	Y+2, r31	; 0x02
    122c:	e9 83       	std	Y+1, r30	; 0x01
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	cd 01       	movw	r24, r26
    1232:	87 70       	andi	r24, 0x07	; 7
    1234:	90 78       	andi	r25, 0x80	; 128
    1236:	99 23       	and	r25, r25
    1238:	24 f4       	brge	.+8      	; 0x1242 <_Z5checkv+0x104>
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	88 6f       	ori	r24, 0xF8	; 248
    123e:	9f 6f       	ori	r25, 0xFF	; 255
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	b8 01       	movw	r22, r16
    1244:	68 1b       	sub	r22, r24
    1246:	79 0b       	sbc	r23, r25
    1248:	fd 01       	movw	r30, r26
    124a:	bb 23       	and	r27, r27
    124c:	0c f4       	brge	.+2      	; 0x1250 <_Z5checkv+0x112>
    124e:	37 96       	adiw	r30, 0x07	; 7
    1250:	f5 95       	asr	r31
    1252:	e7 95       	ror	r30
    1254:	f5 95       	asr	r31
    1256:	e7 95       	ror	r30
    1258:	f5 95       	asr	r31
    125a:	e7 95       	ror	r30
    125c:	f6 95       	lsr	r31
    125e:	fe 2f       	mov	r31, r30
    1260:	ee 27       	eor	r30, r30
    1262:	f7 95       	ror	r31
    1264:	e7 95       	ror	r30
    1266:	e5 50       	subi	r30, 0x05	; 5
    1268:	fc 4f       	sbci	r31, 0xFC	; 252
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	ca 01       	movw	r24, r20
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <_Z5checkv+0x13a>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <_Z5checkv+0x136>
    127c:	80 78       	andi	r24, 0x80	; 128
    127e:	99 27       	eor	r25, r25
    1280:	06 2e       	mov	r0, r22
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <_Z5checkv+0x14a>
    1284:	95 95       	asr	r25
    1286:	87 95       	ror	r24
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <_Z5checkv+0x146>
    128c:	90 81       	ld	r25, Z
    128e:	89 2b       	or	r24, r25
    1290:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1292:	2f 5f       	subi	r18, 0xFF	; 255
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	28 30       	cpi	r18, 0x08	; 8
    1298:	31 05       	cpc	r19, r1
    129a:	49 f7       	brne	.-46     	; 0x126e <_Z5checkv+0x130>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    129c:	11 96       	adiw	r26, 0x01	; 1
    129e:	a8 30       	cpi	r26, 0x08	; 8
    12a0:	b1 05       	cpc	r27, r1
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <_Z5checkv+0x168>
    12a4:	bf cf       	rjmp	.-130    	; 0x1224 <_Z5checkv+0xe6>
	
	if(btn0 & !btn1 & !btn2 & !btn3 & !btn12 & !btn03)
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,zero);
		if(!pss)passw.up();
    12a6:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <pss>
    12aa:	81 11       	cpse	r24, r1
    12ac:	da c1       	rjmp	.+948    	; 0x1662 <_Z5checkv+0x524>

	}
	
	void up()
	{
		imgnum++;
    12ae:	e2 ee       	ldi	r30, 0xE2	; 226
    12b0:	f3 e0       	ldi	r31, 0x03	; 3
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	93 81       	ldd	r25, Z+3	; 0x03
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	93 83       	std	Z+3, r25	; 0x03
    12ba:	82 83       	std	Z+2, r24	; 0x02
		if (imgnum>2) imgnum=0;
    12bc:	83 30       	cpi	r24, 0x03	; 3
    12be:	91 05       	cpc	r25, r1
    12c0:	14 f4       	brge	.+4      	; 0x12c6 <_Z5checkv+0x188>
    12c2:	0c 94 ee 21 	jmp	0x43dc	; 0x43dc <__stack+0x2dd>
    12c6:	13 82       	std	Z+3, r1	; 0x03
    12c8:	12 82       	std	Z+2, r1	; 0x02
		variants(xcoord,ycoord);
    12ca:	06 81       	ldd	r16, Z+6	; 0x06
    12cc:	17 81       	ldd	r17, Z+7	; 0x07
    12ce:	24 81       	ldd	r18, Z+4	; 0x04
    12d0:	35 81       	ldd	r19, Z+5	; 0x05
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	2b 83       	std	Y+3, r18	; 0x03
    12d8:	39 83       	std	Y+1, r19	; 0x01
    12da:	d9 01       	movw	r26, r18
    12dc:	90 96       	adiw	r26, 0x20	; 32
    12de:	cb 01       	movw	r24, r22
    12e0:	77 23       	and	r23, r23
    12e2:	0c f4       	brge	.+2      	; 0x12e6 <_Z5checkv+0x1a8>
    12e4:	07 96       	adiw	r24, 0x07	; 7
    12e6:	ac 01       	movw	r20, r24
    12e8:	55 95       	asr	r21
    12ea:	47 95       	ror	r20
    12ec:	55 95       	asr	r21
    12ee:	47 95       	ror	r20
    12f0:	55 95       	asr	r21
    12f2:	47 95       	ror	r20
    12f4:	40 0f       	add	r20, r16
    12f6:	51 1f       	adc	r21, r17
    12f8:	56 95       	lsr	r21
    12fa:	54 2f       	mov	r21, r20
    12fc:	44 27       	eor	r20, r20
    12fe:	57 95       	ror	r21
    1300:	47 95       	ror	r20
    1302:	8b 80       	ldd	r8, Y+3	; 0x03
    1304:	99 80       	ldd	r9, Y+1	; 0x01
    1306:	f9 01       	movw	r30, r18
    1308:	e4 0f       	add	r30, r20
    130a:	f5 1f       	adc	r31, r21
    130c:	e5 50       	subi	r30, 0x05	; 5
    130e:	fc 4f       	sbci	r31, 0xFC	; 252
    1310:	4a 0f       	add	r20, r26
    1312:	5b 1f       	adc	r21, r27
    1314:	45 50       	subi	r20, 0x05	; 5
    1316:	5c 4f       	sbci	r21, 0xFC	; 252
    1318:	cf 01       	movw	r24, r30
    131a:	08 96       	adiw	r24, 0x08	; 8
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    131c:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    131e:	e8 17       	cp	r30, r24
    1320:	f9 07       	cpc	r31, r25
    1322:	e1 f7       	brne	.-8      	; 0x131c <_Z5checkv+0x1de>
    1324:	fc 01       	movw	r30, r24
void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
    1326:	48 17       	cp	r20, r24
    1328:	59 07       	cpc	r21, r25
    132a:	b1 f7       	brne	.-20     	; 0x1318 <_Z5checkv+0x1da>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    132c:	6f 5f       	subi	r22, 0xFF	; 255
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	60 32       	cpi	r22, 0x20	; 32
    1332:	71 05       	cpc	r23, r1
    1334:	a1 f6       	brne	.-88     	; 0x12de <_Z5checkv+0x1a0>
    1336:	0f 2e       	mov	r0, r31
    1338:	f4 ed       	ldi	r31, 0xD4	; 212
    133a:	ef 2e       	mov	r14, r31
    133c:	f2 e0       	ldi	r31, 0x02	; 2
    133e:	ff 2e       	mov	r15, r31
    1340:	f0 2d       	mov	r31, r0
    1342:	c1 2c       	mov	r12, r1
    1344:	d1 2c       	mov	r13, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1346:	0f 2e       	mov	r0, r31
    1348:	f7 e0       	ldi	r31, 0x07	; 7
    134a:	af 2e       	mov	r10, r31
    134c:	b1 2c       	mov	r11, r1
    134e:	f0 2d       	mov	r31, r0
    1350:	c6 01       	movw	r24, r12
    1352:	87 70       	andi	r24, 0x07	; 7
    1354:	90 78       	andi	r25, 0x80	; 128
    1356:	99 23       	and	r25, r25
    1358:	24 f4       	brge	.+8      	; 0x1362 <_Z5checkv+0x224>
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	88 6f       	ori	r24, 0xF8	; 248
    135e:	9f 6f       	ori	r25, 0xFF	; 255
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	b5 01       	movw	r22, r10
    1364:	68 1b       	sub	r22, r24
    1366:	79 0b       	sbc	r23, r25
    1368:	c7 01       	movw	r24, r14
    136a:	04 97       	sbiw	r24, 0x04	; 4
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	c6 01       	movw	r24, r12
    1372:	dd 20       	and	r13, r13
    1374:	0c f4       	brge	.+2      	; 0x1378 <_Z5checkv+0x23a>
    1376:	07 96       	adiw	r24, 0x07	; 7
    1378:	dc 01       	movw	r26, r24
    137a:	b5 95       	asr	r27
    137c:	a7 95       	ror	r26
    137e:	b5 95       	asr	r27
    1380:	a7 95       	ror	r26
    1382:	b5 95       	asr	r27
    1384:	a7 95       	ror	r26
    1386:	a0 0f       	add	r26, r16
    1388:	b1 1f       	adc	r27, r17
    138a:	b6 95       	lsr	r27
    138c:	ba 2f       	mov	r27, r26
    138e:	aa 27       	eor	r26, r26
    1390:	b7 95       	ror	r27
    1392:	a7 95       	ror	r26
    1394:	a8 0d       	add	r26, r8
    1396:	b9 1d       	adc	r27, r9
    1398:	a5 50       	subi	r26, 0x05	; 5
    139a:	bc 4f       	sbci	r27, 0xFC	; 252
    139c:	e9 81       	ldd	r30, Y+1	; 0x01
    139e:	fa 81       	ldd	r31, Y+2	; 0x02
    13a0:	41 91       	ld	r20, Z+
    13a2:	fa 83       	std	Y+2, r31	; 0x02
    13a4:	e9 83       	std	Y+1, r30	; 0x01
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	fd 01       	movw	r30, r26
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	ca 01       	movw	r24, r20
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <_Z5checkv+0x27a>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <_Z5checkv+0x276>
    13bc:	80 78       	andi	r24, 0x80	; 128
    13be:	99 27       	eor	r25, r25
    13c0:	06 2e       	mov	r0, r22
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <_Z5checkv+0x28a>
    13c4:	95 95       	asr	r25
    13c6:	87 95       	ror	r24
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <_Z5checkv+0x286>
    13cc:	90 81       	ld	r25, Z
    13ce:	89 2b       	or	r24, r25
    13d0:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    13d2:	2f 5f       	subi	r18, 0xFF	; 255
    13d4:	3f 4f       	sbci	r19, 0xFF	; 255
    13d6:	28 30       	cpi	r18, 0x08	; 8
    13d8:	31 05       	cpc	r19, r1
    13da:	49 f7       	brne	.-46     	; 0x13ae <_Z5checkv+0x270>
    13dc:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    13de:	29 81       	ldd	r18, Y+1	; 0x01
    13e0:	3a 81       	ldd	r19, Y+2	; 0x02
    13e2:	2e 15       	cp	r18, r14
    13e4:	3f 05       	cpc	r19, r15
    13e6:	d1 f6       	brne	.-76     	; 0x139c <_Z5checkv+0x25e>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    13e8:	3f ef       	ldi	r19, 0xFF	; 255
    13ea:	c3 1a       	sub	r12, r19
    13ec:	d3 0a       	sbc	r13, r19
    13ee:	44 e0       	ldi	r20, 0x04	; 4
    13f0:	e4 0e       	add	r14, r20
    13f2:	f1 1c       	adc	r15, r1
    13f4:	50 e2       	ldi	r21, 0x20	; 32
    13f6:	c5 16       	cp	r12, r21
    13f8:	d1 04       	cpc	r13, r1
    13fa:	09 f0       	breq	.+2      	; 0x13fe <_Z5checkv+0x2c0>
    13fc:	a9 cf       	rjmp	.-174    	; 0x1350 <_Z5checkv+0x212>
    13fe:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
		}
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	2b 83       	std	Y+3, r18	; 0x03
    1408:	39 83       	std	Y+1, r19	; 0x01
    140a:	d9 01       	movw	r26, r18
    140c:	90 96       	adiw	r26, 0x20	; 32
    140e:	cb 01       	movw	r24, r22
    1410:	77 23       	and	r23, r23
    1412:	0c f4       	brge	.+2      	; 0x1416 <_Z5checkv+0x2d8>
    1414:	07 96       	adiw	r24, 0x07	; 7
    1416:	ac 01       	movw	r20, r24
    1418:	55 95       	asr	r21
    141a:	47 95       	ror	r20
    141c:	55 95       	asr	r21
    141e:	47 95       	ror	r20
    1420:	55 95       	asr	r21
    1422:	47 95       	ror	r20
    1424:	40 0f       	add	r20, r16
    1426:	51 1f       	adc	r21, r17
    1428:	56 95       	lsr	r21
    142a:	54 2f       	mov	r21, r20
    142c:	44 27       	eor	r20, r20
    142e:	57 95       	ror	r21
    1430:	47 95       	ror	r20
    1432:	8b 80       	ldd	r8, Y+3	; 0x03
    1434:	99 80       	ldd	r9, Y+1	; 0x01
    1436:	f9 01       	movw	r30, r18
    1438:	e4 0f       	add	r30, r20
    143a:	f5 1f       	adc	r31, r21
    143c:	e5 50       	subi	r30, 0x05	; 5
    143e:	fc 4f       	sbci	r31, 0xFC	; 252
    1440:	4a 0f       	add	r20, r26
    1442:	5b 1f       	adc	r21, r27
    1444:	45 50       	subi	r20, 0x05	; 5
    1446:	5c 4f       	sbci	r21, 0xFC	; 252
    1448:	cf 01       	movw	r24, r30
    144a:	08 96       	adiw	r24, 0x08	; 8
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    144c:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    144e:	8e 17       	cp	r24, r30
    1450:	9f 07       	cpc	r25, r31
    1452:	e1 f7       	brne	.-8      	; 0x144c <_Z5checkv+0x30e>
    1454:	fc 01       	movw	r30, r24
void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
    1456:	84 17       	cp	r24, r20
    1458:	95 07       	cpc	r25, r21
    145a:	b1 f7       	brne	.-20     	; 0x1448 <_Z5checkv+0x30a>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    145c:	6f 5f       	subi	r22, 0xFF	; 255
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	60 32       	cpi	r22, 0x20	; 32
    1462:	71 05       	cpc	r23, r1
    1464:	a1 f6       	brne	.-88     	; 0x140e <_Z5checkv+0x2d0>
    1466:	0f 2e       	mov	r0, r31
    1468:	f4 e5       	ldi	r31, 0x54	; 84
    146a:	ef 2e       	mov	r14, r31
    146c:	f2 e0       	ldi	r31, 0x02	; 2
    146e:	ff 2e       	mov	r15, r31
    1470:	f0 2d       	mov	r31, r0
    1472:	c1 2c       	mov	r12, r1
    1474:	d1 2c       	mov	r13, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1476:	0f 2e       	mov	r0, r31
    1478:	f7 e0       	ldi	r31, 0x07	; 7
    147a:	af 2e       	mov	r10, r31
    147c:	b1 2c       	mov	r11, r1
    147e:	f0 2d       	mov	r31, r0
    1480:	c6 01       	movw	r24, r12
    1482:	87 70       	andi	r24, 0x07	; 7
    1484:	90 78       	andi	r25, 0x80	; 128
    1486:	99 23       	and	r25, r25
    1488:	24 f4       	brge	.+8      	; 0x1492 <_Z5checkv+0x354>
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	88 6f       	ori	r24, 0xF8	; 248
    148e:	9f 6f       	ori	r25, 0xFF	; 255
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	b5 01       	movw	r22, r10
    1494:	68 1b       	sub	r22, r24
    1496:	79 0b       	sbc	r23, r25
    1498:	d7 01       	movw	r26, r14
    149a:	14 97       	sbiw	r26, 0x04	; 4
    149c:	ba 83       	std	Y+2, r27	; 0x02
    149e:	a9 83       	std	Y+1, r26	; 0x01
    14a0:	c6 01       	movw	r24, r12
    14a2:	dd 20       	and	r13, r13
    14a4:	0c f4       	brge	.+2      	; 0x14a8 <_Z5checkv+0x36a>
    14a6:	07 96       	adiw	r24, 0x07	; 7
    14a8:	dc 01       	movw	r26, r24
    14aa:	b5 95       	asr	r27
    14ac:	a7 95       	ror	r26
    14ae:	b5 95       	asr	r27
    14b0:	a7 95       	ror	r26
    14b2:	b5 95       	asr	r27
    14b4:	a7 95       	ror	r26
    14b6:	a0 0f       	add	r26, r16
    14b8:	b1 1f       	adc	r27, r17
    14ba:	b6 95       	lsr	r27
    14bc:	ba 2f       	mov	r27, r26
    14be:	aa 27       	eor	r26, r26
    14c0:	b7 95       	ror	r27
    14c2:	a7 95       	ror	r26
    14c4:	a8 0d       	add	r26, r8
    14c6:	b9 1d       	adc	r27, r9
    14c8:	a5 50       	subi	r26, 0x05	; 5
    14ca:	bc 4f       	sbci	r27, 0xFC	; 252
    14cc:	e9 81       	ldd	r30, Y+1	; 0x01
    14ce:	fa 81       	ldd	r31, Y+2	; 0x02
    14d0:	41 91       	ld	r20, Z+
    14d2:	fa 83       	std	Y+2, r31	; 0x02
    14d4:	e9 83       	std	Y+1, r30	; 0x01
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	fd 01       	movw	r30, r26
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	ca 01       	movw	r24, r20
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <_Z5checkv+0x3aa>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <_Z5checkv+0x3a6>
    14ec:	80 78       	andi	r24, 0x80	; 128
    14ee:	99 27       	eor	r25, r25
    14f0:	06 2e       	mov	r0, r22
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <_Z5checkv+0x3ba>
    14f4:	95 95       	asr	r25
    14f6:	87 95       	ror	r24
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <_Z5checkv+0x3b6>
    14fc:	90 81       	ld	r25, Z
    14fe:	89 2b       	or	r24, r25
    1500:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1502:	2f 5f       	subi	r18, 0xFF	; 255
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	28 30       	cpi	r18, 0x08	; 8
    1508:	31 05       	cpc	r19, r1
    150a:	49 f7       	brne	.-46     	; 0x14de <_Z5checkv+0x3a0>
    150c:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    150e:	29 81       	ldd	r18, Y+1	; 0x01
    1510:	3a 81       	ldd	r19, Y+2	; 0x02
    1512:	2e 15       	cp	r18, r14
    1514:	3f 05       	cpc	r19, r15
    1516:	d1 f6       	brne	.-76     	; 0x14cc <_Z5checkv+0x38e>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1518:	3f ef       	ldi	r19, 0xFF	; 255
    151a:	c3 1a       	sub	r12, r19
    151c:	d3 0a       	sbc	r13, r19
    151e:	44 e0       	ldi	r20, 0x04	; 4
    1520:	e4 0e       	add	r14, r20
    1522:	f1 1c       	adc	r15, r1
    1524:	50 e2       	ldi	r21, 0x20	; 32
    1526:	c5 16       	cp	r12, r21
    1528:	d1 04       	cpc	r13, r1
    152a:	09 f0       	breq	.+2      	; 0x152e <_Z5checkv+0x3f0>
    152c:	a9 cf       	rjmp	.-174    	; 0x1480 <_Z5checkv+0x342>
    152e:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
		}
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	2b 83       	std	Y+3, r18	; 0x03
    1538:	39 83       	std	Y+1, r19	; 0x01
    153a:	d9 01       	movw	r26, r18
    153c:	90 96       	adiw	r26, 0x20	; 32
    153e:	cb 01       	movw	r24, r22
    1540:	77 23       	and	r23, r23
    1542:	0c f4       	brge	.+2      	; 0x1546 <_Z5checkv+0x408>
    1544:	07 96       	adiw	r24, 0x07	; 7
    1546:	ac 01       	movw	r20, r24
    1548:	55 95       	asr	r21
    154a:	47 95       	ror	r20
    154c:	55 95       	asr	r21
    154e:	47 95       	ror	r20
    1550:	55 95       	asr	r21
    1552:	47 95       	ror	r20
    1554:	40 0f       	add	r20, r16
    1556:	51 1f       	adc	r21, r17
    1558:	56 95       	lsr	r21
    155a:	54 2f       	mov	r21, r20
    155c:	44 27       	eor	r20, r20
    155e:	57 95       	ror	r21
    1560:	47 95       	ror	r20
    1562:	8b 80       	ldd	r8, Y+3	; 0x03
    1564:	99 80       	ldd	r9, Y+1	; 0x01
    1566:	f9 01       	movw	r30, r18
    1568:	e4 0f       	add	r30, r20
    156a:	f5 1f       	adc	r31, r21
    156c:	e5 50       	subi	r30, 0x05	; 5
    156e:	fc 4f       	sbci	r31, 0xFC	; 252
    1570:	4a 0f       	add	r20, r26
    1572:	5b 1f       	adc	r21, r27
    1574:	45 50       	subi	r20, 0x05	; 5
    1576:	5c 4f       	sbci	r21, 0xFC	; 252
    1578:	cf 01       	movw	r24, r30
    157a:	08 96       	adiw	r24, 0x08	; 8
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    157c:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    157e:	8e 17       	cp	r24, r30
    1580:	9f 07       	cpc	r25, r31
    1582:	e1 f7       	brne	.-8      	; 0x157c <_Z5checkv+0x43e>
    1584:	fc 01       	movw	r30, r24
void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
    1586:	48 17       	cp	r20, r24
    1588:	59 07       	cpc	r21, r25
    158a:	b1 f7       	brne	.-20     	; 0x1578 <_Z5checkv+0x43a>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    158c:	6f 5f       	subi	r22, 0xFF	; 255
    158e:	7f 4f       	sbci	r23, 0xFF	; 255
    1590:	60 32       	cpi	r22, 0x20	; 32
    1592:	71 05       	cpc	r23, r1
    1594:	a1 f6       	brne	.-88     	; 0x153e <_Z5checkv+0x400>
    1596:	0f 2e       	mov	r0, r31
    1598:	f4 ec       	ldi	r31, 0xC4	; 196
    159a:	ef 2e       	mov	r14, r31
    159c:	f1 e0       	ldi	r31, 0x01	; 1
    159e:	ff 2e       	mov	r15, r31
    15a0:	f0 2d       	mov	r31, r0
    15a2:	c1 2c       	mov	r12, r1
    15a4:	d1 2c       	mov	r13, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    15a6:	0f 2e       	mov	r0, r31
    15a8:	f7 e0       	ldi	r31, 0x07	; 7
    15aa:	af 2e       	mov	r10, r31
    15ac:	b1 2c       	mov	r11, r1
    15ae:	f0 2d       	mov	r31, r0
    15b0:	c6 01       	movw	r24, r12
    15b2:	87 70       	andi	r24, 0x07	; 7
    15b4:	90 78       	andi	r25, 0x80	; 128
    15b6:	99 23       	and	r25, r25
    15b8:	24 f4       	brge	.+8      	; 0x15c2 <_Z5checkv+0x484>
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	88 6f       	ori	r24, 0xF8	; 248
    15be:	9f 6f       	ori	r25, 0xFF	; 255
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	b5 01       	movw	r22, r10
    15c4:	68 1b       	sub	r22, r24
    15c6:	79 0b       	sbc	r23, r25
    15c8:	d7 01       	movw	r26, r14
    15ca:	14 97       	sbiw	r26, 0x04	; 4
    15cc:	ba 83       	std	Y+2, r27	; 0x02
    15ce:	a9 83       	std	Y+1, r26	; 0x01
    15d0:	c6 01       	movw	r24, r12
    15d2:	dd 20       	and	r13, r13
    15d4:	0c f4       	brge	.+2      	; 0x15d8 <_Z5checkv+0x49a>
    15d6:	07 96       	adiw	r24, 0x07	; 7
    15d8:	dc 01       	movw	r26, r24
    15da:	b5 95       	asr	r27
    15dc:	a7 95       	ror	r26
    15de:	b5 95       	asr	r27
    15e0:	a7 95       	ror	r26
    15e2:	b5 95       	asr	r27
    15e4:	a7 95       	ror	r26
    15e6:	a0 0f       	add	r26, r16
    15e8:	b1 1f       	adc	r27, r17
    15ea:	b6 95       	lsr	r27
    15ec:	ba 2f       	mov	r27, r26
    15ee:	aa 27       	eor	r26, r26
    15f0:	b7 95       	ror	r27
    15f2:	a7 95       	ror	r26
    15f4:	a8 0d       	add	r26, r8
    15f6:	b9 1d       	adc	r27, r9
    15f8:	a5 50       	subi	r26, 0x05	; 5
    15fa:	bc 4f       	sbci	r27, 0xFC	; 252
    15fc:	e9 81       	ldd	r30, Y+1	; 0x01
    15fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1600:	41 91       	ld	r20, Z+
    1602:	fa 83       	std	Y+2, r31	; 0x02
    1604:	e9 83       	std	Y+1, r30	; 0x01
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	fd 01       	movw	r30, r26
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	ca 01       	movw	r24, r20
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <_Z5checkv+0x4da>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <_Z5checkv+0x4d6>
    161c:	80 78       	andi	r24, 0x80	; 128
    161e:	99 27       	eor	r25, r25
    1620:	06 2e       	mov	r0, r22
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <_Z5checkv+0x4ea>
    1624:	95 95       	asr	r25
    1626:	87 95       	ror	r24
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <_Z5checkv+0x4e6>
    162c:	90 81       	ld	r25, Z
    162e:	89 2b       	or	r24, r25
    1630:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1632:	2f 5f       	subi	r18, 0xFF	; 255
    1634:	3f 4f       	sbci	r19, 0xFF	; 255
    1636:	28 30       	cpi	r18, 0x08	; 8
    1638:	31 05       	cpc	r19, r1
    163a:	49 f7       	brne	.-46     	; 0x160e <_Z5checkv+0x4d0>
    163c:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    163e:	29 81       	ldd	r18, Y+1	; 0x01
    1640:	3a 81       	ldd	r19, Y+2	; 0x02
    1642:	2e 15       	cp	r18, r14
    1644:	3f 05       	cpc	r19, r15
    1646:	d1 f6       	brne	.-76     	; 0x15fc <_Z5checkv+0x4be>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1648:	3f ef       	ldi	r19, 0xFF	; 255
    164a:	c3 1a       	sub	r12, r19
    164c:	d3 0a       	sbc	r13, r19
    164e:	44 e0       	ldi	r20, 0x04	; 4
    1650:	e4 0e       	add	r14, r20
    1652:	f1 1c       	adc	r15, r1
    1654:	50 e2       	ldi	r21, 0x20	; 32
    1656:	c5 16       	cp	r12, r21
    1658:	d1 04       	cpc	r13, r1
    165a:	09 f0       	breq	.+2      	; 0x165e <_Z5checkv+0x520>
    165c:	a9 cf       	rjmp	.-174    	; 0x15b0 <_Z5checkv+0x472>
    165e:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
		}
	}
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
    1662:	ea ee       	ldi	r30, 0xEA	; 234
    1664:	f3 e0       	ldi	r31, 0x03	; 3
    1666:	66 84       	ldd	r6, Z+14	; 0x0e
    1668:	77 84       	ldd	r7, Z+15	; 0x0f
    166a:	d3 01       	movw	r26, r6
    166c:	11 96       	adiw	r26, 0x01	; 1
    166e:	a4 80       	ldd	r10, Z+4	; 0x04
    1670:	b5 80       	ldd	r11, Z+5	; 0x05
    1672:	08 e7       	ldi	r16, 0x78	; 120
    1674:	13 e0       	ldi	r17, 0x03	; 3
    1676:	78 01       	movw	r14, r16
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1678:	1a 82       	std	Y+2, r1	; 0x02
    167a:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    167c:	0f 2e       	mov	r0, r31
    167e:	f7 e0       	ldi	r31, 0x07	; 7
    1680:	cf 2e       	mov	r12, r31
    1682:	d1 2c       	mov	r13, r1
    1684:	f0 2d       	mov	r31, r0
    1686:	f7 01       	movw	r30, r14
    1688:	41 91       	ld	r20, Z+
    168a:	7f 01       	movw	r14, r30
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	87 70       	andi	r24, 0x07	; 7
    1694:	90 78       	andi	r25, 0x80	; 128
    1696:	99 23       	and	r25, r25
    1698:	24 f4       	brge	.+8      	; 0x16a2 <_Z5checkv+0x564>
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	88 6f       	ori	r24, 0xF8	; 248
    169e:	9f 6f       	ori	r25, 0xFF	; 255
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	b6 01       	movw	r22, r12
    16a4:	68 1b       	sub	r22, r24
    16a6:	79 0b       	sbc	r23, r25
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	9a 81       	ldd	r25, Y+2	; 0x02
    16ac:	99 23       	and	r25, r25
    16ae:	0c f4       	brge	.+2      	; 0x16b2 <_Z5checkv+0x574>
    16b0:	07 96       	adiw	r24, 0x07	; 7
    16b2:	fc 01       	movw	r30, r24
    16b4:	f5 95       	asr	r31
    16b6:	e7 95       	ror	r30
    16b8:	f5 95       	asr	r31
    16ba:	e7 95       	ror	r30
    16bc:	f5 95       	asr	r31
    16be:	e7 95       	ror	r30
    16c0:	ea 0f       	add	r30, r26
    16c2:	fb 1f       	adc	r31, r27
    16c4:	f6 95       	lsr	r31
    16c6:	fe 2f       	mov	r31, r30
    16c8:	ee 27       	eor	r30, r30
    16ca:	f7 95       	ror	r31
    16cc:	e7 95       	ror	r30
    16ce:	ea 0d       	add	r30, r10
    16d0:	fb 1d       	adc	r31, r11
    16d2:	e5 50       	subi	r30, 0x05	; 5
    16d4:	fc 4f       	sbci	r31, 0xFC	; 252
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	ca 01       	movw	r24, r20
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <_Z5checkv+0x5a6>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <_Z5checkv+0x5a2>
    16e8:	80 78       	andi	r24, 0x80	; 128
    16ea:	99 27       	eor	r25, r25
    16ec:	06 2e       	mov	r0, r22
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <_Z5checkv+0x5b6>
    16f0:	95 95       	asr	r25
    16f2:	87 95       	ror	r24
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <_Z5checkv+0x5b2>
    16f8:	90 81       	ld	r25, Z
    16fa:	89 2b       	or	r24, r25
    16fc:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    16fe:	2f 5f       	subi	r18, 0xFF	; 255
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	28 30       	cpi	r18, 0x08	; 8
    1704:	31 05       	cpc	r19, r1
    1706:	49 f7       	brne	.-46     	; 0x16da <_Z5checkv+0x59c>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1708:	29 81       	ldd	r18, Y+1	; 0x01
    170a:	3a 81       	ldd	r19, Y+2	; 0x02
    170c:	2f 5f       	subi	r18, 0xFF	; 255
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	3a 83       	std	Y+2, r19	; 0x02
    1712:	29 83       	std	Y+1, r18	; 0x01
    1714:	28 30       	cpi	r18, 0x08	; 8
    1716:	31 05       	cpc	r19, r1
    1718:	09 f0       	breq	.+2      	; 0x171c <_Z5checkv+0x5de>
    171a:	b5 cf       	rjmp	.-150    	; 0x1686 <_Z5checkv+0x548>
	}
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
    171c:	a0 90 f0 03 	lds	r10, 0x03F0	; 0x8003f0 <passww+0x6>
    1720:	b0 90 f1 03 	lds	r11, 0x03F1	; 0x8003f1 <passww+0x7>
    1724:	0f 2e       	mov	r0, r31
    1726:	f8 e7       	ldi	r31, 0x78	; 120
    1728:	ef 2e       	mov	r14, r31
    172a:	f3 e0       	ldi	r31, 0x03	; 3
    172c:	ff 2e       	mov	r15, r31
    172e:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1730:	1a 82       	std	Y+2, r1	; 0x02
    1732:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1734:	0f 2e       	mov	r0, r31
    1736:	f7 e0       	ldi	r31, 0x07	; 7
    1738:	cf 2e       	mov	r12, r31
    173a:	d1 2c       	mov	r13, r1
    173c:	f0 2d       	mov	r31, r0
    173e:	f7 01       	movw	r30, r14
    1740:	41 91       	ld	r20, Z+
    1742:	7f 01       	movw	r14, r30
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	89 81       	ldd	r24, Y+1	; 0x01
    1748:	9a 81       	ldd	r25, Y+2	; 0x02
    174a:	87 70       	andi	r24, 0x07	; 7
    174c:	90 78       	andi	r25, 0x80	; 128
    174e:	99 23       	and	r25, r25
    1750:	24 f4       	brge	.+8      	; 0x175a <_Z5checkv+0x61c>
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	88 6f       	ori	r24, 0xF8	; 248
    1756:	9f 6f       	ori	r25, 0xFF	; 255
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	b6 01       	movw	r22, r12
    175c:	68 1b       	sub	r22, r24
    175e:	79 0b       	sbc	r23, r25
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	99 23       	and	r25, r25
    1766:	0c f4       	brge	.+2      	; 0x176a <_Z5checkv+0x62c>
    1768:	07 96       	adiw	r24, 0x07	; 7
    176a:	fc 01       	movw	r30, r24
    176c:	f5 95       	asr	r31
    176e:	e7 95       	ror	r30
    1770:	f5 95       	asr	r31
    1772:	e7 95       	ror	r30
    1774:	f5 95       	asr	r31
    1776:	e7 95       	ror	r30
    1778:	ea 0f       	add	r30, r26
    177a:	fb 1f       	adc	r31, r27
    177c:	f6 95       	lsr	r31
    177e:	fe 2f       	mov	r31, r30
    1780:	ee 27       	eor	r30, r30
    1782:	f7 95       	ror	r31
    1784:	e7 95       	ror	r30
    1786:	ea 0d       	add	r30, r10
    1788:	fb 1d       	adc	r31, r11
    178a:	e5 50       	subi	r30, 0x05	; 5
    178c:	fc 4f       	sbci	r31, 0xFC	; 252
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	ca 01       	movw	r24, r20
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <_Z5checkv+0x65e>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <_Z5checkv+0x65a>
    17a0:	80 78       	andi	r24, 0x80	; 128
    17a2:	99 27       	eor	r25, r25
    17a4:	06 2e       	mov	r0, r22
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <_Z5checkv+0x66e>
    17a8:	95 95       	asr	r25
    17aa:	87 95       	ror	r24
    17ac:	0a 94       	dec	r0
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <_Z5checkv+0x66a>
    17b0:	90 81       	ld	r25, Z
    17b2:	89 2b       	or	r24, r25
    17b4:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    17b6:	2f 5f       	subi	r18, 0xFF	; 255
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	28 30       	cpi	r18, 0x08	; 8
    17bc:	31 05       	cpc	r19, r1
    17be:	49 f7       	brne	.-46     	; 0x1792 <_Z5checkv+0x654>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    17c0:	29 81       	ldd	r18, Y+1	; 0x01
    17c2:	3a 81       	ldd	r19, Y+2	; 0x02
    17c4:	2f 5f       	subi	r18, 0xFF	; 255
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	3a 83       	std	Y+2, r19	; 0x02
    17ca:	29 83       	std	Y+1, r18	; 0x01
    17cc:	28 30       	cpi	r18, 0x08	; 8
    17ce:	31 05       	cpc	r19, r1
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <_Z5checkv+0x696>
    17d2:	b5 cf       	rjmp	.-150    	; 0x173e <_Z5checkv+0x600>
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
    17d4:	a0 90 f2 03 	lds	r10, 0x03F2	; 0x8003f2 <passww+0x8>
    17d8:	b0 90 f3 03 	lds	r11, 0x03F3	; 0x8003f3 <passww+0x9>
    17dc:	0f 2e       	mov	r0, r31
    17de:	f8 e7       	ldi	r31, 0x78	; 120
    17e0:	ef 2e       	mov	r14, r31
    17e2:	f3 e0       	ldi	r31, 0x03	; 3
    17e4:	ff 2e       	mov	r15, r31
    17e6:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    17e8:	1a 82       	std	Y+2, r1	; 0x02
    17ea:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    17ec:	0f 2e       	mov	r0, r31
    17ee:	f7 e0       	ldi	r31, 0x07	; 7
    17f0:	cf 2e       	mov	r12, r31
    17f2:	d1 2c       	mov	r13, r1
    17f4:	f0 2d       	mov	r31, r0
    17f6:	f7 01       	movw	r30, r14
    17f8:	41 91       	ld	r20, Z+
    17fa:	7f 01       	movw	r14, r30
    17fc:	50 e0       	ldi	r21, 0x00	; 0
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	9a 81       	ldd	r25, Y+2	; 0x02
    1802:	87 70       	andi	r24, 0x07	; 7
    1804:	90 78       	andi	r25, 0x80	; 128
    1806:	99 23       	and	r25, r25
    1808:	24 f4       	brge	.+8      	; 0x1812 <_Z5checkv+0x6d4>
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	88 6f       	ori	r24, 0xF8	; 248
    180e:	9f 6f       	ori	r25, 0xFF	; 255
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	b6 01       	movw	r22, r12
    1814:	68 1b       	sub	r22, r24
    1816:	79 0b       	sbc	r23, r25
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	9a 81       	ldd	r25, Y+2	; 0x02
    181c:	99 23       	and	r25, r25
    181e:	0c f4       	brge	.+2      	; 0x1822 <_Z5checkv+0x6e4>
    1820:	07 96       	adiw	r24, 0x07	; 7
    1822:	fc 01       	movw	r30, r24
    1824:	f5 95       	asr	r31
    1826:	e7 95       	ror	r30
    1828:	f5 95       	asr	r31
    182a:	e7 95       	ror	r30
    182c:	f5 95       	asr	r31
    182e:	e7 95       	ror	r30
    1830:	ea 0f       	add	r30, r26
    1832:	fb 1f       	adc	r31, r27
    1834:	f6 95       	lsr	r31
    1836:	fe 2f       	mov	r31, r30
    1838:	ee 27       	eor	r30, r30
    183a:	f7 95       	ror	r31
    183c:	e7 95       	ror	r30
    183e:	ea 0d       	add	r30, r10
    1840:	fb 1d       	adc	r31, r11
    1842:	e5 50       	subi	r30, 0x05	; 5
    1844:	fc 4f       	sbci	r31, 0xFC	; 252
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	ca 01       	movw	r24, r20
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <_Z5checkv+0x716>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <_Z5checkv+0x712>
    1858:	80 78       	andi	r24, 0x80	; 128
    185a:	99 27       	eor	r25, r25
    185c:	06 2e       	mov	r0, r22
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <_Z5checkv+0x726>
    1860:	95 95       	asr	r25
    1862:	87 95       	ror	r24
    1864:	0a 94       	dec	r0
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <_Z5checkv+0x722>
    1868:	90 81       	ld	r25, Z
    186a:	89 2b       	or	r24, r25
    186c:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    186e:	2f 5f       	subi	r18, 0xFF	; 255
    1870:	3f 4f       	sbci	r19, 0xFF	; 255
    1872:	28 30       	cpi	r18, 0x08	; 8
    1874:	31 05       	cpc	r19, r1
    1876:	49 f7       	brne	.-46     	; 0x184a <_Z5checkv+0x70c>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1878:	29 81       	ldd	r18, Y+1	; 0x01
    187a:	3a 81       	ldd	r19, Y+2	; 0x02
    187c:	2f 5f       	subi	r18, 0xFF	; 255
    187e:	3f 4f       	sbci	r19, 0xFF	; 255
    1880:	3a 83       	std	Y+2, r19	; 0x02
    1882:	29 83       	std	Y+1, r18	; 0x01
    1884:	28 30       	cpi	r18, 0x08	; 8
    1886:	31 05       	cpc	r19, r1
    1888:	09 f0       	breq	.+2      	; 0x188c <_Z5checkv+0x74e>
    188a:	b5 cf       	rjmp	.-150    	; 0x17f6 <_Z5checkv+0x6b8>
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
    188c:	a0 90 f4 03 	lds	r10, 0x03F4	; 0x8003f4 <passww+0xa>
    1890:	b0 90 f5 03 	lds	r11, 0x03F5	; 0x8003f5 <passww+0xb>
    1894:	0f 2e       	mov	r0, r31
    1896:	f8 e7       	ldi	r31, 0x78	; 120
    1898:	ef 2e       	mov	r14, r31
    189a:	f3 e0       	ldi	r31, 0x03	; 3
    189c:	ff 2e       	mov	r15, r31
    189e:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    18a0:	1a 82       	std	Y+2, r1	; 0x02
    18a2:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    18a4:	0f 2e       	mov	r0, r31
    18a6:	f7 e0       	ldi	r31, 0x07	; 7
    18a8:	cf 2e       	mov	r12, r31
    18aa:	d1 2c       	mov	r13, r1
    18ac:	f0 2d       	mov	r31, r0
    18ae:	f7 01       	movw	r30, r14
    18b0:	41 91       	ld	r20, Z+
    18b2:	7f 01       	movw	r14, r30
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	87 70       	andi	r24, 0x07	; 7
    18bc:	90 78       	andi	r25, 0x80	; 128
    18be:	99 23       	and	r25, r25
    18c0:	24 f4       	brge	.+8      	; 0x18ca <_Z5checkv+0x78c>
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	88 6f       	ori	r24, 0xF8	; 248
    18c6:	9f 6f       	ori	r25, 0xFF	; 255
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	b6 01       	movw	r22, r12
    18cc:	68 1b       	sub	r22, r24
    18ce:	79 0b       	sbc	r23, r25
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	9a 81       	ldd	r25, Y+2	; 0x02
    18d4:	99 23       	and	r25, r25
    18d6:	0c f4       	brge	.+2      	; 0x18da <_Z5checkv+0x79c>
    18d8:	07 96       	adiw	r24, 0x07	; 7
    18da:	fc 01       	movw	r30, r24
    18dc:	f5 95       	asr	r31
    18de:	e7 95       	ror	r30
    18e0:	f5 95       	asr	r31
    18e2:	e7 95       	ror	r30
    18e4:	f5 95       	asr	r31
    18e6:	e7 95       	ror	r30
    18e8:	ea 0f       	add	r30, r26
    18ea:	fb 1f       	adc	r31, r27
    18ec:	f6 95       	lsr	r31
    18ee:	fe 2f       	mov	r31, r30
    18f0:	ee 27       	eor	r30, r30
    18f2:	f7 95       	ror	r31
    18f4:	e7 95       	ror	r30
    18f6:	ea 0d       	add	r30, r10
    18f8:	fb 1d       	adc	r31, r11
    18fa:	e5 50       	subi	r30, 0x05	; 5
    18fc:	fc 4f       	sbci	r31, 0xFC	; 252
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	ca 01       	movw	r24, r20
    1904:	02 2e       	mov	r0, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <_Z5checkv+0x7ce>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	0a 94       	dec	r0
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <_Z5checkv+0x7ca>
    1910:	80 78       	andi	r24, 0x80	; 128
    1912:	99 27       	eor	r25, r25
    1914:	06 2e       	mov	r0, r22
    1916:	02 c0       	rjmp	.+4      	; 0x191c <_Z5checkv+0x7de>
    1918:	95 95       	asr	r25
    191a:	87 95       	ror	r24
    191c:	0a 94       	dec	r0
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <_Z5checkv+0x7da>
    1920:	90 81       	ld	r25, Z
    1922:	89 2b       	or	r24, r25
    1924:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1926:	2f 5f       	subi	r18, 0xFF	; 255
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	28 30       	cpi	r18, 0x08	; 8
    192c:	31 05       	cpc	r19, r1
    192e:	49 f7       	brne	.-46     	; 0x1902 <_Z5checkv+0x7c4>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1930:	29 81       	ldd	r18, Y+1	; 0x01
    1932:	3a 81       	ldd	r19, Y+2	; 0x02
    1934:	2f 5f       	subi	r18, 0xFF	; 255
    1936:	3f 4f       	sbci	r19, 0xFF	; 255
    1938:	3a 83       	std	Y+2, r19	; 0x02
    193a:	29 83       	std	Y+1, r18	; 0x01
    193c:	28 30       	cpi	r18, 0x08	; 8
    193e:	31 05       	cpc	r19, r1
    1940:	09 f0       	breq	.+2      	; 0x1944 <_Z5checkv+0x806>
    1942:	b5 cf       	rjmp	.-150    	; 0x18ae <_Z5checkv+0x770>
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
    1944:	c0 90 f6 03 	lds	r12, 0x03F6	; 0x8003f6 <passww+0xc>
    1948:	d0 90 f7 03 	lds	r13, 0x03F7	; 0x8003f7 <passww+0xd>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    194c:	1a 82       	std	Y+2, r1	; 0x02
    194e:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1950:	0f 2e       	mov	r0, r31
    1952:	f7 e0       	ldi	r31, 0x07	; 7
    1954:	ef 2e       	mov	r14, r31
    1956:	f1 2c       	mov	r15, r1
    1958:	f0 2d       	mov	r31, r0
    195a:	f8 01       	movw	r30, r16
    195c:	41 91       	ld	r20, Z+
    195e:	8f 01       	movw	r16, r30
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	87 70       	andi	r24, 0x07	; 7
    1968:	90 78       	andi	r25, 0x80	; 128
    196a:	99 23       	and	r25, r25
    196c:	24 f4       	brge	.+8      	; 0x1976 <_Z5checkv+0x838>
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	88 6f       	ori	r24, 0xF8	; 248
    1972:	9f 6f       	ori	r25, 0xFF	; 255
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	b7 01       	movw	r22, r14
    1978:	68 1b       	sub	r22, r24
    197a:	79 0b       	sbc	r23, r25
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	9a 81       	ldd	r25, Y+2	; 0x02
    1980:	99 23       	and	r25, r25
    1982:	0c f4       	brge	.+2      	; 0x1986 <_Z5checkv+0x848>
    1984:	07 96       	adiw	r24, 0x07	; 7
    1986:	fc 01       	movw	r30, r24
    1988:	f5 95       	asr	r31
    198a:	e7 95       	ror	r30
    198c:	f5 95       	asr	r31
    198e:	e7 95       	ror	r30
    1990:	f5 95       	asr	r31
    1992:	e7 95       	ror	r30
    1994:	ea 0f       	add	r30, r26
    1996:	fb 1f       	adc	r31, r27
    1998:	f6 95       	lsr	r31
    199a:	fe 2f       	mov	r31, r30
    199c:	ee 27       	eor	r30, r30
    199e:	f7 95       	ror	r31
    19a0:	e7 95       	ror	r30
    19a2:	ec 0d       	add	r30, r12
    19a4:	fd 1d       	adc	r31, r13
    19a6:	e5 50       	subi	r30, 0x05	; 5
    19a8:	fc 4f       	sbci	r31, 0xFC	; 252
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	ca 01       	movw	r24, r20
    19b0:	02 2e       	mov	r0, r18
    19b2:	02 c0       	rjmp	.+4      	; 0x19b8 <_Z5checkv+0x87a>
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	0a 94       	dec	r0
    19ba:	e2 f7       	brpl	.-8      	; 0x19b4 <_Z5checkv+0x876>
    19bc:	80 78       	andi	r24, 0x80	; 128
    19be:	99 27       	eor	r25, r25
    19c0:	06 2e       	mov	r0, r22
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <_Z5checkv+0x88a>
    19c4:	95 95       	asr	r25
    19c6:	87 95       	ror	r24
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <_Z5checkv+0x886>
    19cc:	90 81       	ld	r25, Z
    19ce:	89 2b       	or	r24, r25
    19d0:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    19d2:	2f 5f       	subi	r18, 0xFF	; 255
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	28 30       	cpi	r18, 0x08	; 8
    19d8:	31 05       	cpc	r19, r1
    19da:	49 f7       	brne	.-46     	; 0x19ae <_Z5checkv+0x870>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    19dc:	29 81       	ldd	r18, Y+1	; 0x01
    19de:	3a 81       	ldd	r19, Y+2	; 0x02
    19e0:	2f 5f       	subi	r18, 0xFF	; 255
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	3a 83       	std	Y+2, r19	; 0x02
    19e6:	29 83       	std	Y+1, r18	; 0x01
    19e8:	28 30       	cpi	r18, 0x08	; 8
    19ea:	31 05       	cpc	r19, r1
    19ec:	09 f0       	breq	.+2      	; 0x19f0 <_Z5checkv+0x8b2>
    19ee:	b5 cf       	rjmp	.-150    	; 0x195a <_Z5checkv+0x81c>
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord+2,1,8,downn);
    19f0:	53 01       	movw	r10, r6
    19f2:	32 e0       	ldi	r19, 0x02	; 2
    19f4:	a3 0e       	add	r10, r19
    19f6:	b1 1c       	adc	r11, r1
    19f8:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <passww>
    19fc:	f0 91 eb 03 	lds	r31, 0x03EB	; 0x8003eb <passww+0x1>
    1a00:	ee 0f       	add	r30, r30
    1a02:	ff 1f       	adc	r31, r31
    1a04:	e2 51       	subi	r30, 0x12	; 18
    1a06:	fc 4f       	sbci	r31, 0xFC	; 252
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	0f 2e       	mov	r0, r31
    1a0e:	f0 e6       	ldi	r31, 0x60	; 96
    1a10:	ef 2e       	mov	r14, r31
    1a12:	f3 e0       	ldi	r31, 0x03	; 3
    1a14:	ff 2e       	mov	r15, r31
    1a16:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1a18:	00 e0       	ldi	r16, 0x00	; 0
    1a1a:	10 e0       	ldi	r17, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1a1c:	0f 2e       	mov	r0, r31
    1a1e:	f7 e0       	ldi	r31, 0x07	; 7
    1a20:	cf 2e       	mov	r12, r31
    1a22:	d1 2c       	mov	r13, r1
    1a24:	f0 2d       	mov	r31, r0
    1a26:	86 2e       	mov	r8, r22
    1a28:	97 2e       	mov	r9, r23
    1a2a:	d7 01       	movw	r26, r14
    1a2c:	4d 91       	ld	r20, X+
    1a2e:	7d 01       	movw	r14, r26
    1a30:	50 e0       	ldi	r21, 0x00	; 0
    1a32:	c8 01       	movw	r24, r16
    1a34:	87 70       	andi	r24, 0x07	; 7
    1a36:	90 78       	andi	r25, 0x80	; 128
    1a38:	99 23       	and	r25, r25
    1a3a:	24 f4       	brge	.+8      	; 0x1a44 <_Z5checkv+0x906>
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	88 6f       	ori	r24, 0xF8	; 248
    1a40:	9f 6f       	ori	r25, 0xFF	; 255
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	d6 01       	movw	r26, r12
    1a46:	a8 1b       	sub	r26, r24
    1a48:	b9 0b       	sbc	r27, r25
    1a4a:	89 82       	std	Y+1, r8	; 0x01
    1a4c:	9a 82       	std	Y+2, r9	; 0x02
    1a4e:	c8 01       	movw	r24, r16
    1a50:	11 23       	and	r17, r17
    1a52:	0c f4       	brge	.+2      	; 0x1a56 <_Z5checkv+0x918>
    1a54:	07 96       	adiw	r24, 0x07	; 7
    1a56:	fc 01       	movw	r30, r24
    1a58:	f5 95       	asr	r31
    1a5a:	e7 95       	ror	r30
    1a5c:	f5 95       	asr	r31
    1a5e:	e7 95       	ror	r30
    1a60:	f5 95       	asr	r31
    1a62:	e7 95       	ror	r30
    1a64:	ea 0d       	add	r30, r10
    1a66:	fb 1d       	adc	r31, r11
    1a68:	f6 95       	lsr	r31
    1a6a:	fe 2f       	mov	r31, r30
    1a6c:	ee 27       	eor	r30, r30
    1a6e:	f7 95       	ror	r31
    1a70:	e7 95       	ror	r30
    1a72:	e6 0f       	add	r30, r22
    1a74:	f7 1f       	adc	r31, r23
    1a76:	e5 50       	subi	r30, 0x05	; 5
    1a78:	fc 4f       	sbci	r31, 0xFC	; 252
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	ca 01       	movw	r24, r20
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <_Z5checkv+0x94a>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <_Z5checkv+0x946>
    1a8c:	80 78       	andi	r24, 0x80	; 128
    1a8e:	99 27       	eor	r25, r25
    1a90:	0a 2e       	mov	r0, r26
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <_Z5checkv+0x95a>
    1a94:	95 95       	asr	r25
    1a96:	87 95       	ror	r24
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <_Z5checkv+0x956>
    1a9c:	90 81       	ld	r25, Z
    1a9e:	89 2b       	or	r24, r25
    1aa0:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1aa2:	2f 5f       	subi	r18, 0xFF	; 255
    1aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa6:	28 30       	cpi	r18, 0x08	; 8
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	49 f7       	brne	.-46     	; 0x1a7e <_Z5checkv+0x940>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1aac:	0f 5f       	subi	r16, 0xFF	; 255
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	08 30       	cpi	r16, 0x08	; 8
    1ab2:	11 05       	cpc	r17, r1
    1ab4:	09 f0       	breq	.+2      	; 0x1ab8 <_Z5checkv+0x97a>
    1ab6:	b9 cf       	rjmp	.-142    	; 0x1a2a <_Z5checkv+0x8ec>
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord+2,1,8,downn);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord-1,1,8,upp);
    1ab8:	53 01       	movw	r10, r6
    1aba:	f1 e0       	ldi	r31, 0x01	; 1
    1abc:	af 1a       	sub	r10, r31
    1abe:	b1 08       	sbc	r11, r1
    1ac0:	0f 2e       	mov	r0, r31
    1ac2:	f8 e6       	ldi	r31, 0x68	; 104
    1ac4:	ef 2e       	mov	r14, r31
    1ac6:	f3 e0       	ldi	r31, 0x03	; 3
    1ac8:	ff 2e       	mov	r15, r31
    1aca:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1acc:	00 e0       	ldi	r16, 0x00	; 0
    1ace:	10 e0       	ldi	r17, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1ad0:	0f 2e       	mov	r0, r31
    1ad2:	f7 e0       	ldi	r31, 0x07	; 7
    1ad4:	cf 2e       	mov	r12, r31
    1ad6:	d1 2c       	mov	r13, r1
    1ad8:	f0 2d       	mov	r31, r0
    1ada:	d7 01       	movw	r26, r14
    1adc:	4d 91       	ld	r20, X+
    1ade:	7d 01       	movw	r14, r26
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	c8 01       	movw	r24, r16
    1ae4:	87 70       	andi	r24, 0x07	; 7
    1ae6:	90 78       	andi	r25, 0x80	; 128
    1ae8:	99 23       	and	r25, r25
    1aea:	24 f4       	brge	.+8      	; 0x1af4 <_Z5checkv+0x9b6>
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	88 6f       	ori	r24, 0xF8	; 248
    1af0:	9f 6f       	ori	r25, 0xFF	; 255
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	d6 01       	movw	r26, r12
    1af6:	a8 1b       	sub	r26, r24
    1af8:	b9 0b       	sbc	r27, r25
    1afa:	c8 01       	movw	r24, r16
    1afc:	11 23       	and	r17, r17
    1afe:	0c f4       	brge	.+2      	; 0x1b02 <_Z5checkv+0x9c4>
    1b00:	07 96       	adiw	r24, 0x07	; 7
    1b02:	fc 01       	movw	r30, r24
    1b04:	f5 95       	asr	r31
    1b06:	e7 95       	ror	r30
    1b08:	f5 95       	asr	r31
    1b0a:	e7 95       	ror	r30
    1b0c:	f5 95       	asr	r31
    1b0e:	e7 95       	ror	r30
    1b10:	ea 0d       	add	r30, r10
    1b12:	fb 1d       	adc	r31, r11
    1b14:	f6 95       	lsr	r31
    1b16:	fe 2f       	mov	r31, r30
    1b18:	ee 27       	eor	r30, r30
    1b1a:	f7 95       	ror	r31
    1b1c:	e7 95       	ror	r30
    1b1e:	29 81       	ldd	r18, Y+1	; 0x01
    1b20:	3a 81       	ldd	r19, Y+2	; 0x02
    1b22:	e2 0f       	add	r30, r18
    1b24:	f3 1f       	adc	r31, r19
    1b26:	e5 50       	subi	r30, 0x05	; 5
    1b28:	fc 4f       	sbci	r31, 0xFC	; 252
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	ca 01       	movw	r24, r20
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <_Z5checkv+0x9fa>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <_Z5checkv+0x9f6>
    1b3c:	80 78       	andi	r24, 0x80	; 128
    1b3e:	99 27       	eor	r25, r25
    1b40:	0a 2e       	mov	r0, r26
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <_Z5checkv+0xa0a>
    1b44:	95 95       	asr	r25
    1b46:	87 95       	ror	r24
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <_Z5checkv+0xa06>
    1b4c:	90 81       	ld	r25, Z
    1b4e:	89 2b       	or	r24, r25
    1b50:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1b52:	2f 5f       	subi	r18, 0xFF	; 255
    1b54:	3f 4f       	sbci	r19, 0xFF	; 255
    1b56:	28 30       	cpi	r18, 0x08	; 8
    1b58:	31 05       	cpc	r19, r1
    1b5a:	49 f7       	brne	.-46     	; 0x1b2e <_Z5checkv+0x9f0>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1b5c:	0f 5f       	subi	r16, 0xFF	; 255
    1b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b60:	08 30       	cpi	r16, 0x08	; 8
    1b62:	11 05       	cpc	r17, r1
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <_Z5checkv+0xa2a>
    1b66:	b9 cf       	rjmp	.-142    	; 0x1ada <_Z5checkv+0x99c>
	}
	
	void up()
	{
		write_default();
		imgnum++;
    1b68:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <passww+0x2>
    1b6c:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <passww+0x3>
    1b70:	01 96       	adiw	r24, 0x01	; 1
		if (imgnum>10) imgnum=0;
    1b72:	8b 30       	cpi	r24, 0x0B	; 11
    1b74:	91 05       	cpc	r25, r1
    1b76:	2c f4       	brge	.+10     	; 0x1b82 <_Z5checkv+0xa44>
	}
	
	void up()
	{
		write_default();
		imgnum++;
    1b78:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <passww+0x3>
    1b7c:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <passww+0x2>
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <_Z5checkv+0xa4c>
		if (imgnum>10) imgnum=0;
    1b82:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <passww+0x3>
    1b86:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <passww+0x2>
		variants(xcoord[pointer],ycoord);
    1b8a:	a3 01       	movw	r20, r6
    1b8c:	8a ee       	ldi	r24, 0xEA	; 234
    1b8e:	93 e0       	ldi	r25, 0x03	; 3
    1b90:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN14password_scene8variantsEii>
    1b94:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,zero);
		if(!pss)passw.up();
		else passww.up();
	}
	else if(!btn0 & btn1 & !btn2 & !btn3 & !btn12 & !btn03)
    1b98:	a5 2f       	mov	r26, r21
    1b9a:	a8 23       	and	r26, r24
    1b9c:	9a 23       	and	r25, r26
    1b9e:	92 23       	and	r25, r18
    1ba0:	79 17       	cp	r23, r25
    1ba2:	08 f0       	brcs	.+2      	; 0x1ba6 <_Z5checkv+0xa68>
    1ba4:	6a c0       	rjmp	.+212    	; 0x1c7a <_Z5checkv+0xb3c>
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	c9 01       	movw	r24, r18
    1bac:	33 23       	and	r19, r19
    1bae:	0c f4       	brge	.+2      	; 0x1bb2 <_Z5checkv+0xa74>
    1bb0:	07 96       	adiw	r24, 0x07	; 7
    1bb2:	95 95       	asr	r25
    1bb4:	87 95       	ror	r24
    1bb6:	95 95       	asr	r25
    1bb8:	87 95       	ror	r24
    1bba:	95 95       	asr	r25
    1bbc:	87 95       	ror	r24
    1bbe:	96 95       	lsr	r25
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	88 27       	eor	r24, r24
    1bc4:	97 95       	ror	r25
    1bc6:	87 95       	ror	r24
    1bc8:	fc 01       	movw	r30, r24
    1bca:	e5 50       	subi	r30, 0x05	; 5
    1bcc:	fc 4f       	sbci	r31, 0xFC	; 252
    1bce:	8d 5f       	subi	r24, 0xFD	; 253
    1bd0:	9b 4f       	sbci	r25, 0xFB	; 251
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    1bd2:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    1bd4:	8e 17       	cp	r24, r30
    1bd6:	9f 07       	cpc	r25, r31
    1bd8:	e1 f7       	brne	.-8      	; 0x1bd2 <_Z5checkv+0xa94>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    1bda:	2f 5f       	subi	r18, 0xFF	; 255
    1bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bde:	28 30       	cpi	r18, 0x08	; 8
    1be0:	31 05       	cpc	r19, r1
    1be2:	19 f7       	brne	.-58     	; 0x1baa <_Z5checkv+0xa6c>
    1be4:	40 ec       	ldi	r20, 0xC0	; 192
    1be6:	53 e0       	ldi	r21, 0x03	; 3
    1be8:	a0 e0       	ldi	r26, 0x00	; 0
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1bec:	07 e0       	ldi	r16, 0x07	; 7
    1bee:	10 e0       	ldi	r17, 0x00	; 0
    1bf0:	5a 83       	std	Y+2, r21	; 0x02
    1bf2:	49 83       	std	Y+1, r20	; 0x01
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	41 91       	ld	r20, Z+
    1bfa:	fa 83       	std	Y+2, r31	; 0x02
    1bfc:	e9 83       	std	Y+1, r30	; 0x01
    1bfe:	50 e0       	ldi	r21, 0x00	; 0
    1c00:	cd 01       	movw	r24, r26
    1c02:	87 70       	andi	r24, 0x07	; 7
    1c04:	90 78       	andi	r25, 0x80	; 128
    1c06:	99 23       	and	r25, r25
    1c08:	24 f4       	brge	.+8      	; 0x1c12 <_Z5checkv+0xad4>
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	88 6f       	ori	r24, 0xF8	; 248
    1c0e:	9f 6f       	ori	r25, 0xFF	; 255
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	b8 01       	movw	r22, r16
    1c14:	68 1b       	sub	r22, r24
    1c16:	79 0b       	sbc	r23, r25
    1c18:	fd 01       	movw	r30, r26
    1c1a:	bb 23       	and	r27, r27
    1c1c:	0c f4       	brge	.+2      	; 0x1c20 <_Z5checkv+0xae2>
    1c1e:	37 96       	adiw	r30, 0x07	; 7
    1c20:	f5 95       	asr	r31
    1c22:	e7 95       	ror	r30
    1c24:	f5 95       	asr	r31
    1c26:	e7 95       	ror	r30
    1c28:	f5 95       	asr	r31
    1c2a:	e7 95       	ror	r30
    1c2c:	f6 95       	lsr	r31
    1c2e:	fe 2f       	mov	r31, r30
    1c30:	ee 27       	eor	r30, r30
    1c32:	f7 95       	ror	r31
    1c34:	e7 95       	ror	r30
    1c36:	e5 50       	subi	r30, 0x05	; 5
    1c38:	fc 4f       	sbci	r31, 0xFC	; 252
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	ca 01       	movw	r24, r20
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <_Z5checkv+0xb0a>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <_Z5checkv+0xb06>
    1c4c:	80 78       	andi	r24, 0x80	; 128
    1c4e:	99 27       	eor	r25, r25
    1c50:	06 2e       	mov	r0, r22
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <_Z5checkv+0xb1a>
    1c54:	95 95       	asr	r25
    1c56:	87 95       	ror	r24
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <_Z5checkv+0xb16>
    1c5c:	90 81       	ld	r25, Z
    1c5e:	89 2b       	or	r24, r25
    1c60:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1c62:	2f 5f       	subi	r18, 0xFF	; 255
    1c64:	3f 4f       	sbci	r19, 0xFF	; 255
    1c66:	28 30       	cpi	r18, 0x08	; 8
    1c68:	31 05       	cpc	r19, r1
    1c6a:	49 f7       	brne	.-46     	; 0x1c3e <_Z5checkv+0xb00>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1c6c:	11 96       	adiw	r26, 0x01	; 1
    1c6e:	a8 30       	cpi	r26, 0x08	; 8
    1c70:	b1 05       	cpc	r27, r1
    1c72:	09 f0       	breq	.+2      	; 0x1c76 <_Z5checkv+0xb38>
    1c74:	bf cf       	rjmp	.-130    	; 0x1bf4 <_Z5checkv+0xab6>
    1c76:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
    1c7a:	4f 23       	and	r20, r31
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,one);
		
	}
	else if(!btn0 & !btn1 & btn2 & !btn3 & !btn12 & !btn03)
    1c7c:	93 2f       	mov	r25, r19
    1c7e:	98 23       	and	r25, r24
    1c80:	94 23       	and	r25, r20
    1c82:	92 23       	and	r25, r18
    1c84:	79 17       	cp	r23, r25
    1c86:	08 f0       	brcs	.+2      	; 0x1c8a <_Z5checkv+0xb4c>
    1c88:	6a c0       	rjmp	.+212    	; 0x1d5e <_Z5checkv+0xc20>
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	c9 01       	movw	r24, r18
    1c90:	33 23       	and	r19, r19
    1c92:	0c f4       	brge	.+2      	; 0x1c96 <_Z5checkv+0xb58>
    1c94:	07 96       	adiw	r24, 0x07	; 7
    1c96:	95 95       	asr	r25
    1c98:	87 95       	ror	r24
    1c9a:	95 95       	asr	r25
    1c9c:	87 95       	ror	r24
    1c9e:	95 95       	asr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	96 95       	lsr	r25
    1ca4:	98 2f       	mov	r25, r24
    1ca6:	88 27       	eor	r24, r24
    1ca8:	97 95       	ror	r25
    1caa:	87 95       	ror	r24
    1cac:	fc 01       	movw	r30, r24
    1cae:	e5 50       	subi	r30, 0x05	; 5
    1cb0:	fc 4f       	sbci	r31, 0xFC	; 252
    1cb2:	8d 5f       	subi	r24, 0xFD	; 253
    1cb4:	9b 4f       	sbci	r25, 0xFB	; 251
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    1cb6:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    1cb8:	e8 17       	cp	r30, r24
    1cba:	f9 07       	cpc	r31, r25
    1cbc:	e1 f7       	brne	.-8      	; 0x1cb6 <_Z5checkv+0xb78>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    1cbe:	2f 5f       	subi	r18, 0xFF	; 255
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	28 30       	cpi	r18, 0x08	; 8
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	19 f7       	brne	.-58     	; 0x1c8e <_Z5checkv+0xb50>
    1cc8:	08 eb       	ldi	r16, 0xB8	; 184
    1cca:	13 e0       	ldi	r17, 0x03	; 3
    1ccc:	1a 83       	std	Y+2, r17	; 0x02
    1cce:	09 83       	std	Y+1, r16	; 0x01
    1cd0:	a0 e0       	ldi	r26, 0x00	; 0
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1cd4:	07 e0       	ldi	r16, 0x07	; 7
    1cd6:	10 e0       	ldi	r17, 0x00	; 0
    1cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cda:	fa 81       	ldd	r31, Y+2	; 0x02
    1cdc:	41 91       	ld	r20, Z+
    1cde:	fa 83       	std	Y+2, r31	; 0x02
    1ce0:	e9 83       	std	Y+1, r30	; 0x01
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	87 70       	andi	r24, 0x07	; 7
    1ce8:	90 78       	andi	r25, 0x80	; 128
    1cea:	99 23       	and	r25, r25
    1cec:	24 f4       	brge	.+8      	; 0x1cf6 <_Z5checkv+0xbb8>
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	88 6f       	ori	r24, 0xF8	; 248
    1cf2:	9f 6f       	ori	r25, 0xFF	; 255
    1cf4:	01 96       	adiw	r24, 0x01	; 1
    1cf6:	b8 01       	movw	r22, r16
    1cf8:	68 1b       	sub	r22, r24
    1cfa:	79 0b       	sbc	r23, r25
    1cfc:	fd 01       	movw	r30, r26
    1cfe:	bb 23       	and	r27, r27
    1d00:	0c f4       	brge	.+2      	; 0x1d04 <_Z5checkv+0xbc6>
    1d02:	37 96       	adiw	r30, 0x07	; 7
    1d04:	f5 95       	asr	r31
    1d06:	e7 95       	ror	r30
    1d08:	f5 95       	asr	r31
    1d0a:	e7 95       	ror	r30
    1d0c:	f5 95       	asr	r31
    1d0e:	e7 95       	ror	r30
    1d10:	f6 95       	lsr	r31
    1d12:	fe 2f       	mov	r31, r30
    1d14:	ee 27       	eor	r30, r30
    1d16:	f7 95       	ror	r31
    1d18:	e7 95       	ror	r30
    1d1a:	e5 50       	subi	r30, 0x05	; 5
    1d1c:	fc 4f       	sbci	r31, 0xFC	; 252
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	ca 01       	movw	r24, r20
    1d24:	02 2e       	mov	r0, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <_Z5checkv+0xbee>
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	0a 94       	dec	r0
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <_Z5checkv+0xbea>
    1d30:	80 78       	andi	r24, 0x80	; 128
    1d32:	99 27       	eor	r25, r25
    1d34:	06 2e       	mov	r0, r22
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <_Z5checkv+0xbfe>
    1d38:	95 95       	asr	r25
    1d3a:	87 95       	ror	r24
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <_Z5checkv+0xbfa>
    1d40:	90 81       	ld	r25, Z
    1d42:	89 2b       	or	r24, r25
    1d44:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1d46:	2f 5f       	subi	r18, 0xFF	; 255
    1d48:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4a:	28 30       	cpi	r18, 0x08	; 8
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	49 f7       	brne	.-46     	; 0x1d22 <_Z5checkv+0xbe4>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1d50:	11 96       	adiw	r26, 0x01	; 1
    1d52:	a8 30       	cpi	r26, 0x08	; 8
    1d54:	b1 05       	cpc	r27, r1
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <_Z5checkv+0xc1c>
    1d58:	bf cf       	rjmp	.-130    	; 0x1cd8 <_Z5checkv+0xb9a>
    1d5a:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,two);
		
	}
	else if(!btn0 & !btn1 & !btn2 & btn3 & !btn12 & !btn03)
    1d5e:	95 2f       	mov	r25, r21
    1d60:	96 23       	and	r25, r22
    1d62:	49 23       	and	r20, r25
    1d64:	94 2f       	mov	r25, r20
    1d66:	92 23       	and	r25, r18
    1d68:	79 17       	cp	r23, r25
    1d6a:	08 f0       	brcs	.+2      	; 0x1d6e <_Z5checkv+0xc30>
    1d6c:	e3 c4       	rjmp	.+2502   	; 0x2734 <_Z5checkv+0x15f6>
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	c9 01       	movw	r24, r18
    1d74:	33 23       	and	r19, r19
    1d76:	0c f4       	brge	.+2      	; 0x1d7a <_Z5checkv+0xc3c>
    1d78:	07 96       	adiw	r24, 0x07	; 7
    1d7a:	95 95       	asr	r25
    1d7c:	87 95       	ror	r24
    1d7e:	95 95       	asr	r25
    1d80:	87 95       	ror	r24
    1d82:	95 95       	asr	r25
    1d84:	87 95       	ror	r24
    1d86:	96 95       	lsr	r25
    1d88:	98 2f       	mov	r25, r24
    1d8a:	88 27       	eor	r24, r24
    1d8c:	97 95       	ror	r25
    1d8e:	87 95       	ror	r24
    1d90:	fc 01       	movw	r30, r24
    1d92:	e5 50       	subi	r30, 0x05	; 5
    1d94:	fc 4f       	sbci	r31, 0xFC	; 252
    1d96:	8d 5f       	subi	r24, 0xFD	; 253
    1d98:	9b 4f       	sbci	r25, 0xFB	; 251
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    1d9a:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    1d9c:	e8 17       	cp	r30, r24
    1d9e:	f9 07       	cpc	r31, r25
    1da0:	e1 f7       	brne	.-8      	; 0x1d9a <_Z5checkv+0xc5c>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    1da2:	2f 5f       	subi	r18, 0xFF	; 255
    1da4:	3f 4f       	sbci	r19, 0xFF	; 255
    1da6:	28 30       	cpi	r18, 0x08	; 8
    1da8:	31 05       	cpc	r19, r1
    1daa:	19 f7       	brne	.-58     	; 0x1d72 <_Z5checkv+0xc34>
    1dac:	00 eb       	ldi	r16, 0xB0	; 176
    1dae:	13 e0       	ldi	r17, 0x03	; 3
    1db0:	1a 83       	std	Y+2, r17	; 0x02
    1db2:	09 83       	std	Y+1, r16	; 0x01
    1db4:	a0 e0       	ldi	r26, 0x00	; 0
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1db8:	07 e0       	ldi	r16, 0x07	; 7
    1dba:	10 e0       	ldi	r17, 0x00	; 0
    1dbc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbe:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc0:	41 91       	ld	r20, Z+
    1dc2:	fa 83       	std	Y+2, r31	; 0x02
    1dc4:	e9 83       	std	Y+1, r30	; 0x01
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	cd 01       	movw	r24, r26
    1dca:	87 70       	andi	r24, 0x07	; 7
    1dcc:	90 78       	andi	r25, 0x80	; 128
    1dce:	99 23       	and	r25, r25
    1dd0:	24 f4       	brge	.+8      	; 0x1dda <_Z5checkv+0xc9c>
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	88 6f       	ori	r24, 0xF8	; 248
    1dd6:	9f 6f       	ori	r25, 0xFF	; 255
    1dd8:	01 96       	adiw	r24, 0x01	; 1
    1dda:	b8 01       	movw	r22, r16
    1ddc:	68 1b       	sub	r22, r24
    1dde:	79 0b       	sbc	r23, r25
    1de0:	fd 01       	movw	r30, r26
    1de2:	bb 23       	and	r27, r27
    1de4:	0c f4       	brge	.+2      	; 0x1de8 <_Z5checkv+0xcaa>
    1de6:	37 96       	adiw	r30, 0x07	; 7
    1de8:	f5 95       	asr	r31
    1dea:	e7 95       	ror	r30
    1dec:	f5 95       	asr	r31
    1dee:	e7 95       	ror	r30
    1df0:	f5 95       	asr	r31
    1df2:	e7 95       	ror	r30
    1df4:	f6 95       	lsr	r31
    1df6:	fe 2f       	mov	r31, r30
    1df8:	ee 27       	eor	r30, r30
    1dfa:	f7 95       	ror	r31
    1dfc:	e7 95       	ror	r30
    1dfe:	e5 50       	subi	r30, 0x05	; 5
    1e00:	fc 4f       	sbci	r31, 0xFC	; 252
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	ca 01       	movw	r24, r20
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <_Z5checkv+0xcd2>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <_Z5checkv+0xcce>
    1e14:	80 78       	andi	r24, 0x80	; 128
    1e16:	99 27       	eor	r25, r25
    1e18:	06 2e       	mov	r0, r22
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <_Z5checkv+0xce2>
    1e1c:	95 95       	asr	r25
    1e1e:	87 95       	ror	r24
    1e20:	0a 94       	dec	r0
    1e22:	e2 f7       	brpl	.-8      	; 0x1e1c <_Z5checkv+0xcde>
    1e24:	90 81       	ld	r25, Z
    1e26:	89 2b       	or	r24, r25
    1e28:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1e2a:	2f 5f       	subi	r18, 0xFF	; 255
    1e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e2e:	28 30       	cpi	r18, 0x08	; 8
    1e30:	31 05       	cpc	r19, r1
    1e32:	49 f7       	brne	.-46     	; 0x1e06 <_Z5checkv+0xcc8>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1e34:	11 96       	adiw	r26, 0x01	; 1
    1e36:	a8 30       	cpi	r26, 0x08	; 8
    1e38:	b1 05       	cpc	r27, r1
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <_Z5checkv+0xd00>
    1e3c:	bf cf       	rjmp	.-130    	; 0x1dbc <_Z5checkv+0xc7e>
	}
	else if(!btn0 & !btn1 & !btn2 & btn3 & !btn12 & !btn03)
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,three);
		if(!pss)passw.down();
    1e3e:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <pss>
    1e42:	81 11       	cpse	r24, r1
    1e44:	de c1       	rjmp	.+956    	; 0x2202 <_Z5checkv+0x10c4>
		variants(xcoord,ycoord);
	}
	
	void down()
	{
		imgnum--;
    1e46:	e2 ee       	ldi	r30, 0xE2	; 226
    1e48:	f3 e0       	ldi	r31, 0x03	; 3
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	93 83       	std	Z+3, r25	; 0x03
    1e52:	82 83       	std	Z+2, r24	; 0x02
		if (imgnum<0) imgnum=2;
    1e54:	99 23       	and	r25, r25
    1e56:	14 f0       	brlt	.+4      	; 0x1e5c <_Z5checkv+0xd1e>
    1e58:	0c 94 02 22 	jmp	0x4404	; 0x4404 <__stack+0x305>
    1e5c:	82 e0       	ldi	r24, 0x02	; 2
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	93 83       	std	Z+3, r25	; 0x03
    1e62:	82 83       	std	Z+2, r24	; 0x02
		variants(xcoord,ycoord);
    1e64:	a6 81       	ldd	r26, Z+6	; 0x06
    1e66:	b7 81       	ldd	r27, Z+7	; 0x07
    1e68:	24 81       	ldd	r18, Z+4	; 0x04
    1e6a:	35 81       	ldd	r19, Z+5	; 0x05
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	02 2f       	mov	r16, r18
    1e72:	13 2f       	mov	r17, r19
    1e74:	a9 01       	movw	r20, r18
    1e76:	40 5e       	subi	r20, 0xE0	; 224
    1e78:	5f 4f       	sbci	r21, 0xFF	; 255
    1e7a:	5a 83       	std	Y+2, r21	; 0x02
    1e7c:	49 83       	std	Y+1, r20	; 0x01
    1e7e:	31 c1       	rjmp	.+610    	; 0x20e2 <_Z5checkv+0xfa4>
		}
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	02 2f       	mov	r16, r18
    1e86:	13 2f       	mov	r17, r19
    1e88:	c9 01       	movw	r24, r18
    1e8a:	80 96       	adiw	r24, 0x20	; 32
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	cb 01       	movw	r24, r22
    1e92:	77 23       	and	r23, r23
    1e94:	0c f4       	brge	.+2      	; 0x1e98 <_Z5checkv+0xd5a>
    1e96:	07 96       	adiw	r24, 0x07	; 7
    1e98:	95 95       	asr	r25
    1e9a:	87 95       	ror	r24
    1e9c:	95 95       	asr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	95 95       	asr	r25
    1ea2:	87 95       	ror	r24
    1ea4:	8a 0f       	add	r24, r26
    1ea6:	9b 1f       	adc	r25, r27
    1ea8:	96 95       	lsr	r25
    1eaa:	98 2f       	mov	r25, r24
    1eac:	88 27       	eor	r24, r24
    1eae:	97 95       	ror	r25
    1eb0:	87 95       	ror	r24
    1eb2:	80 2e       	mov	r8, r16
    1eb4:	91 2e       	mov	r9, r17
    1eb6:	f9 01       	movw	r30, r18
    1eb8:	e8 0f       	add	r30, r24
    1eba:	f9 1f       	adc	r31, r25
    1ebc:	e5 50       	subi	r30, 0x05	; 5
    1ebe:	fc 4f       	sbci	r31, 0xFC	; 252
    1ec0:	49 81       	ldd	r20, Y+1	; 0x01
    1ec2:	5a 81       	ldd	r21, Y+2	; 0x02
    1ec4:	84 0f       	add	r24, r20
    1ec6:	95 1f       	adc	r25, r21
    1ec8:	ac 01       	movw	r20, r24
    1eca:	45 50       	subi	r20, 0x05	; 5
    1ecc:	5c 4f       	sbci	r21, 0xFC	; 252
    1ece:	cf 01       	movw	r24, r30
    1ed0:	08 96       	adiw	r24, 0x08	; 8
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    1ed2:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    1ed4:	8e 17       	cp	r24, r30
    1ed6:	9f 07       	cpc	r25, r31
    1ed8:	e1 f7       	brne	.-8      	; 0x1ed2 <_Z5checkv+0xd94>
    1eda:	fc 01       	movw	r30, r24
void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
    1edc:	84 17       	cp	r24, r20
    1ede:	95 07       	cpc	r25, r21
    1ee0:	b1 f7       	brne	.-20     	; 0x1ece <_Z5checkv+0xd90>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    1ee2:	6f 5f       	subi	r22, 0xFF	; 255
    1ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee6:	60 32       	cpi	r22, 0x20	; 32
    1ee8:	71 05       	cpc	r23, r1
    1eea:	91 f6       	brne	.-92     	; 0x1e90 <_Z5checkv+0xd52>
    1eec:	04 ed       	ldi	r16, 0xD4	; 212
    1eee:	12 e0       	ldi	r17, 0x02	; 2
    1ef0:	1a 82       	std	Y+2, r1	; 0x02
    1ef2:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1ef4:	0f 2e       	mov	r0, r31
    1ef6:	f7 e0       	ldi	r31, 0x07	; 7
    1ef8:	cf 2e       	mov	r12, r31
    1efa:	d1 2c       	mov	r13, r1
    1efc:	f0 2d       	mov	r31, r0
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	9a 81       	ldd	r25, Y+2	; 0x02
    1f02:	87 70       	andi	r24, 0x07	; 7
    1f04:	90 78       	andi	r25, 0x80	; 128
    1f06:	99 23       	and	r25, r25
    1f08:	24 f4       	brge	.+8      	; 0x1f12 <_Z5checkv+0xdd4>
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	88 6f       	ori	r24, 0xF8	; 248
    1f0e:	9f 6f       	ori	r25, 0xFF	; 255
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	76 01       	movw	r14, r12
    1f14:	e8 1a       	sub	r14, r24
    1f16:	f9 0a       	sbc	r15, r25
    1f18:	58 01       	movw	r10, r16
    1f1a:	94 e0       	ldi	r25, 0x04	; 4
    1f1c:	a9 1a       	sub	r10, r25
    1f1e:	b1 08       	sbc	r11, r1
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	99 23       	and	r25, r25
    1f26:	0c f4       	brge	.+2      	; 0x1f2a <_Z5checkv+0xdec>
    1f28:	07 96       	adiw	r24, 0x07	; 7
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	75 95       	asr	r23
    1f2e:	67 95       	ror	r22
    1f30:	75 95       	asr	r23
    1f32:	67 95       	ror	r22
    1f34:	75 95       	asr	r23
    1f36:	67 95       	ror	r22
    1f38:	6a 0f       	add	r22, r26
    1f3a:	7b 1f       	adc	r23, r27
    1f3c:	76 95       	lsr	r23
    1f3e:	76 2f       	mov	r23, r22
    1f40:	66 27       	eor	r22, r22
    1f42:	77 95       	ror	r23
    1f44:	67 95       	ror	r22
    1f46:	68 0d       	add	r22, r8
    1f48:	79 1d       	adc	r23, r9
    1f4a:	65 50       	subi	r22, 0x05	; 5
    1f4c:	7c 4f       	sbci	r23, 0xFC	; 252
    1f4e:	f5 01       	movw	r30, r10
    1f50:	41 91       	ld	r20, Z+
    1f52:	5f 01       	movw	r10, r30
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	fb 01       	movw	r30, r22
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	ca 01       	movw	r24, r20
    1f5e:	02 2e       	mov	r0, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <_Z5checkv+0xe28>
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	0a 94       	dec	r0
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <_Z5checkv+0xe24>
    1f6a:	80 78       	andi	r24, 0x80	; 128
    1f6c:	99 27       	eor	r25, r25
    1f6e:	0e 2c       	mov	r0, r14
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <_Z5checkv+0xe38>
    1f72:	95 95       	asr	r25
    1f74:	87 95       	ror	r24
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <_Z5checkv+0xe34>
    1f7a:	90 81       	ld	r25, Z
    1f7c:	89 2b       	or	r24, r25
    1f7e:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1f80:	2f 5f       	subi	r18, 0xFF	; 255
    1f82:	3f 4f       	sbci	r19, 0xFF	; 255
    1f84:	28 30       	cpi	r18, 0x08	; 8
    1f86:	31 05       	cpc	r19, r1
    1f88:	49 f7       	brne	.-46     	; 0x1f5c <_Z5checkv+0xe1e>
    1f8a:	68 5f       	subi	r22, 0xF8	; 248
    1f8c:	7f 4f       	sbci	r23, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    1f8e:	a0 16       	cp	r10, r16
    1f90:	b1 06       	cpc	r11, r17
    1f92:	e9 f6       	brne	.-70     	; 0x1f4e <_Z5checkv+0xe10>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1f94:	29 81       	ldd	r18, Y+1	; 0x01
    1f96:	3a 81       	ldd	r19, Y+2	; 0x02
    1f98:	2f 5f       	subi	r18, 0xFF	; 255
    1f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9c:	3a 83       	std	Y+2, r19	; 0x02
    1f9e:	29 83       	std	Y+1, r18	; 0x01
    1fa0:	0c 5f       	subi	r16, 0xFC	; 252
    1fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa4:	20 32       	cpi	r18, 0x20	; 32
    1fa6:	31 05       	cpc	r19, r1
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <_Z5checkv+0xe6e>
    1faa:	a9 cf       	rjmp	.-174    	; 0x1efe <_Z5checkv+0xdc0>
    1fac:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
		}
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	02 2f       	mov	r16, r18
    1fb6:	13 2f       	mov	r17, r19
    1fb8:	a9 01       	movw	r20, r18
    1fba:	40 5e       	subi	r20, 0xE0	; 224
    1fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fbe:	5a 83       	std	Y+2, r21	; 0x02
    1fc0:	49 83       	std	Y+1, r20	; 0x01
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	77 23       	and	r23, r23
    1fc6:	0c f4       	brge	.+2      	; 0x1fca <_Z5checkv+0xe8c>
    1fc8:	07 96       	adiw	r24, 0x07	; 7
    1fca:	95 95       	asr	r25
    1fcc:	87 95       	ror	r24
    1fce:	95 95       	asr	r25
    1fd0:	87 95       	ror	r24
    1fd2:	95 95       	asr	r25
    1fd4:	87 95       	ror	r24
    1fd6:	8a 0f       	add	r24, r26
    1fd8:	9b 1f       	adc	r25, r27
    1fda:	96 95       	lsr	r25
    1fdc:	98 2f       	mov	r25, r24
    1fde:	88 27       	eor	r24, r24
    1fe0:	97 95       	ror	r25
    1fe2:	87 95       	ror	r24
    1fe4:	80 2e       	mov	r8, r16
    1fe6:	91 2e       	mov	r9, r17
    1fe8:	f9 01       	movw	r30, r18
    1fea:	e8 0f       	add	r30, r24
    1fec:	f9 1f       	adc	r31, r25
    1fee:	e5 50       	subi	r30, 0x05	; 5
    1ff0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ff2:	49 81       	ldd	r20, Y+1	; 0x01
    1ff4:	5a 81       	ldd	r21, Y+2	; 0x02
    1ff6:	84 0f       	add	r24, r20
    1ff8:	95 1f       	adc	r25, r21
    1ffa:	ac 01       	movw	r20, r24
    1ffc:	45 50       	subi	r20, 0x05	; 5
    1ffe:	5c 4f       	sbci	r21, 0xFC	; 252
    2000:	cf 01       	movw	r24, r30
    2002:	08 96       	adiw	r24, 0x08	; 8
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    2004:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    2006:	8e 17       	cp	r24, r30
    2008:	9f 07       	cpc	r25, r31
    200a:	e1 f7       	brne	.-8      	; 0x2004 <_Z5checkv+0xec6>
    200c:	fc 01       	movw	r30, r24
void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
    200e:	48 17       	cp	r20, r24
    2010:	59 07       	cpc	r21, r25
    2012:	b1 f7       	brne	.-20     	; 0x2000 <_Z5checkv+0xec2>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    2014:	6f 5f       	subi	r22, 0xFF	; 255
    2016:	7f 4f       	sbci	r23, 0xFF	; 255
    2018:	60 32       	cpi	r22, 0x20	; 32
    201a:	71 05       	cpc	r23, r1
    201c:	91 f6       	brne	.-92     	; 0x1fc2 <_Z5checkv+0xe84>
    201e:	04 e5       	ldi	r16, 0x54	; 84
    2020:	12 e0       	ldi	r17, 0x02	; 2
    2022:	1a 82       	std	Y+2, r1	; 0x02
    2024:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2026:	0f 2e       	mov	r0, r31
    2028:	f7 e0       	ldi	r31, 0x07	; 7
    202a:	cf 2e       	mov	r12, r31
    202c:	d1 2c       	mov	r13, r1
    202e:	f0 2d       	mov	r31, r0
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	87 70       	andi	r24, 0x07	; 7
    2036:	90 78       	andi	r25, 0x80	; 128
    2038:	99 23       	and	r25, r25
    203a:	24 f4       	brge	.+8      	; 0x2044 <_Z5checkv+0xf06>
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	88 6f       	ori	r24, 0xF8	; 248
    2040:	9f 6f       	ori	r25, 0xFF	; 255
    2042:	01 96       	adiw	r24, 0x01	; 1
    2044:	76 01       	movw	r14, r12
    2046:	e8 1a       	sub	r14, r24
    2048:	f9 0a       	sbc	r15, r25
    204a:	58 01       	movw	r10, r16
    204c:	94 e0       	ldi	r25, 0x04	; 4
    204e:	a9 1a       	sub	r10, r25
    2050:	b1 08       	sbc	r11, r1
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	99 23       	and	r25, r25
    2058:	0c f4       	brge	.+2      	; 0x205c <_Z5checkv+0xf1e>
    205a:	07 96       	adiw	r24, 0x07	; 7
    205c:	bc 01       	movw	r22, r24
    205e:	75 95       	asr	r23
    2060:	67 95       	ror	r22
    2062:	75 95       	asr	r23
    2064:	67 95       	ror	r22
    2066:	75 95       	asr	r23
    2068:	67 95       	ror	r22
    206a:	6a 0f       	add	r22, r26
    206c:	7b 1f       	adc	r23, r27
    206e:	76 95       	lsr	r23
    2070:	76 2f       	mov	r23, r22
    2072:	66 27       	eor	r22, r22
    2074:	77 95       	ror	r23
    2076:	67 95       	ror	r22
    2078:	68 0d       	add	r22, r8
    207a:	79 1d       	adc	r23, r9
    207c:	65 50       	subi	r22, 0x05	; 5
    207e:	7c 4f       	sbci	r23, 0xFC	; 252
    2080:	f5 01       	movw	r30, r10
    2082:	41 91       	ld	r20, Z+
    2084:	5f 01       	movw	r10, r30
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	fb 01       	movw	r30, r22
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	ca 01       	movw	r24, r20
    2090:	02 2e       	mov	r0, r18
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <_Z5checkv+0xf5a>
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	0a 94       	dec	r0
    209a:	e2 f7       	brpl	.-8      	; 0x2094 <_Z5checkv+0xf56>
    209c:	80 78       	andi	r24, 0x80	; 128
    209e:	99 27       	eor	r25, r25
    20a0:	0e 2c       	mov	r0, r14
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <_Z5checkv+0xf6a>
    20a4:	95 95       	asr	r25
    20a6:	87 95       	ror	r24
    20a8:	0a 94       	dec	r0
    20aa:	e2 f7       	brpl	.-8      	; 0x20a4 <_Z5checkv+0xf66>
    20ac:	90 81       	ld	r25, Z
    20ae:	89 2b       	or	r24, r25
    20b0:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    20b2:	2f 5f       	subi	r18, 0xFF	; 255
    20b4:	3f 4f       	sbci	r19, 0xFF	; 255
    20b6:	28 30       	cpi	r18, 0x08	; 8
    20b8:	31 05       	cpc	r19, r1
    20ba:	49 f7       	brne	.-46     	; 0x208e <_Z5checkv+0xf50>
    20bc:	68 5f       	subi	r22, 0xF8	; 248
    20be:	7f 4f       	sbci	r23, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    20c0:	a0 16       	cp	r10, r16
    20c2:	b1 06       	cpc	r11, r17
    20c4:	e9 f6       	brne	.-70     	; 0x2080 <_Z5checkv+0xf42>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    20c6:	29 81       	ldd	r18, Y+1	; 0x01
    20c8:	3a 81       	ldd	r19, Y+2	; 0x02
    20ca:	2f 5f       	subi	r18, 0xFF	; 255
    20cc:	3f 4f       	sbci	r19, 0xFF	; 255
    20ce:	3a 83       	std	Y+2, r19	; 0x02
    20d0:	29 83       	std	Y+1, r18	; 0x01
    20d2:	0c 5f       	subi	r16, 0xFC	; 252
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	20 32       	cpi	r18, 0x20	; 32
    20d8:	31 05       	cpc	r19, r1
    20da:	09 f0       	breq	.+2      	; 0x20de <_Z5checkv+0xfa0>
    20dc:	a9 cf       	rjmp	.-174    	; 0x2030 <_Z5checkv+0xef2>
    20de:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
    20e2:	cb 01       	movw	r24, r22
    20e4:	77 23       	and	r23, r23
    20e6:	0c f4       	brge	.+2      	; 0x20ea <_Z5checkv+0xfac>
    20e8:	07 96       	adiw	r24, 0x07	; 7
    20ea:	95 95       	asr	r25
    20ec:	87 95       	ror	r24
    20ee:	95 95       	asr	r25
    20f0:	87 95       	ror	r24
    20f2:	95 95       	asr	r25
    20f4:	87 95       	ror	r24
    20f6:	8a 0f       	add	r24, r26
    20f8:	9b 1f       	adc	r25, r27
    20fa:	96 95       	lsr	r25
    20fc:	98 2f       	mov	r25, r24
    20fe:	88 27       	eor	r24, r24
    2100:	97 95       	ror	r25
    2102:	87 95       	ror	r24
    2104:	80 2e       	mov	r8, r16
    2106:	91 2e       	mov	r9, r17
    2108:	f9 01       	movw	r30, r18
    210a:	e8 0f       	add	r30, r24
    210c:	f9 1f       	adc	r31, r25
    210e:	e5 50       	subi	r30, 0x05	; 5
    2110:	fc 4f       	sbci	r31, 0xFC	; 252
    2112:	49 81       	ldd	r20, Y+1	; 0x01
    2114:	5a 81       	ldd	r21, Y+2	; 0x02
    2116:	84 0f       	add	r24, r20
    2118:	95 1f       	adc	r25, r21
    211a:	ac 01       	movw	r20, r24
    211c:	45 50       	subi	r20, 0x05	; 5
    211e:	5c 4f       	sbci	r21, 0xFC	; 252
    2120:	cf 01       	movw	r24, r30
    2122:	08 96       	adiw	r24, 0x08	; 8
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    2124:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    2126:	e8 17       	cp	r30, r24
    2128:	f9 07       	cpc	r31, r25
    212a:	e1 f7       	brne	.-8      	; 0x2124 <_Z5checkv+0xfe6>
    212c:	fc 01       	movw	r30, r24
void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
    212e:	48 17       	cp	r20, r24
    2130:	59 07       	cpc	r21, r25
    2132:	b1 f7       	brne	.-20     	; 0x2120 <_Z5checkv+0xfe2>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    2134:	6f 5f       	subi	r22, 0xFF	; 255
    2136:	7f 4f       	sbci	r23, 0xFF	; 255
    2138:	60 32       	cpi	r22, 0x20	; 32
    213a:	71 05       	cpc	r23, r1
    213c:	91 f6       	brne	.-92     	; 0x20e2 <_Z5checkv+0xfa4>
    213e:	04 ec       	ldi	r16, 0xC4	; 196
    2140:	11 e0       	ldi	r17, 0x01	; 1
    2142:	1a 82       	std	Y+2, r1	; 0x02
    2144:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2146:	0f 2e       	mov	r0, r31
    2148:	f7 e0       	ldi	r31, 0x07	; 7
    214a:	cf 2e       	mov	r12, r31
    214c:	d1 2c       	mov	r13, r1
    214e:	f0 2d       	mov	r31, r0
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	9a 81       	ldd	r25, Y+2	; 0x02
    2154:	87 70       	andi	r24, 0x07	; 7
    2156:	90 78       	andi	r25, 0x80	; 128
    2158:	99 23       	and	r25, r25
    215a:	24 f4       	brge	.+8      	; 0x2164 <_Z5checkv+0x1026>
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	88 6f       	ori	r24, 0xF8	; 248
    2160:	9f 6f       	ori	r25, 0xFF	; 255
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	76 01       	movw	r14, r12
    2166:	e8 1a       	sub	r14, r24
    2168:	f9 0a       	sbc	r15, r25
    216a:	58 01       	movw	r10, r16
    216c:	94 e0       	ldi	r25, 0x04	; 4
    216e:	a9 1a       	sub	r10, r25
    2170:	b1 08       	sbc	r11, r1
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	9a 81       	ldd	r25, Y+2	; 0x02
    2176:	99 23       	and	r25, r25
    2178:	0c f4       	brge	.+2      	; 0x217c <_Z5checkv+0x103e>
    217a:	07 96       	adiw	r24, 0x07	; 7
    217c:	bc 01       	movw	r22, r24
    217e:	75 95       	asr	r23
    2180:	67 95       	ror	r22
    2182:	75 95       	asr	r23
    2184:	67 95       	ror	r22
    2186:	75 95       	asr	r23
    2188:	67 95       	ror	r22
    218a:	6a 0f       	add	r22, r26
    218c:	7b 1f       	adc	r23, r27
    218e:	76 95       	lsr	r23
    2190:	76 2f       	mov	r23, r22
    2192:	66 27       	eor	r22, r22
    2194:	77 95       	ror	r23
    2196:	67 95       	ror	r22
    2198:	68 0d       	add	r22, r8
    219a:	79 1d       	adc	r23, r9
    219c:	65 50       	subi	r22, 0x05	; 5
    219e:	7c 4f       	sbci	r23, 0xFC	; 252
    21a0:	f5 01       	movw	r30, r10
    21a2:	41 91       	ld	r20, Z+
    21a4:	5f 01       	movw	r10, r30
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	fb 01       	movw	r30, r22
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	ca 01       	movw	r24, r20
    21b0:	02 2e       	mov	r0, r18
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <_Z5checkv+0x107a>
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	0a 94       	dec	r0
    21ba:	e2 f7       	brpl	.-8      	; 0x21b4 <_Z5checkv+0x1076>
    21bc:	80 78       	andi	r24, 0x80	; 128
    21be:	99 27       	eor	r25, r25
    21c0:	0e 2c       	mov	r0, r14
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <_Z5checkv+0x108a>
    21c4:	95 95       	asr	r25
    21c6:	87 95       	ror	r24
    21c8:	0a 94       	dec	r0
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <_Z5checkv+0x1086>
    21cc:	90 81       	ld	r25, Z
    21ce:	89 2b       	or	r24, r25
    21d0:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    21d2:	2f 5f       	subi	r18, 0xFF	; 255
    21d4:	3f 4f       	sbci	r19, 0xFF	; 255
    21d6:	28 30       	cpi	r18, 0x08	; 8
    21d8:	31 05       	cpc	r19, r1
    21da:	49 f7       	brne	.-46     	; 0x21ae <_Z5checkv+0x1070>
    21dc:	68 5f       	subi	r22, 0xF8	; 248
    21de:	7f 4f       	sbci	r23, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    21e0:	a0 16       	cp	r10, r16
    21e2:	b1 06       	cpc	r11, r17
    21e4:	e9 f6       	brne	.-70     	; 0x21a0 <_Z5checkv+0x1062>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    21e6:	29 81       	ldd	r18, Y+1	; 0x01
    21e8:	3a 81       	ldd	r19, Y+2	; 0x02
    21ea:	2f 5f       	subi	r18, 0xFF	; 255
    21ec:	3f 4f       	sbci	r19, 0xFF	; 255
    21ee:	3a 83       	std	Y+2, r19	; 0x02
    21f0:	29 83       	std	Y+1, r18	; 0x01
    21f2:	0c 5f       	subi	r16, 0xFC	; 252
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	20 32       	cpi	r18, 0x20	; 32
    21f8:	31 05       	cpc	r19, r1
    21fa:	09 f0       	breq	.+2      	; 0x21fe <_Z5checkv+0x10c0>
    21fc:	a9 cf       	rjmp	.-174    	; 0x2150 <_Z5checkv+0x1012>
    21fe:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
		}
	}
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
    2202:	ea ee       	ldi	r30, 0xEA	; 234
    2204:	f3 e0       	ldi	r31, 0x03	; 3
    2206:	86 84       	ldd	r8, Z+14	; 0x0e
    2208:	97 84       	ldd	r9, Z+15	; 0x0f
    220a:	d4 01       	movw	r26, r8
    220c:	11 96       	adiw	r26, 0x01	; 1
    220e:	a4 80       	ldd	r10, Z+4	; 0x04
    2210:	b5 80       	ldd	r11, Z+5	; 0x05
    2212:	08 e7       	ldi	r16, 0x78	; 120
    2214:	13 e0       	ldi	r17, 0x03	; 3
    2216:	78 01       	movw	r14, r16
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2218:	1a 82       	std	Y+2, r1	; 0x02
    221a:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    221c:	0f 2e       	mov	r0, r31
    221e:	f7 e0       	ldi	r31, 0x07	; 7
    2220:	cf 2e       	mov	r12, r31
    2222:	d1 2c       	mov	r13, r1
    2224:	f0 2d       	mov	r31, r0
    2226:	f7 01       	movw	r30, r14
    2228:	41 91       	ld	r20, Z+
    222a:	7f 01       	movw	r14, r30
    222c:	50 e0       	ldi	r21, 0x00	; 0
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	87 70       	andi	r24, 0x07	; 7
    2234:	90 78       	andi	r25, 0x80	; 128
    2236:	99 23       	and	r25, r25
    2238:	24 f4       	brge	.+8      	; 0x2242 <_Z5checkv+0x1104>
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	88 6f       	ori	r24, 0xF8	; 248
    223e:	9f 6f       	ori	r25, 0xFF	; 255
    2240:	01 96       	adiw	r24, 0x01	; 1
    2242:	b6 01       	movw	r22, r12
    2244:	68 1b       	sub	r22, r24
    2246:	79 0b       	sbc	r23, r25
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	99 23       	and	r25, r25
    224e:	0c f4       	brge	.+2      	; 0x2252 <_Z5checkv+0x1114>
    2250:	07 96       	adiw	r24, 0x07	; 7
    2252:	fc 01       	movw	r30, r24
    2254:	f5 95       	asr	r31
    2256:	e7 95       	ror	r30
    2258:	f5 95       	asr	r31
    225a:	e7 95       	ror	r30
    225c:	f5 95       	asr	r31
    225e:	e7 95       	ror	r30
    2260:	ea 0f       	add	r30, r26
    2262:	fb 1f       	adc	r31, r27
    2264:	f6 95       	lsr	r31
    2266:	fe 2f       	mov	r31, r30
    2268:	ee 27       	eor	r30, r30
    226a:	f7 95       	ror	r31
    226c:	e7 95       	ror	r30
    226e:	ea 0d       	add	r30, r10
    2270:	fb 1d       	adc	r31, r11
    2272:	e5 50       	subi	r30, 0x05	; 5
    2274:	fc 4f       	sbci	r31, 0xFC	; 252
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	ca 01       	movw	r24, r20
    227c:	02 2e       	mov	r0, r18
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <_Z5checkv+0x1146>
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	0a 94       	dec	r0
    2286:	e2 f7       	brpl	.-8      	; 0x2280 <_Z5checkv+0x1142>
    2288:	80 78       	andi	r24, 0x80	; 128
    228a:	99 27       	eor	r25, r25
    228c:	06 2e       	mov	r0, r22
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <_Z5checkv+0x1156>
    2290:	95 95       	asr	r25
    2292:	87 95       	ror	r24
    2294:	0a 94       	dec	r0
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <_Z5checkv+0x1152>
    2298:	90 81       	ld	r25, Z
    229a:	89 2b       	or	r24, r25
    229c:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    229e:	2f 5f       	subi	r18, 0xFF	; 255
    22a0:	3f 4f       	sbci	r19, 0xFF	; 255
    22a2:	28 30       	cpi	r18, 0x08	; 8
    22a4:	31 05       	cpc	r19, r1
    22a6:	49 f7       	brne	.-46     	; 0x227a <_Z5checkv+0x113c>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    22a8:	29 81       	ldd	r18, Y+1	; 0x01
    22aa:	3a 81       	ldd	r19, Y+2	; 0x02
    22ac:	2f 5f       	subi	r18, 0xFF	; 255
    22ae:	3f 4f       	sbci	r19, 0xFF	; 255
    22b0:	3a 83       	std	Y+2, r19	; 0x02
    22b2:	29 83       	std	Y+1, r18	; 0x01
    22b4:	28 30       	cpi	r18, 0x08	; 8
    22b6:	31 05       	cpc	r19, r1
    22b8:	09 f0       	breq	.+2      	; 0x22bc <_Z5checkv+0x117e>
    22ba:	b5 cf       	rjmp	.-150    	; 0x2226 <_Z5checkv+0x10e8>
	}
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
    22bc:	a0 90 f0 03 	lds	r10, 0x03F0	; 0x8003f0 <passww+0x6>
    22c0:	b0 90 f1 03 	lds	r11, 0x03F1	; 0x8003f1 <passww+0x7>
    22c4:	0f 2e       	mov	r0, r31
    22c6:	f8 e7       	ldi	r31, 0x78	; 120
    22c8:	ef 2e       	mov	r14, r31
    22ca:	f3 e0       	ldi	r31, 0x03	; 3
    22cc:	ff 2e       	mov	r15, r31
    22ce:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    22d0:	1a 82       	std	Y+2, r1	; 0x02
    22d2:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    22d4:	0f 2e       	mov	r0, r31
    22d6:	f7 e0       	ldi	r31, 0x07	; 7
    22d8:	cf 2e       	mov	r12, r31
    22da:	d1 2c       	mov	r13, r1
    22dc:	f0 2d       	mov	r31, r0
    22de:	f7 01       	movw	r30, r14
    22e0:	41 91       	ld	r20, Z+
    22e2:	7f 01       	movw	r14, r30
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	87 70       	andi	r24, 0x07	; 7
    22ec:	90 78       	andi	r25, 0x80	; 128
    22ee:	99 23       	and	r25, r25
    22f0:	24 f4       	brge	.+8      	; 0x22fa <_Z5checkv+0x11bc>
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	88 6f       	ori	r24, 0xF8	; 248
    22f6:	9f 6f       	ori	r25, 0xFF	; 255
    22f8:	01 96       	adiw	r24, 0x01	; 1
    22fa:	b6 01       	movw	r22, r12
    22fc:	68 1b       	sub	r22, r24
    22fe:	79 0b       	sbc	r23, r25
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	9a 81       	ldd	r25, Y+2	; 0x02
    2304:	99 23       	and	r25, r25
    2306:	0c f4       	brge	.+2      	; 0x230a <_Z5checkv+0x11cc>
    2308:	07 96       	adiw	r24, 0x07	; 7
    230a:	fc 01       	movw	r30, r24
    230c:	f5 95       	asr	r31
    230e:	e7 95       	ror	r30
    2310:	f5 95       	asr	r31
    2312:	e7 95       	ror	r30
    2314:	f5 95       	asr	r31
    2316:	e7 95       	ror	r30
    2318:	ea 0f       	add	r30, r26
    231a:	fb 1f       	adc	r31, r27
    231c:	f6 95       	lsr	r31
    231e:	fe 2f       	mov	r31, r30
    2320:	ee 27       	eor	r30, r30
    2322:	f7 95       	ror	r31
    2324:	e7 95       	ror	r30
    2326:	ea 0d       	add	r30, r10
    2328:	fb 1d       	adc	r31, r11
    232a:	e5 50       	subi	r30, 0x05	; 5
    232c:	fc 4f       	sbci	r31, 0xFC	; 252
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	ca 01       	movw	r24, r20
    2334:	02 2e       	mov	r0, r18
    2336:	02 c0       	rjmp	.+4      	; 0x233c <_Z5checkv+0x11fe>
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	0a 94       	dec	r0
    233e:	e2 f7       	brpl	.-8      	; 0x2338 <_Z5checkv+0x11fa>
    2340:	80 78       	andi	r24, 0x80	; 128
    2342:	99 27       	eor	r25, r25
    2344:	06 2e       	mov	r0, r22
    2346:	02 c0       	rjmp	.+4      	; 0x234c <_Z5checkv+0x120e>
    2348:	95 95       	asr	r25
    234a:	87 95       	ror	r24
    234c:	0a 94       	dec	r0
    234e:	e2 f7       	brpl	.-8      	; 0x2348 <_Z5checkv+0x120a>
    2350:	90 81       	ld	r25, Z
    2352:	89 2b       	or	r24, r25
    2354:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2356:	2f 5f       	subi	r18, 0xFF	; 255
    2358:	3f 4f       	sbci	r19, 0xFF	; 255
    235a:	28 30       	cpi	r18, 0x08	; 8
    235c:	31 05       	cpc	r19, r1
    235e:	49 f7       	brne	.-46     	; 0x2332 <_Z5checkv+0x11f4>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2360:	29 81       	ldd	r18, Y+1	; 0x01
    2362:	3a 81       	ldd	r19, Y+2	; 0x02
    2364:	2f 5f       	subi	r18, 0xFF	; 255
    2366:	3f 4f       	sbci	r19, 0xFF	; 255
    2368:	3a 83       	std	Y+2, r19	; 0x02
    236a:	29 83       	std	Y+1, r18	; 0x01
    236c:	28 30       	cpi	r18, 0x08	; 8
    236e:	31 05       	cpc	r19, r1
    2370:	09 f0       	breq	.+2      	; 0x2374 <_Z5checkv+0x1236>
    2372:	b5 cf       	rjmp	.-150    	; 0x22de <_Z5checkv+0x11a0>
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
    2374:	a0 90 f2 03 	lds	r10, 0x03F2	; 0x8003f2 <passww+0x8>
    2378:	b0 90 f3 03 	lds	r11, 0x03F3	; 0x8003f3 <passww+0x9>
    237c:	0f 2e       	mov	r0, r31
    237e:	f8 e7       	ldi	r31, 0x78	; 120
    2380:	ef 2e       	mov	r14, r31
    2382:	f3 e0       	ldi	r31, 0x03	; 3
    2384:	ff 2e       	mov	r15, r31
    2386:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2388:	1a 82       	std	Y+2, r1	; 0x02
    238a:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    238c:	0f 2e       	mov	r0, r31
    238e:	f7 e0       	ldi	r31, 0x07	; 7
    2390:	cf 2e       	mov	r12, r31
    2392:	d1 2c       	mov	r13, r1
    2394:	f0 2d       	mov	r31, r0
    2396:	f7 01       	movw	r30, r14
    2398:	41 91       	ld	r20, Z+
    239a:	7f 01       	movw	r14, r30
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	87 70       	andi	r24, 0x07	; 7
    23a4:	90 78       	andi	r25, 0x80	; 128
    23a6:	99 23       	and	r25, r25
    23a8:	24 f4       	brge	.+8      	; 0x23b2 <_Z5checkv+0x1274>
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	88 6f       	ori	r24, 0xF8	; 248
    23ae:	9f 6f       	ori	r25, 0xFF	; 255
    23b0:	01 96       	adiw	r24, 0x01	; 1
    23b2:	b6 01       	movw	r22, r12
    23b4:	68 1b       	sub	r22, r24
    23b6:	79 0b       	sbc	r23, r25
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	9a 81       	ldd	r25, Y+2	; 0x02
    23bc:	99 23       	and	r25, r25
    23be:	0c f4       	brge	.+2      	; 0x23c2 <_Z5checkv+0x1284>
    23c0:	07 96       	adiw	r24, 0x07	; 7
    23c2:	fc 01       	movw	r30, r24
    23c4:	f5 95       	asr	r31
    23c6:	e7 95       	ror	r30
    23c8:	f5 95       	asr	r31
    23ca:	e7 95       	ror	r30
    23cc:	f5 95       	asr	r31
    23ce:	e7 95       	ror	r30
    23d0:	ea 0f       	add	r30, r26
    23d2:	fb 1f       	adc	r31, r27
    23d4:	f6 95       	lsr	r31
    23d6:	fe 2f       	mov	r31, r30
    23d8:	ee 27       	eor	r30, r30
    23da:	f7 95       	ror	r31
    23dc:	e7 95       	ror	r30
    23de:	ea 0d       	add	r30, r10
    23e0:	fb 1d       	adc	r31, r11
    23e2:	e5 50       	subi	r30, 0x05	; 5
    23e4:	fc 4f       	sbci	r31, 0xFC	; 252
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	ca 01       	movw	r24, r20
    23ec:	02 2e       	mov	r0, r18
    23ee:	02 c0       	rjmp	.+4      	; 0x23f4 <_Z5checkv+0x12b6>
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	0a 94       	dec	r0
    23f6:	e2 f7       	brpl	.-8      	; 0x23f0 <_Z5checkv+0x12b2>
    23f8:	80 78       	andi	r24, 0x80	; 128
    23fa:	99 27       	eor	r25, r25
    23fc:	06 2e       	mov	r0, r22
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <_Z5checkv+0x12c6>
    2400:	95 95       	asr	r25
    2402:	87 95       	ror	r24
    2404:	0a 94       	dec	r0
    2406:	e2 f7       	brpl	.-8      	; 0x2400 <_Z5checkv+0x12c2>
    2408:	90 81       	ld	r25, Z
    240a:	89 2b       	or	r24, r25
    240c:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    240e:	2f 5f       	subi	r18, 0xFF	; 255
    2410:	3f 4f       	sbci	r19, 0xFF	; 255
    2412:	28 30       	cpi	r18, 0x08	; 8
    2414:	31 05       	cpc	r19, r1
    2416:	49 f7       	brne	.-46     	; 0x23ea <_Z5checkv+0x12ac>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2418:	29 81       	ldd	r18, Y+1	; 0x01
    241a:	3a 81       	ldd	r19, Y+2	; 0x02
    241c:	2f 5f       	subi	r18, 0xFF	; 255
    241e:	3f 4f       	sbci	r19, 0xFF	; 255
    2420:	3a 83       	std	Y+2, r19	; 0x02
    2422:	29 83       	std	Y+1, r18	; 0x01
    2424:	28 30       	cpi	r18, 0x08	; 8
    2426:	31 05       	cpc	r19, r1
    2428:	09 f0       	breq	.+2      	; 0x242c <_Z5checkv+0x12ee>
    242a:	b5 cf       	rjmp	.-150    	; 0x2396 <_Z5checkv+0x1258>
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
    242c:	a0 90 f4 03 	lds	r10, 0x03F4	; 0x8003f4 <passww+0xa>
    2430:	b0 90 f5 03 	lds	r11, 0x03F5	; 0x8003f5 <passww+0xb>
    2434:	0f 2e       	mov	r0, r31
    2436:	f8 e7       	ldi	r31, 0x78	; 120
    2438:	ef 2e       	mov	r14, r31
    243a:	f3 e0       	ldi	r31, 0x03	; 3
    243c:	ff 2e       	mov	r15, r31
    243e:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2440:	1a 82       	std	Y+2, r1	; 0x02
    2442:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2444:	0f 2e       	mov	r0, r31
    2446:	f7 e0       	ldi	r31, 0x07	; 7
    2448:	cf 2e       	mov	r12, r31
    244a:	d1 2c       	mov	r13, r1
    244c:	f0 2d       	mov	r31, r0
    244e:	f7 01       	movw	r30, r14
    2450:	41 91       	ld	r20, Z+
    2452:	7f 01       	movw	r14, r30
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	87 70       	andi	r24, 0x07	; 7
    245c:	90 78       	andi	r25, 0x80	; 128
    245e:	99 23       	and	r25, r25
    2460:	24 f4       	brge	.+8      	; 0x246a <_Z5checkv+0x132c>
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	88 6f       	ori	r24, 0xF8	; 248
    2466:	9f 6f       	ori	r25, 0xFF	; 255
    2468:	01 96       	adiw	r24, 0x01	; 1
    246a:	b6 01       	movw	r22, r12
    246c:	68 1b       	sub	r22, r24
    246e:	79 0b       	sbc	r23, r25
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	9a 81       	ldd	r25, Y+2	; 0x02
    2474:	99 23       	and	r25, r25
    2476:	0c f4       	brge	.+2      	; 0x247a <_Z5checkv+0x133c>
    2478:	07 96       	adiw	r24, 0x07	; 7
    247a:	fc 01       	movw	r30, r24
    247c:	f5 95       	asr	r31
    247e:	e7 95       	ror	r30
    2480:	f5 95       	asr	r31
    2482:	e7 95       	ror	r30
    2484:	f5 95       	asr	r31
    2486:	e7 95       	ror	r30
    2488:	ea 0f       	add	r30, r26
    248a:	fb 1f       	adc	r31, r27
    248c:	f6 95       	lsr	r31
    248e:	fe 2f       	mov	r31, r30
    2490:	ee 27       	eor	r30, r30
    2492:	f7 95       	ror	r31
    2494:	e7 95       	ror	r30
    2496:	ea 0d       	add	r30, r10
    2498:	fb 1d       	adc	r31, r11
    249a:	e5 50       	subi	r30, 0x05	; 5
    249c:	fc 4f       	sbci	r31, 0xFC	; 252
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	ca 01       	movw	r24, r20
    24a4:	02 2e       	mov	r0, r18
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <_Z5checkv+0x136e>
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	0a 94       	dec	r0
    24ae:	e2 f7       	brpl	.-8      	; 0x24a8 <_Z5checkv+0x136a>
    24b0:	80 78       	andi	r24, 0x80	; 128
    24b2:	99 27       	eor	r25, r25
    24b4:	06 2e       	mov	r0, r22
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <_Z5checkv+0x137e>
    24b8:	95 95       	asr	r25
    24ba:	87 95       	ror	r24
    24bc:	0a 94       	dec	r0
    24be:	e2 f7       	brpl	.-8      	; 0x24b8 <_Z5checkv+0x137a>
    24c0:	90 81       	ld	r25, Z
    24c2:	89 2b       	or	r24, r25
    24c4:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    24c6:	2f 5f       	subi	r18, 0xFF	; 255
    24c8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ca:	28 30       	cpi	r18, 0x08	; 8
    24cc:	31 05       	cpc	r19, r1
    24ce:	49 f7       	brne	.-46     	; 0x24a2 <_Z5checkv+0x1364>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    24d0:	29 81       	ldd	r18, Y+1	; 0x01
    24d2:	3a 81       	ldd	r19, Y+2	; 0x02
    24d4:	2f 5f       	subi	r18, 0xFF	; 255
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	3a 83       	std	Y+2, r19	; 0x02
    24da:	29 83       	std	Y+1, r18	; 0x01
    24dc:	28 30       	cpi	r18, 0x08	; 8
    24de:	31 05       	cpc	r19, r1
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <_Z5checkv+0x13a6>
    24e2:	b5 cf       	rjmp	.-150    	; 0x244e <_Z5checkv+0x1310>
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
    24e4:	c0 90 f6 03 	lds	r12, 0x03F6	; 0x8003f6 <passww+0xc>
    24e8:	d0 90 f7 03 	lds	r13, 0x03F7	; 0x8003f7 <passww+0xd>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    24ec:	1a 82       	std	Y+2, r1	; 0x02
    24ee:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    24f0:	0f 2e       	mov	r0, r31
    24f2:	f7 e0       	ldi	r31, 0x07	; 7
    24f4:	ef 2e       	mov	r14, r31
    24f6:	f1 2c       	mov	r15, r1
    24f8:	f0 2d       	mov	r31, r0
    24fa:	f8 01       	movw	r30, r16
    24fc:	41 91       	ld	r20, Z+
    24fe:	8f 01       	movw	r16, r30
    2500:	50 e0       	ldi	r21, 0x00	; 0
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	87 70       	andi	r24, 0x07	; 7
    2508:	90 78       	andi	r25, 0x80	; 128
    250a:	99 23       	and	r25, r25
    250c:	24 f4       	brge	.+8      	; 0x2516 <_Z5checkv+0x13d8>
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	88 6f       	ori	r24, 0xF8	; 248
    2512:	9f 6f       	ori	r25, 0xFF	; 255
    2514:	01 96       	adiw	r24, 0x01	; 1
    2516:	b7 01       	movw	r22, r14
    2518:	68 1b       	sub	r22, r24
    251a:	79 0b       	sbc	r23, r25
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	99 23       	and	r25, r25
    2522:	0c f4       	brge	.+2      	; 0x2526 <_Z5checkv+0x13e8>
    2524:	07 96       	adiw	r24, 0x07	; 7
    2526:	fc 01       	movw	r30, r24
    2528:	f5 95       	asr	r31
    252a:	e7 95       	ror	r30
    252c:	f5 95       	asr	r31
    252e:	e7 95       	ror	r30
    2530:	f5 95       	asr	r31
    2532:	e7 95       	ror	r30
    2534:	ea 0f       	add	r30, r26
    2536:	fb 1f       	adc	r31, r27
    2538:	f6 95       	lsr	r31
    253a:	fe 2f       	mov	r31, r30
    253c:	ee 27       	eor	r30, r30
    253e:	f7 95       	ror	r31
    2540:	e7 95       	ror	r30
    2542:	ec 0d       	add	r30, r12
    2544:	fd 1d       	adc	r31, r13
    2546:	e5 50       	subi	r30, 0x05	; 5
    2548:	fc 4f       	sbci	r31, 0xFC	; 252
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	ca 01       	movw	r24, r20
    2550:	02 2e       	mov	r0, r18
    2552:	02 c0       	rjmp	.+4      	; 0x2558 <_Z5checkv+0x141a>
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	0a 94       	dec	r0
    255a:	e2 f7       	brpl	.-8      	; 0x2554 <_Z5checkv+0x1416>
    255c:	80 78       	andi	r24, 0x80	; 128
    255e:	99 27       	eor	r25, r25
    2560:	06 2e       	mov	r0, r22
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <_Z5checkv+0x142a>
    2564:	95 95       	asr	r25
    2566:	87 95       	ror	r24
    2568:	0a 94       	dec	r0
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <_Z5checkv+0x1426>
    256c:	90 81       	ld	r25, Z
    256e:	89 2b       	or	r24, r25
    2570:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2572:	2f 5f       	subi	r18, 0xFF	; 255
    2574:	3f 4f       	sbci	r19, 0xFF	; 255
    2576:	28 30       	cpi	r18, 0x08	; 8
    2578:	31 05       	cpc	r19, r1
    257a:	49 f7       	brne	.-46     	; 0x254e <_Z5checkv+0x1410>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    257c:	29 81       	ldd	r18, Y+1	; 0x01
    257e:	3a 81       	ldd	r19, Y+2	; 0x02
    2580:	2f 5f       	subi	r18, 0xFF	; 255
    2582:	3f 4f       	sbci	r19, 0xFF	; 255
    2584:	3a 83       	std	Y+2, r19	; 0x02
    2586:	29 83       	std	Y+1, r18	; 0x01
    2588:	28 30       	cpi	r18, 0x08	; 8
    258a:	31 05       	cpc	r19, r1
    258c:	09 f0       	breq	.+2      	; 0x2590 <_Z5checkv+0x1452>
    258e:	b5 cf       	rjmp	.-150    	; 0x24fa <_Z5checkv+0x13bc>
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord+2,1,8,downn);
    2590:	54 01       	movw	r10, r8
    2592:	32 e0       	ldi	r19, 0x02	; 2
    2594:	a3 0e       	add	r10, r19
    2596:	b1 1c       	adc	r11, r1
    2598:	e0 91 ea 03 	lds	r30, 0x03EA	; 0x8003ea <passww>
    259c:	f0 91 eb 03 	lds	r31, 0x03EB	; 0x8003eb <passww+0x1>
    25a0:	ee 0f       	add	r30, r30
    25a2:	ff 1f       	adc	r31, r31
    25a4:	e2 51       	subi	r30, 0x12	; 18
    25a6:	fc 4f       	sbci	r31, 0xFC	; 252
    25a8:	60 81       	ld	r22, Z
    25aa:	71 81       	ldd	r23, Z+1	; 0x01
    25ac:	0f 2e       	mov	r0, r31
    25ae:	f0 e6       	ldi	r31, 0x60	; 96
    25b0:	ef 2e       	mov	r14, r31
    25b2:	f3 e0       	ldi	r31, 0x03	; 3
    25b4:	ff 2e       	mov	r15, r31
    25b6:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    25b8:	00 e0       	ldi	r16, 0x00	; 0
    25ba:	10 e0       	ldi	r17, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    25bc:	0f 2e       	mov	r0, r31
    25be:	f7 e0       	ldi	r31, 0x07	; 7
    25c0:	cf 2e       	mov	r12, r31
    25c2:	d1 2c       	mov	r13, r1
    25c4:	f0 2d       	mov	r31, r0
    25c6:	76 2e       	mov	r7, r22
    25c8:	67 2e       	mov	r6, r23
    25ca:	d7 01       	movw	r26, r14
    25cc:	4d 91       	ld	r20, X+
    25ce:	7d 01       	movw	r14, r26
    25d0:	50 e0       	ldi	r21, 0x00	; 0
    25d2:	c8 01       	movw	r24, r16
    25d4:	87 70       	andi	r24, 0x07	; 7
    25d6:	90 78       	andi	r25, 0x80	; 128
    25d8:	99 23       	and	r25, r25
    25da:	24 f4       	brge	.+8      	; 0x25e4 <_Z5checkv+0x14a6>
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	88 6f       	ori	r24, 0xF8	; 248
    25e0:	9f 6f       	ori	r25, 0xFF	; 255
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	d6 01       	movw	r26, r12
    25e6:	a8 1b       	sub	r26, r24
    25e8:	b9 0b       	sbc	r27, r25
    25ea:	79 82       	std	Y+1, r7	; 0x01
    25ec:	6a 82       	std	Y+2, r6	; 0x02
    25ee:	c8 01       	movw	r24, r16
    25f0:	11 23       	and	r17, r17
    25f2:	0c f4       	brge	.+2      	; 0x25f6 <_Z5checkv+0x14b8>
    25f4:	07 96       	adiw	r24, 0x07	; 7
    25f6:	fc 01       	movw	r30, r24
    25f8:	f5 95       	asr	r31
    25fa:	e7 95       	ror	r30
    25fc:	f5 95       	asr	r31
    25fe:	e7 95       	ror	r30
    2600:	f5 95       	asr	r31
    2602:	e7 95       	ror	r30
    2604:	ea 0d       	add	r30, r10
    2606:	fb 1d       	adc	r31, r11
    2608:	f6 95       	lsr	r31
    260a:	fe 2f       	mov	r31, r30
    260c:	ee 27       	eor	r30, r30
    260e:	f7 95       	ror	r31
    2610:	e7 95       	ror	r30
    2612:	e6 0f       	add	r30, r22
    2614:	f7 1f       	adc	r31, r23
    2616:	e5 50       	subi	r30, 0x05	; 5
    2618:	fc 4f       	sbci	r31, 0xFC	; 252
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	ca 01       	movw	r24, r20
    2620:	02 2e       	mov	r0, r18
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <_Z5checkv+0x14ea>
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	0a 94       	dec	r0
    262a:	e2 f7       	brpl	.-8      	; 0x2624 <_Z5checkv+0x14e6>
    262c:	80 78       	andi	r24, 0x80	; 128
    262e:	99 27       	eor	r25, r25
    2630:	0a 2e       	mov	r0, r26
    2632:	02 c0       	rjmp	.+4      	; 0x2638 <_Z5checkv+0x14fa>
    2634:	95 95       	asr	r25
    2636:	87 95       	ror	r24
    2638:	0a 94       	dec	r0
    263a:	e2 f7       	brpl	.-8      	; 0x2634 <_Z5checkv+0x14f6>
    263c:	90 81       	ld	r25, Z
    263e:	89 2b       	or	r24, r25
    2640:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2642:	2f 5f       	subi	r18, 0xFF	; 255
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	28 30       	cpi	r18, 0x08	; 8
    2648:	31 05       	cpc	r19, r1
    264a:	49 f7       	brne	.-46     	; 0x261e <_Z5checkv+0x14e0>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    264c:	0f 5f       	subi	r16, 0xFF	; 255
    264e:	1f 4f       	sbci	r17, 0xFF	; 255
    2650:	08 30       	cpi	r16, 0x08	; 8
    2652:	11 05       	cpc	r17, r1
    2654:	09 f0       	breq	.+2      	; 0x2658 <_Z5checkv+0x151a>
    2656:	b9 cf       	rjmp	.-142    	; 0x25ca <_Z5checkv+0x148c>
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord+2,1,8,downn);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord-1,1,8,upp);
    2658:	54 01       	movw	r10, r8
    265a:	f1 e0       	ldi	r31, 0x01	; 1
    265c:	af 1a       	sub	r10, r31
    265e:	b1 08       	sbc	r11, r1
    2660:	0f 2e       	mov	r0, r31
    2662:	f8 e6       	ldi	r31, 0x68	; 104
    2664:	ef 2e       	mov	r14, r31
    2666:	f3 e0       	ldi	r31, 0x03	; 3
    2668:	ff 2e       	mov	r15, r31
    266a:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    266c:	00 e0       	ldi	r16, 0x00	; 0
    266e:	10 e0       	ldi	r17, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2670:	0f 2e       	mov	r0, r31
    2672:	f7 e0       	ldi	r31, 0x07	; 7
    2674:	cf 2e       	mov	r12, r31
    2676:	d1 2c       	mov	r13, r1
    2678:	f0 2d       	mov	r31, r0
    267a:	d7 01       	movw	r26, r14
    267c:	4d 91       	ld	r20, X+
    267e:	7d 01       	movw	r14, r26
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	c8 01       	movw	r24, r16
    2684:	87 70       	andi	r24, 0x07	; 7
    2686:	90 78       	andi	r25, 0x80	; 128
    2688:	99 23       	and	r25, r25
    268a:	24 f4       	brge	.+8      	; 0x2694 <_Z5checkv+0x1556>
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	88 6f       	ori	r24, 0xF8	; 248
    2690:	9f 6f       	ori	r25, 0xFF	; 255
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	d6 01       	movw	r26, r12
    2696:	a8 1b       	sub	r26, r24
    2698:	b9 0b       	sbc	r27, r25
    269a:	c8 01       	movw	r24, r16
    269c:	11 23       	and	r17, r17
    269e:	0c f4       	brge	.+2      	; 0x26a2 <_Z5checkv+0x1564>
    26a0:	07 96       	adiw	r24, 0x07	; 7
    26a2:	fc 01       	movw	r30, r24
    26a4:	f5 95       	asr	r31
    26a6:	e7 95       	ror	r30
    26a8:	f5 95       	asr	r31
    26aa:	e7 95       	ror	r30
    26ac:	f5 95       	asr	r31
    26ae:	e7 95       	ror	r30
    26b0:	ea 0d       	add	r30, r10
    26b2:	fb 1d       	adc	r31, r11
    26b4:	f6 95       	lsr	r31
    26b6:	fe 2f       	mov	r31, r30
    26b8:	ee 27       	eor	r30, r30
    26ba:	f7 95       	ror	r31
    26bc:	e7 95       	ror	r30
    26be:	29 81       	ldd	r18, Y+1	; 0x01
    26c0:	3a 81       	ldd	r19, Y+2	; 0x02
    26c2:	e2 0f       	add	r30, r18
    26c4:	f3 1f       	adc	r31, r19
    26c6:	e5 50       	subi	r30, 0x05	; 5
    26c8:	fc 4f       	sbci	r31, 0xFC	; 252
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	ca 01       	movw	r24, r20
    26d0:	02 2e       	mov	r0, r18
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <_Z5checkv+0x159a>
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	0a 94       	dec	r0
    26da:	e2 f7       	brpl	.-8      	; 0x26d4 <_Z5checkv+0x1596>
    26dc:	80 78       	andi	r24, 0x80	; 128
    26de:	99 27       	eor	r25, r25
    26e0:	0a 2e       	mov	r0, r26
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <_Z5checkv+0x15aa>
    26e4:	95 95       	asr	r25
    26e6:	87 95       	ror	r24
    26e8:	0a 94       	dec	r0
    26ea:	e2 f7       	brpl	.-8      	; 0x26e4 <_Z5checkv+0x15a6>
    26ec:	90 81       	ld	r25, Z
    26ee:	89 2b       	or	r24, r25
    26f0:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    26f2:	2f 5f       	subi	r18, 0xFF	; 255
    26f4:	3f 4f       	sbci	r19, 0xFF	; 255
    26f6:	28 30       	cpi	r18, 0x08	; 8
    26f8:	31 05       	cpc	r19, r1
    26fa:	49 f7       	brne	.-46     	; 0x26ce <_Z5checkv+0x1590>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    26fc:	0f 5f       	subi	r16, 0xFF	; 255
    26fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2700:	08 30       	cpi	r16, 0x08	; 8
    2702:	11 05       	cpc	r17, r1
    2704:	09 f0       	breq	.+2      	; 0x2708 <_Z5checkv+0x15ca>
    2706:	b9 cf       	rjmp	.-142    	; 0x267a <_Z5checkv+0x153c>
	}
	
	void down()
	{
		write_default();
		imgnum--;
    2708:	ea ee       	ldi	r30, 0xEA	; 234
    270a:	f3 e0       	ldi	r31, 0x03	; 3
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	93 83       	std	Z+3, r25	; 0x03
    2714:	82 83       	std	Z+2, r24	; 0x02
		if (imgnum<0) imgnum=10;
    2716:	99 23       	and	r25, r25
    2718:	34 f4       	brge	.+12     	; 0x2726 <_Z5checkv+0x15e8>
    271a:	8a e0       	ldi	r24, 0x0A	; 10
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <passww+0x3>
    2722:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <passww+0x2>
		variants(xcoord[pointer],ycoord);
    2726:	a4 01       	movw	r20, r8
    2728:	8a ee       	ldi	r24, 0xEA	; 234
    272a:	93 e0       	ldi	r25, 0x03	; 3
    272c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN14password_scene8variantsEii>
    2730:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
		oled.OLED_Write_To_Bufer(0,0,1,8,three);
		if(!pss)passw.down();
		else passww.down();
		
	}
	else if(!btn0  & !btn3 & btn12 & !btn03)
    2734:	8f 23       	and	r24, r31
    2736:	8e 23       	and	r24, r30
    2738:	78 17       	cp	r23, r24
    273a:	08 f0       	brcs	.+2      	; 0x273e <_Z5checkv+0x1600>
    273c:	d7 c5       	rjmp	.+2990   	; 0x32ec <_Z5checkv+0x21ae>
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	c9 01       	movw	r24, r18
    2744:	33 23       	and	r19, r19
    2746:	0c f4       	brge	.+2      	; 0x274a <_Z5checkv+0x160c>
    2748:	07 96       	adiw	r24, 0x07	; 7
    274a:	95 95       	asr	r25
    274c:	87 95       	ror	r24
    274e:	95 95       	asr	r25
    2750:	87 95       	ror	r24
    2752:	95 95       	asr	r25
    2754:	87 95       	ror	r24
    2756:	96 95       	lsr	r25
    2758:	98 2f       	mov	r25, r24
    275a:	88 27       	eor	r24, r24
    275c:	97 95       	ror	r25
    275e:	87 95       	ror	r24
    2760:	fc 01       	movw	r30, r24
    2762:	e5 50       	subi	r30, 0x05	; 5
    2764:	fc 4f       	sbci	r31, 0xFC	; 252
    2766:	8d 5f       	subi	r24, 0xFD	; 253
    2768:	9b 4f       	sbci	r25, 0xFB	; 251
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    276a:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    276c:	8e 17       	cp	r24, r30
    276e:	9f 07       	cpc	r25, r31
    2770:	e1 f7       	brne	.-8      	; 0x276a <_Z5checkv+0x162c>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    2772:	2f 5f       	subi	r18, 0xFF	; 255
    2774:	3f 4f       	sbci	r19, 0xFF	; 255
    2776:	28 30       	cpi	r18, 0x08	; 8
    2778:	31 05       	cpc	r19, r1
    277a:	19 f7       	brne	.-58     	; 0x2742 <_Z5checkv+0x1604>
    277c:	48 ea       	ldi	r20, 0xA8	; 168
    277e:	53 e0       	ldi	r21, 0x03	; 3
    2780:	a0 e0       	ldi	r26, 0x00	; 0
    2782:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2784:	07 e0       	ldi	r16, 0x07	; 7
    2786:	10 e0       	ldi	r17, 0x00	; 0
    2788:	5a 83       	std	Y+2, r21	; 0x02
    278a:	49 83       	std	Y+1, r20	; 0x01
    278c:	e9 81       	ldd	r30, Y+1	; 0x01
    278e:	fa 81       	ldd	r31, Y+2	; 0x02
    2790:	41 91       	ld	r20, Z+
    2792:	fa 83       	std	Y+2, r31	; 0x02
    2794:	e9 83       	std	Y+1, r30	; 0x01
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	cd 01       	movw	r24, r26
    279a:	87 70       	andi	r24, 0x07	; 7
    279c:	90 78       	andi	r25, 0x80	; 128
    279e:	99 23       	and	r25, r25
    27a0:	24 f4       	brge	.+8      	; 0x27aa <_Z5checkv+0x166c>
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	88 6f       	ori	r24, 0xF8	; 248
    27a6:	9f 6f       	ori	r25, 0xFF	; 255
    27a8:	01 96       	adiw	r24, 0x01	; 1
    27aa:	b8 01       	movw	r22, r16
    27ac:	68 1b       	sub	r22, r24
    27ae:	79 0b       	sbc	r23, r25
    27b0:	cd 01       	movw	r24, r26
    27b2:	bb 23       	and	r27, r27
    27b4:	0c f4       	brge	.+2      	; 0x27b8 <_Z5checkv+0x167a>
    27b6:	07 96       	adiw	r24, 0x07	; 7
    27b8:	fc 01       	movw	r30, r24
    27ba:	f5 95       	asr	r31
    27bc:	e7 95       	ror	r30
    27be:	f5 95       	asr	r31
    27c0:	e7 95       	ror	r30
    27c2:	f5 95       	asr	r31
    27c4:	e7 95       	ror	r30
    27c6:	f6 95       	lsr	r31
    27c8:	fe 2f       	mov	r31, r30
    27ca:	ee 27       	eor	r30, r30
    27cc:	f7 95       	ror	r31
    27ce:	e7 95       	ror	r30
    27d0:	e5 50       	subi	r30, 0x05	; 5
    27d2:	fc 4f       	sbci	r31, 0xFC	; 252
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	ca 01       	movw	r24, r20
    27da:	02 2e       	mov	r0, r18
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <_Z5checkv+0x16a4>
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	0a 94       	dec	r0
    27e4:	e2 f7       	brpl	.-8      	; 0x27de <_Z5checkv+0x16a0>
    27e6:	80 78       	andi	r24, 0x80	; 128
    27e8:	99 27       	eor	r25, r25
    27ea:	06 2e       	mov	r0, r22
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <_Z5checkv+0x16b4>
    27ee:	95 95       	asr	r25
    27f0:	87 95       	ror	r24
    27f2:	0a 94       	dec	r0
    27f4:	e2 f7       	brpl	.-8      	; 0x27ee <_Z5checkv+0x16b0>
    27f6:	90 81       	ld	r25, Z
    27f8:	89 2b       	or	r24, r25
    27fa:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    27fc:	2f 5f       	subi	r18, 0xFF	; 255
    27fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2800:	28 30       	cpi	r18, 0x08	; 8
    2802:	31 05       	cpc	r19, r1
    2804:	49 f7       	brne	.-46     	; 0x27d8 <_Z5checkv+0x169a>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2806:	11 96       	adiw	r26, 0x01	; 1
    2808:	a8 30       	cpi	r26, 0x08	; 8
    280a:	b1 05       	cpc	r27, r1
    280c:	09 f0       	breq	.+2      	; 0x2810 <_Z5checkv+0x16d2>
    280e:	be cf       	rjmp	.-132    	; 0x278c <_Z5checkv+0x164e>
	}
	else if(!btn0  & !btn3 & btn12 & !btn03)
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,four);
		if(!pss)passw.forward();
    2810:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <pss>
    2814:	81 11       	cpse	r24, r1
    2816:	15 c0       	rjmp	.+42     	; 0x2842 <_Z5checkv+0x1704>
			variants(xcoord,ycoord);
	}
	
	void forward()
	{
		switch(imgnum)
    2818:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <passw+0x2>
    281c:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <passw+0x3>
    2820:	89 2b       	or	r24, r25
    2822:	11 f0       	breq	.+4      	; 0x2828 <_Z5checkv+0x16ea>
    2824:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
    2828:	eb ef       	ldi	r30, 0xFB	; 251
    282a:	f3 e0       	ldi	r31, 0x03	; 3
    282c:	8b ef       	ldi	r24, 0xFB	; 251
    282e:	97 e0       	ldi	r25, 0x07	; 7

void OLED_Bufer_Clear()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
		oled_bufer[i]=0b00000000;
    2830:	11 92       	st	Z+, r1
	}
}

void OLED_Bufer_Clear()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
    2832:	8e 17       	cp	r24, r30
    2834:	9f 07       	cpc	r25, r31
    2836:	e1 f7       	brne	.-8      	; 0x2830 <_Z5checkv+0x16f2>
		switch(imgnum)
		{
			case 0:
			{
				oled.OLED_Bufer_Clear();
				pss=true;
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <pss>
    283e:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
		}
	}
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
    2842:	ea ee       	ldi	r30, 0xEA	; 234
    2844:	f3 e0       	ldi	r31, 0x03	; 3
    2846:	a6 84       	ldd	r10, Z+14	; 0x0e
    2848:	b7 84       	ldd	r11, Z+15	; 0x0f
    284a:	d5 01       	movw	r26, r10
    284c:	11 96       	adiw	r26, 0x01	; 1
    284e:	04 81       	ldd	r16, Z+4	; 0x04
    2850:	15 81       	ldd	r17, Z+5	; 0x05
    2852:	0f 2e       	mov	r0, r31
    2854:	f8 e7       	ldi	r31, 0x78	; 120
    2856:	6f 2e       	mov	r6, r31
    2858:	f3 e0       	ldi	r31, 0x03	; 3
    285a:	7f 2e       	mov	r7, r31
    285c:	f0 2d       	mov	r31, r0
    285e:	73 01       	movw	r14, r6
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2860:	1a 82       	std	Y+2, r1	; 0x02
    2862:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2864:	0f 2e       	mov	r0, r31
    2866:	f7 e0       	ldi	r31, 0x07	; 7
    2868:	cf 2e       	mov	r12, r31
    286a:	d1 2c       	mov	r13, r1
    286c:	f0 2d       	mov	r31, r0
    286e:	80 2e       	mov	r8, r16
    2870:	91 2e       	mov	r9, r17
    2872:	f7 01       	movw	r30, r14
    2874:	41 91       	ld	r20, Z+
    2876:	7f 01       	movw	r14, r30
    2878:	50 e0       	ldi	r21, 0x00	; 0
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	87 70       	andi	r24, 0x07	; 7
    2880:	90 78       	andi	r25, 0x80	; 128
    2882:	99 23       	and	r25, r25
    2884:	24 f4       	brge	.+8      	; 0x288e <_Z5checkv+0x1750>
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	88 6f       	ori	r24, 0xF8	; 248
    288a:	9f 6f       	ori	r25, 0xFF	; 255
    288c:	01 96       	adiw	r24, 0x01	; 1
    288e:	b6 01       	movw	r22, r12
    2890:	68 1b       	sub	r22, r24
    2892:	79 0b       	sbc	r23, r25
    2894:	89 86       	std	Y+9, r8	; 0x09
    2896:	9a 86       	std	Y+10, r9	; 0x0a
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	99 23       	and	r25, r25
    289e:	0c f4       	brge	.+2      	; 0x28a2 <_Z5checkv+0x1764>
    28a0:	07 96       	adiw	r24, 0x07	; 7
    28a2:	fc 01       	movw	r30, r24
    28a4:	f5 95       	asr	r31
    28a6:	e7 95       	ror	r30
    28a8:	f5 95       	asr	r31
    28aa:	e7 95       	ror	r30
    28ac:	f5 95       	asr	r31
    28ae:	e7 95       	ror	r30
    28b0:	ea 0f       	add	r30, r26
    28b2:	fb 1f       	adc	r31, r27
    28b4:	f6 95       	lsr	r31
    28b6:	fe 2f       	mov	r31, r30
    28b8:	ee 27       	eor	r30, r30
    28ba:	f7 95       	ror	r31
    28bc:	e7 95       	ror	r30
    28be:	e0 0f       	add	r30, r16
    28c0:	f1 1f       	adc	r31, r17
    28c2:	e5 50       	subi	r30, 0x05	; 5
    28c4:	fc 4f       	sbci	r31, 0xFC	; 252
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	ca 01       	movw	r24, r20
    28cc:	02 2e       	mov	r0, r18
    28ce:	02 c0       	rjmp	.+4      	; 0x28d4 <_Z5checkv+0x1796>
    28d0:	88 0f       	add	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	0a 94       	dec	r0
    28d6:	e2 f7       	brpl	.-8      	; 0x28d0 <_Z5checkv+0x1792>
    28d8:	80 78       	andi	r24, 0x80	; 128
    28da:	99 27       	eor	r25, r25
    28dc:	06 2e       	mov	r0, r22
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <_Z5checkv+0x17a6>
    28e0:	95 95       	asr	r25
    28e2:	87 95       	ror	r24
    28e4:	0a 94       	dec	r0
    28e6:	e2 f7       	brpl	.-8      	; 0x28e0 <_Z5checkv+0x17a2>
    28e8:	90 81       	ld	r25, Z
    28ea:	89 2b       	or	r24, r25
    28ec:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    28ee:	2f 5f       	subi	r18, 0xFF	; 255
    28f0:	3f 4f       	sbci	r19, 0xFF	; 255
    28f2:	28 30       	cpi	r18, 0x08	; 8
    28f4:	31 05       	cpc	r19, r1
    28f6:	49 f7       	brne	.-46     	; 0x28ca <_Z5checkv+0x178c>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    28f8:	29 81       	ldd	r18, Y+1	; 0x01
    28fa:	3a 81       	ldd	r19, Y+2	; 0x02
    28fc:	2f 5f       	subi	r18, 0xFF	; 255
    28fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2900:	3a 83       	std	Y+2, r19	; 0x02
    2902:	29 83       	std	Y+1, r18	; 0x01
    2904:	28 30       	cpi	r18, 0x08	; 8
    2906:	31 05       	cpc	r19, r1
    2908:	09 f0       	breq	.+2      	; 0x290c <_Z5checkv+0x17ce>
    290a:	b3 cf       	rjmp	.-154    	; 0x2872 <_Z5checkv+0x1734>
	}
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
    290c:	00 91 f0 03 	lds	r16, 0x03F0	; 0x8003f0 <passww+0x6>
    2910:	10 91 f1 03 	lds	r17, 0x03F1	; 0x8003f1 <passww+0x7>
    2914:	0f 2e       	mov	r0, r31
    2916:	f8 e7       	ldi	r31, 0x78	; 120
    2918:	ef 2e       	mov	r14, r31
    291a:	f3 e0       	ldi	r31, 0x03	; 3
    291c:	ff 2e       	mov	r15, r31
    291e:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2920:	1a 82       	std	Y+2, r1	; 0x02
    2922:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2924:	0f 2e       	mov	r0, r31
    2926:	f7 e0       	ldi	r31, 0x07	; 7
    2928:	cf 2e       	mov	r12, r31
    292a:	d1 2c       	mov	r13, r1
    292c:	f0 2d       	mov	r31, r0
    292e:	80 2e       	mov	r8, r16
    2930:	91 2e       	mov	r9, r17
    2932:	f7 01       	movw	r30, r14
    2934:	41 91       	ld	r20, Z+
    2936:	7f 01       	movw	r14, r30
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	9a 81       	ldd	r25, Y+2	; 0x02
    293e:	87 70       	andi	r24, 0x07	; 7
    2940:	90 78       	andi	r25, 0x80	; 128
    2942:	99 23       	and	r25, r25
    2944:	24 f4       	brge	.+8      	; 0x294e <_Z5checkv+0x1810>
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	88 6f       	ori	r24, 0xF8	; 248
    294a:	9f 6f       	ori	r25, 0xFF	; 255
    294c:	01 96       	adiw	r24, 0x01	; 1
    294e:	b6 01       	movw	r22, r12
    2950:	68 1b       	sub	r22, r24
    2952:	79 0b       	sbc	r23, r25
    2954:	8b 86       	std	Y+11, r8	; 0x0b
    2956:	9c 86       	std	Y+12, r9	; 0x0c
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	99 23       	and	r25, r25
    295e:	0c f4       	brge	.+2      	; 0x2962 <_Z5checkv+0x1824>
    2960:	07 96       	adiw	r24, 0x07	; 7
    2962:	fc 01       	movw	r30, r24
    2964:	f5 95       	asr	r31
    2966:	e7 95       	ror	r30
    2968:	f5 95       	asr	r31
    296a:	e7 95       	ror	r30
    296c:	f5 95       	asr	r31
    296e:	e7 95       	ror	r30
    2970:	ea 0f       	add	r30, r26
    2972:	fb 1f       	adc	r31, r27
    2974:	f6 95       	lsr	r31
    2976:	fe 2f       	mov	r31, r30
    2978:	ee 27       	eor	r30, r30
    297a:	f7 95       	ror	r31
    297c:	e7 95       	ror	r30
    297e:	e0 0f       	add	r30, r16
    2980:	f1 1f       	adc	r31, r17
    2982:	e5 50       	subi	r30, 0x05	; 5
    2984:	fc 4f       	sbci	r31, 0xFC	; 252
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	ca 01       	movw	r24, r20
    298c:	02 2e       	mov	r0, r18
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <_Z5checkv+0x1856>
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	0a 94       	dec	r0
    2996:	e2 f7       	brpl	.-8      	; 0x2990 <_Z5checkv+0x1852>
    2998:	80 78       	andi	r24, 0x80	; 128
    299a:	99 27       	eor	r25, r25
    299c:	06 2e       	mov	r0, r22
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <_Z5checkv+0x1866>
    29a0:	95 95       	asr	r25
    29a2:	87 95       	ror	r24
    29a4:	0a 94       	dec	r0
    29a6:	e2 f7       	brpl	.-8      	; 0x29a0 <_Z5checkv+0x1862>
    29a8:	90 81       	ld	r25, Z
    29aa:	89 2b       	or	r24, r25
    29ac:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    29ae:	2f 5f       	subi	r18, 0xFF	; 255
    29b0:	3f 4f       	sbci	r19, 0xFF	; 255
    29b2:	28 30       	cpi	r18, 0x08	; 8
    29b4:	31 05       	cpc	r19, r1
    29b6:	49 f7       	brne	.-46     	; 0x298a <_Z5checkv+0x184c>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    29b8:	29 81       	ldd	r18, Y+1	; 0x01
    29ba:	3a 81       	ldd	r19, Y+2	; 0x02
    29bc:	2f 5f       	subi	r18, 0xFF	; 255
    29be:	3f 4f       	sbci	r19, 0xFF	; 255
    29c0:	3a 83       	std	Y+2, r19	; 0x02
    29c2:	29 83       	std	Y+1, r18	; 0x01
    29c4:	28 30       	cpi	r18, 0x08	; 8
    29c6:	31 05       	cpc	r19, r1
    29c8:	09 f0       	breq	.+2      	; 0x29cc <_Z5checkv+0x188e>
    29ca:	b3 cf       	rjmp	.-154    	; 0x2932 <_Z5checkv+0x17f4>
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
    29cc:	c0 90 f2 03 	lds	r12, 0x03F2	; 0x8003f2 <passww+0x8>
    29d0:	d0 90 f3 03 	lds	r13, 0x03F3	; 0x8003f3 <passww+0x9>
    29d4:	08 e7       	ldi	r16, 0x78	; 120
    29d6:	13 e0       	ldi	r17, 0x03	; 3
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    29d8:	1a 82       	std	Y+2, r1	; 0x02
    29da:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    29dc:	0f 2e       	mov	r0, r31
    29de:	f7 e0       	ldi	r31, 0x07	; 7
    29e0:	ef 2e       	mov	r14, r31
    29e2:	f1 2c       	mov	r15, r1
    29e4:	f0 2d       	mov	r31, r0
    29e6:	9c 2c       	mov	r9, r12
    29e8:	8d 2c       	mov	r8, r13
    29ea:	f8 01       	movw	r30, r16
    29ec:	41 91       	ld	r20, Z+
    29ee:	8f 01       	movw	r16, r30
    29f0:	50 e0       	ldi	r21, 0x00	; 0
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	87 70       	andi	r24, 0x07	; 7
    29f8:	90 78       	andi	r25, 0x80	; 128
    29fa:	99 23       	and	r25, r25
    29fc:	24 f4       	brge	.+8      	; 0x2a06 <_Z5checkv+0x18c8>
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	88 6f       	ori	r24, 0xF8	; 248
    2a02:	9f 6f       	ori	r25, 0xFF	; 255
    2a04:	01 96       	adiw	r24, 0x01	; 1
    2a06:	b7 01       	movw	r22, r14
    2a08:	68 1b       	sub	r22, r24
    2a0a:	79 0b       	sbc	r23, r25
    2a0c:	9f 82       	std	Y+7, r9	; 0x07
    2a0e:	88 86       	std	Y+8, r8	; 0x08
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	99 23       	and	r25, r25
    2a16:	0c f4       	brge	.+2      	; 0x2a1a <_Z5checkv+0x18dc>
    2a18:	07 96       	adiw	r24, 0x07	; 7
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	f5 95       	asr	r31
    2a1e:	e7 95       	ror	r30
    2a20:	f5 95       	asr	r31
    2a22:	e7 95       	ror	r30
    2a24:	f5 95       	asr	r31
    2a26:	e7 95       	ror	r30
    2a28:	ea 0f       	add	r30, r26
    2a2a:	fb 1f       	adc	r31, r27
    2a2c:	f6 95       	lsr	r31
    2a2e:	fe 2f       	mov	r31, r30
    2a30:	ee 27       	eor	r30, r30
    2a32:	f7 95       	ror	r31
    2a34:	e7 95       	ror	r30
    2a36:	ec 0d       	add	r30, r12
    2a38:	fd 1d       	adc	r31, r13
    2a3a:	e5 50       	subi	r30, 0x05	; 5
    2a3c:	fc 4f       	sbci	r31, 0xFC	; 252
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	ca 01       	movw	r24, r20
    2a44:	02 2e       	mov	r0, r18
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <_Z5checkv+0x190e>
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	0a 94       	dec	r0
    2a4e:	e2 f7       	brpl	.-8      	; 0x2a48 <_Z5checkv+0x190a>
    2a50:	80 78       	andi	r24, 0x80	; 128
    2a52:	99 27       	eor	r25, r25
    2a54:	06 2e       	mov	r0, r22
    2a56:	02 c0       	rjmp	.+4      	; 0x2a5c <_Z5checkv+0x191e>
    2a58:	95 95       	asr	r25
    2a5a:	87 95       	ror	r24
    2a5c:	0a 94       	dec	r0
    2a5e:	e2 f7       	brpl	.-8      	; 0x2a58 <_Z5checkv+0x191a>
    2a60:	90 81       	ld	r25, Z
    2a62:	89 2b       	or	r24, r25
    2a64:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2a66:	2f 5f       	subi	r18, 0xFF	; 255
    2a68:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6a:	28 30       	cpi	r18, 0x08	; 8
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	49 f7       	brne	.-46     	; 0x2a42 <_Z5checkv+0x1904>
    2a70:	e9 81       	ldd	r30, Y+1	; 0x01
    2a72:	fa 81       	ldd	r31, Y+2	; 0x02
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2a74:	31 96       	adiw	r30, 0x01	; 1
    2a76:	fa 83       	std	Y+2, r31	; 0x02
    2a78:	e9 83       	std	Y+1, r30	; 0x01
    2a7a:	38 97       	sbiw	r30, 0x08	; 8
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <_Z5checkv+0x1942>
    2a7e:	b5 cf       	rjmp	.-150    	; 0x29ea <_Z5checkv+0x18ac>
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
    2a80:	c0 90 f4 03 	lds	r12, 0x03F4	; 0x8003f4 <passww+0xa>
    2a84:	d0 90 f5 03 	lds	r13, 0x03F5	; 0x8003f5 <passww+0xb>
    2a88:	08 e7       	ldi	r16, 0x78	; 120
    2a8a:	13 e0       	ldi	r17, 0x03	; 3
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2a8c:	1a 82       	std	Y+2, r1	; 0x02
    2a8e:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2a90:	0f 2e       	mov	r0, r31
    2a92:	f7 e0       	ldi	r31, 0x07	; 7
    2a94:	ef 2e       	mov	r14, r31
    2a96:	f1 2c       	mov	r15, r1
    2a98:	f0 2d       	mov	r31, r0
    2a9a:	9c 2c       	mov	r9, r12
    2a9c:	8d 2c       	mov	r8, r13
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	41 91       	ld	r20, Z+
    2aa2:	8f 01       	movw	r16, r30
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aaa:	87 70       	andi	r24, 0x07	; 7
    2aac:	90 78       	andi	r25, 0x80	; 128
    2aae:	99 23       	and	r25, r25
    2ab0:	24 f4       	brge	.+8      	; 0x2aba <_Z5checkv+0x197c>
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	88 6f       	ori	r24, 0xF8	; 248
    2ab6:	9f 6f       	ori	r25, 0xFF	; 255
    2ab8:	01 96       	adiw	r24, 0x01	; 1
    2aba:	b7 01       	movw	r22, r14
    2abc:	68 1b       	sub	r22, r24
    2abe:	79 0b       	sbc	r23, r25
    2ac0:	9d 82       	std	Y+5, r9	; 0x05
    2ac2:	8e 82       	std	Y+6, r8	; 0x06
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	99 23       	and	r25, r25
    2aca:	0c f4       	brge	.+2      	; 0x2ace <_Z5checkv+0x1990>
    2acc:	07 96       	adiw	r24, 0x07	; 7
    2ace:	fc 01       	movw	r30, r24
    2ad0:	f5 95       	asr	r31
    2ad2:	e7 95       	ror	r30
    2ad4:	f5 95       	asr	r31
    2ad6:	e7 95       	ror	r30
    2ad8:	f5 95       	asr	r31
    2ada:	e7 95       	ror	r30
    2adc:	ea 0f       	add	r30, r26
    2ade:	fb 1f       	adc	r31, r27
    2ae0:	f6 95       	lsr	r31
    2ae2:	fe 2f       	mov	r31, r30
    2ae4:	ee 27       	eor	r30, r30
    2ae6:	f7 95       	ror	r31
    2ae8:	e7 95       	ror	r30
    2aea:	ec 0d       	add	r30, r12
    2aec:	fd 1d       	adc	r31, r13
    2aee:	e5 50       	subi	r30, 0x05	; 5
    2af0:	fc 4f       	sbci	r31, 0xFC	; 252
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	ca 01       	movw	r24, r20
    2af8:	02 2e       	mov	r0, r18
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <_Z5checkv+0x19c2>
    2afc:	88 0f       	add	r24, r24
    2afe:	99 1f       	adc	r25, r25
    2b00:	0a 94       	dec	r0
    2b02:	e2 f7       	brpl	.-8      	; 0x2afc <_Z5checkv+0x19be>
    2b04:	80 78       	andi	r24, 0x80	; 128
    2b06:	99 27       	eor	r25, r25
    2b08:	06 2e       	mov	r0, r22
    2b0a:	02 c0       	rjmp	.+4      	; 0x2b10 <_Z5checkv+0x19d2>
    2b0c:	95 95       	asr	r25
    2b0e:	87 95       	ror	r24
    2b10:	0a 94       	dec	r0
    2b12:	e2 f7       	brpl	.-8      	; 0x2b0c <_Z5checkv+0x19ce>
    2b14:	90 81       	ld	r25, Z
    2b16:	89 2b       	or	r24, r25
    2b18:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2b1a:	2f 5f       	subi	r18, 0xFF	; 255
    2b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1e:	28 30       	cpi	r18, 0x08	; 8
    2b20:	31 05       	cpc	r19, r1
    2b22:	49 f7       	brne	.-46     	; 0x2af6 <_Z5checkv+0x19b8>
    2b24:	e9 81       	ldd	r30, Y+1	; 0x01
    2b26:	fa 81       	ldd	r31, Y+2	; 0x02
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2b28:	31 96       	adiw	r30, 0x01	; 1
    2b2a:	fa 83       	std	Y+2, r31	; 0x02
    2b2c:	e9 83       	std	Y+1, r30	; 0x01
    2b2e:	38 97       	sbiw	r30, 0x08	; 8
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <_Z5checkv+0x19f6>
    2b32:	b5 cf       	rjmp	.-150    	; 0x2a9e <_Z5checkv+0x1960>
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
    2b34:	c0 90 f6 03 	lds	r12, 0x03F6	; 0x8003f6 <passww+0xc>
    2b38:	d0 90 f7 03 	lds	r13, 0x03F7	; 0x8003f7 <passww+0xd>
    2b3c:	08 e7       	ldi	r16, 0x78	; 120
    2b3e:	13 e0       	ldi	r17, 0x03	; 3
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2b40:	1a 82       	std	Y+2, r1	; 0x02
    2b42:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2b44:	0f 2e       	mov	r0, r31
    2b46:	f7 e0       	ldi	r31, 0x07	; 7
    2b48:	ef 2e       	mov	r14, r31
    2b4a:	f1 2c       	mov	r15, r1
    2b4c:	f0 2d       	mov	r31, r0
    2b4e:	9c 2c       	mov	r9, r12
    2b50:	8d 2c       	mov	r8, r13
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	3c 83       	std	Y+4, r19	; 0x04
    2b58:	2b 83       	std	Y+3, r18	; 0x03
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	41 91       	ld	r20, Z+
    2b5e:	8f 01       	movw	r16, r30
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	9c 81       	ldd	r25, Y+4	; 0x04
    2b66:	87 70       	andi	r24, 0x07	; 7
    2b68:	90 78       	andi	r25, 0x80	; 128
    2b6a:	99 23       	and	r25, r25
    2b6c:	24 f4       	brge	.+8      	; 0x2b76 <_Z5checkv+0x1a38>
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	88 6f       	ori	r24, 0xF8	; 248
    2b72:	9f 6f       	ori	r25, 0xFF	; 255
    2b74:	01 96       	adiw	r24, 0x01	; 1
    2b76:	b7 01       	movw	r22, r14
    2b78:	68 1b       	sub	r22, r24
    2b7a:	79 0b       	sbc	r23, r25
    2b7c:	99 82       	std	Y+1, r9	; 0x01
    2b7e:	8a 82       	std	Y+2, r8	; 0x02
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	9c 81       	ldd	r25, Y+4	; 0x04
    2b84:	99 23       	and	r25, r25
    2b86:	0c f4       	brge	.+2      	; 0x2b8a <_Z5checkv+0x1a4c>
    2b88:	07 96       	adiw	r24, 0x07	; 7
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	f5 95       	asr	r31
    2b8e:	e7 95       	ror	r30
    2b90:	f5 95       	asr	r31
    2b92:	e7 95       	ror	r30
    2b94:	f5 95       	asr	r31
    2b96:	e7 95       	ror	r30
    2b98:	ea 0f       	add	r30, r26
    2b9a:	fb 1f       	adc	r31, r27
    2b9c:	f6 95       	lsr	r31
    2b9e:	fe 2f       	mov	r31, r30
    2ba0:	ee 27       	eor	r30, r30
    2ba2:	f7 95       	ror	r31
    2ba4:	e7 95       	ror	r30
    2ba6:	ec 0d       	add	r30, r12
    2ba8:	fd 1d       	adc	r31, r13
    2baa:	e5 50       	subi	r30, 0x05	; 5
    2bac:	fc 4f       	sbci	r31, 0xFC	; 252
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	ca 01       	movw	r24, r20
    2bb4:	02 2e       	mov	r0, r18
    2bb6:	02 c0       	rjmp	.+4      	; 0x2bbc <_Z5checkv+0x1a7e>
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	0a 94       	dec	r0
    2bbe:	e2 f7       	brpl	.-8      	; 0x2bb8 <_Z5checkv+0x1a7a>
    2bc0:	80 78       	andi	r24, 0x80	; 128
    2bc2:	99 27       	eor	r25, r25
    2bc4:	06 2e       	mov	r0, r22
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <_Z5checkv+0x1a8e>
    2bc8:	95 95       	asr	r25
    2bca:	87 95       	ror	r24
    2bcc:	0a 94       	dec	r0
    2bce:	e2 f7       	brpl	.-8      	; 0x2bc8 <_Z5checkv+0x1a8a>
    2bd0:	90 81       	ld	r25, Z
    2bd2:	89 2b       	or	r24, r25
    2bd4:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2bd6:	2f 5f       	subi	r18, 0xFF	; 255
    2bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bda:	28 30       	cpi	r18, 0x08	; 8
    2bdc:	31 05       	cpc	r19, r1
    2bde:	49 f7       	brne	.-46     	; 0x2bb2 <_Z5checkv+0x1a74>
    2be0:	eb 81       	ldd	r30, Y+3	; 0x03
    2be2:	fc 81       	ldd	r31, Y+4	; 0x04
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2be4:	31 96       	adiw	r30, 0x01	; 1
    2be6:	fc 83       	std	Y+4, r31	; 0x04
    2be8:	eb 83       	std	Y+3, r30	; 0x03
    2bea:	38 97       	sbiw	r30, 0x08	; 8
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <_Z5checkv+0x1ab2>
    2bee:	b5 cf       	rjmp	.-150    	; 0x2b5a <_Z5checkv+0x1a1c>
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord+2,1,8,downn);
    2bf0:	15 01       	movw	r2, r10
    2bf2:	f2 e0       	ldi	r31, 0x02	; 2
    2bf4:	2f 0e       	add	r2, r31
    2bf6:	31 1c       	adc	r3, r1
    2bf8:	c0 90 ea 03 	lds	r12, 0x03EA	; 0x8003ea <passww>
    2bfc:	d0 90 eb 03 	lds	r13, 0x03EB	; 0x8003eb <passww+0x1>
    2c00:	f6 01       	movw	r30, r12
    2c02:	ee 0f       	add	r30, r30
    2c04:	ff 1f       	adc	r31, r31
    2c06:	e2 51       	subi	r30, 0x12	; 18
    2c08:	fc 4f       	sbci	r31, 0xFC	; 252
    2c0a:	40 80       	ld	r4, Z
    2c0c:	51 80       	ldd	r5, Z+1	; 0x01
    2c0e:	0f 2e       	mov	r0, r31
    2c10:	f0 e6       	ldi	r31, 0x60	; 96
    2c12:	8f 2e       	mov	r8, r31
    2c14:	f3 e0       	ldi	r31, 0x03	; 3
    2c16:	9f 2e       	mov	r9, r31
    2c18:	f0 2d       	mov	r31, r0
    2c1a:	84 01       	movw	r16, r8
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2c1c:	1c 82       	std	Y+4, r1	; 0x04
    2c1e:	1b 82       	std	Y+3, r1	; 0x03
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2c20:	0f 2e       	mov	r0, r31
    2c22:	f7 e0       	ldi	r31, 0x07	; 7
    2c24:	ef 2e       	mov	r14, r31
    2c26:	f1 2c       	mov	r15, r1
    2c28:	f0 2d       	mov	r31, r0
    2c2a:	4d 86       	std	Y+13, r4	; 0x0d
    2c2c:	5f 86       	std	Y+15, r5	; 0x0f
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	3a 8b       	std	Y+18, r19	; 0x12
    2c34:	29 8b       	std	Y+17, r18	; 0x11
    2c36:	f8 01       	movw	r30, r16
    2c38:	41 91       	ld	r20, Z+
    2c3a:	8f 01       	movw	r16, r30
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	89 89       	ldd	r24, Y+17	; 0x11
    2c40:	9a 89       	ldd	r25, Y+18	; 0x12
    2c42:	87 70       	andi	r24, 0x07	; 7
    2c44:	90 78       	andi	r25, 0x80	; 128
    2c46:	99 23       	and	r25, r25
    2c48:	24 f4       	brge	.+8      	; 0x2c52 <_Z5checkv+0x1b14>
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	88 6f       	ori	r24, 0xF8	; 248
    2c4e:	9f 6f       	ori	r25, 0xFF	; 255
    2c50:	01 96       	adiw	r24, 0x01	; 1
    2c52:	b7 01       	movw	r22, r14
    2c54:	68 1b       	sub	r22, r24
    2c56:	79 0b       	sbc	r23, r25
    2c58:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c5a:	fb 83       	std	Y+3, r31	; 0x03
    2c5c:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c5e:	2c 83       	std	Y+4, r18	; 0x04
    2c60:	89 89       	ldd	r24, Y+17	; 0x11
    2c62:	9a 89       	ldd	r25, Y+18	; 0x12
    2c64:	99 23       	and	r25, r25
    2c66:	0c f4       	brge	.+2      	; 0x2c6a <_Z5checkv+0x1b2c>
    2c68:	07 96       	adiw	r24, 0x07	; 7
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	f5 95       	asr	r31
    2c6e:	e7 95       	ror	r30
    2c70:	f5 95       	asr	r31
    2c72:	e7 95       	ror	r30
    2c74:	f5 95       	asr	r31
    2c76:	e7 95       	ror	r30
    2c78:	e2 0d       	add	r30, r2
    2c7a:	f3 1d       	adc	r31, r3
    2c7c:	f6 95       	lsr	r31
    2c7e:	fe 2f       	mov	r31, r30
    2c80:	ee 27       	eor	r30, r30
    2c82:	f7 95       	ror	r31
    2c84:	e7 95       	ror	r30
    2c86:	e4 0d       	add	r30, r4
    2c88:	f5 1d       	adc	r31, r5
    2c8a:	e5 50       	subi	r30, 0x05	; 5
    2c8c:	fc 4f       	sbci	r31, 0xFC	; 252
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	ca 01       	movw	r24, r20
    2c94:	02 2e       	mov	r0, r18
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <_Z5checkv+0x1b5e>
    2c98:	88 0f       	add	r24, r24
    2c9a:	99 1f       	adc	r25, r25
    2c9c:	0a 94       	dec	r0
    2c9e:	e2 f7       	brpl	.-8      	; 0x2c98 <_Z5checkv+0x1b5a>
    2ca0:	80 78       	andi	r24, 0x80	; 128
    2ca2:	99 27       	eor	r25, r25
    2ca4:	06 2e       	mov	r0, r22
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <_Z5checkv+0x1b6e>
    2ca8:	95 95       	asr	r25
    2caa:	87 95       	ror	r24
    2cac:	0a 94       	dec	r0
    2cae:	e2 f7       	brpl	.-8      	; 0x2ca8 <_Z5checkv+0x1b6a>
    2cb0:	90 81       	ld	r25, Z
    2cb2:	89 2b       	or	r24, r25
    2cb4:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2cb6:	2f 5f       	subi	r18, 0xFF	; 255
    2cb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cba:	28 30       	cpi	r18, 0x08	; 8
    2cbc:	31 05       	cpc	r19, r1
    2cbe:	49 f7       	brne	.-46     	; 0x2c92 <_Z5checkv+0x1b54>
    2cc0:	e9 89       	ldd	r30, Y+17	; 0x11
    2cc2:	fa 89       	ldd	r31, Y+18	; 0x12
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2cc4:	31 96       	adiw	r30, 0x01	; 1
    2cc6:	fa 8b       	std	Y+18, r31	; 0x12
    2cc8:	e9 8b       	std	Y+17, r30	; 0x11
    2cca:	38 97       	sbiw	r30, 0x08	; 8
    2ccc:	09 f0       	breq	.+2      	; 0x2cd0 <_Z5checkv+0x1b92>
    2cce:	b3 cf       	rjmp	.-154    	; 0x2c36 <_Z5checkv+0x1af8>
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord+2,1,8,downn);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord-1,1,8,upp);
    2cd0:	25 01       	movw	r4, r10
    2cd2:	f1 e0       	ldi	r31, 0x01	; 1
    2cd4:	4f 1a       	sub	r4, r31
    2cd6:	51 08       	sbc	r5, r1
    2cd8:	08 e6       	ldi	r16, 0x68	; 104
    2cda:	13 e0       	ldi	r17, 0x03	; 3
    2cdc:	1e 87       	std	Y+14, r17	; 0x0e
    2cde:	0d 87       	std	Y+13, r16	; 0x0d
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2ce0:	18 8a       	std	Y+16, r1	; 0x10
    2ce2:	1f 86       	std	Y+15, r1	; 0x0f
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2ce4:	0f 2e       	mov	r0, r31
    2ce6:	f7 e0       	ldi	r31, 0x07	; 7
    2ce8:	ef 2e       	mov	r14, r31
    2cea:	f1 2c       	mov	r15, r1
    2cec:	f0 2d       	mov	r31, r0
    2cee:	f8 01       	movw	r30, r16
    2cf0:	41 91       	ld	r20, Z+
    2cf2:	8f 01       	movw	r16, r30
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf8:	98 89       	ldd	r25, Y+16	; 0x10
    2cfa:	87 70       	andi	r24, 0x07	; 7
    2cfc:	90 78       	andi	r25, 0x80	; 128
    2cfe:	99 23       	and	r25, r25
    2d00:	24 f4       	brge	.+8      	; 0x2d0a <_Z5checkv+0x1bcc>
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	88 6f       	ori	r24, 0xF8	; 248
    2d06:	9f 6f       	ori	r25, 0xFF	; 255
    2d08:	01 96       	adiw	r24, 0x01	; 1
    2d0a:	b7 01       	movw	r22, r14
    2d0c:	68 1b       	sub	r22, r24
    2d0e:	79 0b       	sbc	r23, r25
    2d10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d12:	98 89       	ldd	r25, Y+16	; 0x10
    2d14:	99 23       	and	r25, r25
    2d16:	0c f4       	brge	.+2      	; 0x2d1a <_Z5checkv+0x1bdc>
    2d18:	07 96       	adiw	r24, 0x07	; 7
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	f5 95       	asr	r31
    2d1e:	e7 95       	ror	r30
    2d20:	f5 95       	asr	r31
    2d22:	e7 95       	ror	r30
    2d24:	f5 95       	asr	r31
    2d26:	e7 95       	ror	r30
    2d28:	e4 0d       	add	r30, r4
    2d2a:	f5 1d       	adc	r31, r5
    2d2c:	f6 95       	lsr	r31
    2d2e:	fe 2f       	mov	r31, r30
    2d30:	ee 27       	eor	r30, r30
    2d32:	f7 95       	ror	r31
    2d34:	e7 95       	ror	r30
    2d36:	2b 81       	ldd	r18, Y+3	; 0x03
    2d38:	3c 81       	ldd	r19, Y+4	; 0x04
    2d3a:	e2 0f       	add	r30, r18
    2d3c:	f3 1f       	adc	r31, r19
    2d3e:	e5 50       	subi	r30, 0x05	; 5
    2d40:	fc 4f       	sbci	r31, 0xFC	; 252
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	ca 01       	movw	r24, r20
    2d48:	02 2e       	mov	r0, r18
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <_Z5checkv+0x1c12>
    2d4c:	88 0f       	add	r24, r24
    2d4e:	99 1f       	adc	r25, r25
    2d50:	0a 94       	dec	r0
    2d52:	e2 f7       	brpl	.-8      	; 0x2d4c <_Z5checkv+0x1c0e>
    2d54:	80 78       	andi	r24, 0x80	; 128
    2d56:	99 27       	eor	r25, r25
    2d58:	06 2e       	mov	r0, r22
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <_Z5checkv+0x1c22>
    2d5c:	95 95       	asr	r25
    2d5e:	87 95       	ror	r24
    2d60:	0a 94       	dec	r0
    2d62:	e2 f7       	brpl	.-8      	; 0x2d5c <_Z5checkv+0x1c1e>
    2d64:	90 81       	ld	r25, Z
    2d66:	89 2b       	or	r24, r25
    2d68:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2d6a:	2f 5f       	subi	r18, 0xFF	; 255
    2d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6e:	28 30       	cpi	r18, 0x08	; 8
    2d70:	31 05       	cpc	r19, r1
    2d72:	49 f7       	brne	.-46     	; 0x2d46 <_Z5checkv+0x1c08>
    2d74:	ef 85       	ldd	r30, Y+15	; 0x0f
    2d76:	f8 89       	ldd	r31, Y+16	; 0x10
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2d78:	31 96       	adiw	r30, 0x01	; 1
    2d7a:	f8 8b       	std	Y+16, r31	; 0x10
    2d7c:	ef 87       	std	Y+15, r30	; 0x0f
    2d7e:	38 97       	sbiw	r30, 0x08	; 8
    2d80:	09 f0       	breq	.+2      	; 0x2d84 <_Z5checkv+0x1c46>
    2d82:	b5 cf       	rjmp	.-150    	; 0x2cee <_Z5checkv+0x1bb0>
	}
	
	void forward()
	{
		write_default();
		pointer++;
    2d84:	ff ef       	ldi	r31, 0xFF	; 255
    2d86:	cf 1a       	sub	r12, r31
    2d88:	df 0a       	sbc	r13, r31
    2d8a:	d0 92 eb 03 	sts	0x03EB, r13	; 0x8003eb <passww+0x1>
    2d8e:	c0 92 ea 03 	sts	0x03EA, r12	; 0x8003ea <passww>
		if(pointer>4)pointer=4;
    2d92:	05 e0       	ldi	r16, 0x05	; 5
    2d94:	c0 16       	cp	r12, r16
    2d96:	d1 04       	cpc	r13, r1
    2d98:	14 f4       	brge	.+4      	; 0x2d9e <_Z5checkv+0x1c60>
    2d9a:	0c 94 17 22 	jmp	0x442e	; 0x442e <__stack+0x32f>
    2d9e:	84 e0       	ldi	r24, 0x04	; 4
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <passww+0x1>
    2da6:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <passww>
    2daa:	0c 94 17 22 	jmp	0x442e	; 0x442e <__stack+0x32f>
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2dae:	f7 01       	movw	r30, r14
    2db0:	61 91       	ld	r22, Z+
    2db2:	7f 01       	movw	r14, r30
    2db4:	70 e0       	ldi	r23, 0x00	; 0
    2db6:	ca 01       	movw	r24, r20
    2db8:	87 70       	andi	r24, 0x07	; 7
    2dba:	90 78       	andi	r25, 0x80	; 128
    2dbc:	99 23       	and	r25, r25
    2dbe:	24 f4       	brge	.+8      	; 0x2dc8 <_Z5checkv+0x1c8a>
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	88 6f       	ori	r24, 0xF8	; 248
    2dc4:	9f 6f       	ori	r25, 0xFF	; 255
    2dc6:	01 96       	adiw	r24, 0x01	; 1
    2dc8:	98 01       	movw	r18, r16
    2dca:	28 1b       	sub	r18, r24
    2dcc:	39 0b       	sbc	r19, r25
    2dce:	3c 83       	std	Y+4, r19	; 0x04
    2dd0:	2b 83       	std	Y+3, r18	; 0x03
    2dd2:	ca 01       	movw	r24, r20
    2dd4:	55 23       	and	r21, r21
    2dd6:	0c f4       	brge	.+2      	; 0x2dda <_Z5checkv+0x1c9c>
    2dd8:	07 96       	adiw	r24, 0x07	; 7
    2dda:	fc 01       	movw	r30, r24
    2ddc:	f5 95       	asr	r31
    2dde:	e7 95       	ror	r30
    2de0:	f5 95       	asr	r31
    2de2:	e7 95       	ror	r30
    2de4:	f5 95       	asr	r31
    2de6:	e7 95       	ror	r30
    2de8:	ea 0f       	add	r30, r26
    2dea:	fb 1f       	adc	r31, r27
    2dec:	f6 95       	lsr	r31
    2dee:	fe 2f       	mov	r31, r30
    2df0:	ee 27       	eor	r30, r30
    2df2:	f7 95       	ror	r31
    2df4:	e7 95       	ror	r30
    2df6:	89 85       	ldd	r24, Y+9	; 0x09
    2df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfa:	e8 0f       	add	r30, r24
    2dfc:	f9 1f       	adc	r31, r25
    2dfe:	e5 50       	subi	r30, 0x05	; 5
    2e00:	fc 4f       	sbci	r31, 0xFC	; 252
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	cb 01       	movw	r24, r22
    2e08:	02 2e       	mov	r0, r18
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <_Z5checkv+0x1cd2>
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	0a 94       	dec	r0
    2e12:	e2 f7       	brpl	.-8      	; 0x2e0c <_Z5checkv+0x1cce>
    2e14:	80 78       	andi	r24, 0x80	; 128
    2e16:	99 27       	eor	r25, r25
    2e18:	0b 80       	ldd	r0, Y+3	; 0x03
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <_Z5checkv+0x1ce2>
    2e1c:	95 95       	asr	r25
    2e1e:	87 95       	ror	r24
    2e20:	0a 94       	dec	r0
    2e22:	e2 f7       	brpl	.-8      	; 0x2e1c <_Z5checkv+0x1cde>
    2e24:	90 81       	ld	r25, Z
    2e26:	89 2b       	or	r24, r25
    2e28:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2e2a:	2f 5f       	subi	r18, 0xFF	; 255
    2e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2e:	28 30       	cpi	r18, 0x08	; 8
    2e30:	31 05       	cpc	r19, r1
    2e32:	49 f7       	brne	.-46     	; 0x2e06 <_Z5checkv+0x1cc8>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2e34:	4f 5f       	subi	r20, 0xFF	; 255
    2e36:	5f 4f       	sbci	r21, 0xFF	; 255
    2e38:	48 30       	cpi	r20, 0x08	; 8
    2e3a:	51 05       	cpc	r21, r1
    2e3c:	09 f0       	breq	.+2      	; 0x2e40 <_Z5checkv+0x1d02>
    2e3e:	b7 cf       	rjmp	.-146    	; 0x2dae <_Z5checkv+0x1c70>
    2e40:	08 e7       	ldi	r16, 0x78	; 120
    2e42:	13 e0       	ldi	r17, 0x03	; 3
    2e44:	40 e0       	ldi	r20, 0x00	; 0
    2e46:	50 e0       	ldi	r21, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2e48:	0f 2e       	mov	r0, r31
    2e4a:	f7 e0       	ldi	r31, 0x07	; 7
    2e4c:	ef 2e       	mov	r14, r31
    2e4e:	f1 2c       	mov	r15, r1
    2e50:	f0 2d       	mov	r31, r0
    2e52:	f8 01       	movw	r30, r16
    2e54:	61 91       	ld	r22, Z+
    2e56:	8f 01       	movw	r16, r30
    2e58:	70 e0       	ldi	r23, 0x00	; 0
    2e5a:	ca 01       	movw	r24, r20
    2e5c:	87 70       	andi	r24, 0x07	; 7
    2e5e:	90 78       	andi	r25, 0x80	; 128
    2e60:	99 23       	and	r25, r25
    2e62:	24 f4       	brge	.+8      	; 0x2e6c <_Z5checkv+0x1d2e>
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	88 6f       	ori	r24, 0xF8	; 248
    2e68:	9f 6f       	ori	r25, 0xFF	; 255
    2e6a:	01 96       	adiw	r24, 0x01	; 1
    2e6c:	97 01       	movw	r18, r14
    2e6e:	28 1b       	sub	r18, r24
    2e70:	39 0b       	sbc	r19, r25
    2e72:	3c 83       	std	Y+4, r19	; 0x04
    2e74:	2b 83       	std	Y+3, r18	; 0x03
    2e76:	ca 01       	movw	r24, r20
    2e78:	55 23       	and	r21, r21
    2e7a:	0c f4       	brge	.+2      	; 0x2e7e <_Z5checkv+0x1d40>
    2e7c:	07 96       	adiw	r24, 0x07	; 7
    2e7e:	fc 01       	movw	r30, r24
    2e80:	f5 95       	asr	r31
    2e82:	e7 95       	ror	r30
    2e84:	f5 95       	asr	r31
    2e86:	e7 95       	ror	r30
    2e88:	f5 95       	asr	r31
    2e8a:	e7 95       	ror	r30
    2e8c:	ea 0f       	add	r30, r26
    2e8e:	fb 1f       	adc	r31, r27
    2e90:	f6 95       	lsr	r31
    2e92:	fe 2f       	mov	r31, r30
    2e94:	ee 27       	eor	r30, r30
    2e96:	f7 95       	ror	r31
    2e98:	e7 95       	ror	r30
    2e9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e9e:	e8 0f       	add	r30, r24
    2ea0:	f9 1f       	adc	r31, r25
    2ea2:	e5 50       	subi	r30, 0x05	; 5
    2ea4:	fc 4f       	sbci	r31, 0xFC	; 252
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	cb 01       	movw	r24, r22
    2eac:	02 2e       	mov	r0, r18
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <_Z5checkv+0x1d76>
    2eb0:	88 0f       	add	r24, r24
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	0a 94       	dec	r0
    2eb6:	e2 f7       	brpl	.-8      	; 0x2eb0 <_Z5checkv+0x1d72>
    2eb8:	80 78       	andi	r24, 0x80	; 128
    2eba:	99 27       	eor	r25, r25
    2ebc:	0b 80       	ldd	r0, Y+3	; 0x03
    2ebe:	02 c0       	rjmp	.+4      	; 0x2ec4 <_Z5checkv+0x1d86>
    2ec0:	95 95       	asr	r25
    2ec2:	87 95       	ror	r24
    2ec4:	0a 94       	dec	r0
    2ec6:	e2 f7       	brpl	.-8      	; 0x2ec0 <_Z5checkv+0x1d82>
    2ec8:	90 81       	ld	r25, Z
    2eca:	89 2b       	or	r24, r25
    2ecc:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2ece:	2f 5f       	subi	r18, 0xFF	; 255
    2ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ed2:	28 30       	cpi	r18, 0x08	; 8
    2ed4:	31 05       	cpc	r19, r1
    2ed6:	49 f7       	brne	.-46     	; 0x2eaa <_Z5checkv+0x1d6c>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2ed8:	4f 5f       	subi	r20, 0xFF	; 255
    2eda:	5f 4f       	sbci	r21, 0xFF	; 255
    2edc:	48 30       	cpi	r20, 0x08	; 8
    2ede:	51 05       	cpc	r21, r1
    2ee0:	09 f0       	breq	.+2      	; 0x2ee4 <_Z5checkv+0x1da6>
    2ee2:	b7 cf       	rjmp	.-146    	; 0x2e52 <_Z5checkv+0x1d14>
    2ee4:	08 e7       	ldi	r16, 0x78	; 120
    2ee6:	13 e0       	ldi	r17, 0x03	; 3
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	50 e0       	ldi	r21, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2eec:	0f 2e       	mov	r0, r31
    2eee:	f7 e0       	ldi	r31, 0x07	; 7
    2ef0:	ef 2e       	mov	r14, r31
    2ef2:	f1 2c       	mov	r15, r1
    2ef4:	f0 2d       	mov	r31, r0
    2ef6:	f8 01       	movw	r30, r16
    2ef8:	61 91       	ld	r22, Z+
    2efa:	8f 01       	movw	r16, r30
    2efc:	70 e0       	ldi	r23, 0x00	; 0
    2efe:	ca 01       	movw	r24, r20
    2f00:	87 70       	andi	r24, 0x07	; 7
    2f02:	90 78       	andi	r25, 0x80	; 128
    2f04:	99 23       	and	r25, r25
    2f06:	24 f4       	brge	.+8      	; 0x2f10 <_Z5checkv+0x1dd2>
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	88 6f       	ori	r24, 0xF8	; 248
    2f0c:	9f 6f       	ori	r25, 0xFF	; 255
    2f0e:	01 96       	adiw	r24, 0x01	; 1
    2f10:	97 01       	movw	r18, r14
    2f12:	28 1b       	sub	r18, r24
    2f14:	39 0b       	sbc	r19, r25
    2f16:	3c 83       	std	Y+4, r19	; 0x04
    2f18:	2b 83       	std	Y+3, r18	; 0x03
    2f1a:	ca 01       	movw	r24, r20
    2f1c:	55 23       	and	r21, r21
    2f1e:	0c f4       	brge	.+2      	; 0x2f22 <_Z5checkv+0x1de4>
    2f20:	07 96       	adiw	r24, 0x07	; 7
    2f22:	fc 01       	movw	r30, r24
    2f24:	f5 95       	asr	r31
    2f26:	e7 95       	ror	r30
    2f28:	f5 95       	asr	r31
    2f2a:	e7 95       	ror	r30
    2f2c:	f5 95       	asr	r31
    2f2e:	e7 95       	ror	r30
    2f30:	ea 0f       	add	r30, r26
    2f32:	fb 1f       	adc	r31, r27
    2f34:	f6 95       	lsr	r31
    2f36:	fe 2f       	mov	r31, r30
    2f38:	ee 27       	eor	r30, r30
    2f3a:	f7 95       	ror	r31
    2f3c:	e7 95       	ror	r30
    2f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f40:	98 85       	ldd	r25, Y+8	; 0x08
    2f42:	e8 0f       	add	r30, r24
    2f44:	f9 1f       	adc	r31, r25
    2f46:	e5 50       	subi	r30, 0x05	; 5
    2f48:	fc 4f       	sbci	r31, 0xFC	; 252
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	cb 01       	movw	r24, r22
    2f50:	02 2e       	mov	r0, r18
    2f52:	02 c0       	rjmp	.+4      	; 0x2f58 <_Z5checkv+0x1e1a>
    2f54:	88 0f       	add	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	0a 94       	dec	r0
    2f5a:	e2 f7       	brpl	.-8      	; 0x2f54 <_Z5checkv+0x1e16>
    2f5c:	80 78       	andi	r24, 0x80	; 128
    2f5e:	99 27       	eor	r25, r25
    2f60:	0b 80       	ldd	r0, Y+3	; 0x03
    2f62:	02 c0       	rjmp	.+4      	; 0x2f68 <_Z5checkv+0x1e2a>
    2f64:	95 95       	asr	r25
    2f66:	87 95       	ror	r24
    2f68:	0a 94       	dec	r0
    2f6a:	e2 f7       	brpl	.-8      	; 0x2f64 <_Z5checkv+0x1e26>
    2f6c:	90 81       	ld	r25, Z
    2f6e:	89 2b       	or	r24, r25
    2f70:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    2f72:	2f 5f       	subi	r18, 0xFF	; 255
    2f74:	3f 4f       	sbci	r19, 0xFF	; 255
    2f76:	28 30       	cpi	r18, 0x08	; 8
    2f78:	31 05       	cpc	r19, r1
    2f7a:	49 f7       	brne	.-46     	; 0x2f4e <_Z5checkv+0x1e10>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    2f7c:	4f 5f       	subi	r20, 0xFF	; 255
    2f7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f80:	48 30       	cpi	r20, 0x08	; 8
    2f82:	51 05       	cpc	r21, r1
    2f84:	09 f0       	breq	.+2      	; 0x2f88 <_Z5checkv+0x1e4a>
    2f86:	b7 cf       	rjmp	.-146    	; 0x2ef6 <_Z5checkv+0x1db8>
    2f88:	08 e7       	ldi	r16, 0x78	; 120
    2f8a:	13 e0       	ldi	r17, 0x03	; 3
    2f8c:	40 e0       	ldi	r20, 0x00	; 0
    2f8e:	50 e0       	ldi	r21, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    2f90:	0f 2e       	mov	r0, r31
    2f92:	f7 e0       	ldi	r31, 0x07	; 7
    2f94:	ef 2e       	mov	r14, r31
    2f96:	f1 2c       	mov	r15, r1
    2f98:	f0 2d       	mov	r31, r0
    2f9a:	f8 01       	movw	r30, r16
    2f9c:	61 91       	ld	r22, Z+
    2f9e:	8f 01       	movw	r16, r30
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	ca 01       	movw	r24, r20
    2fa4:	87 70       	andi	r24, 0x07	; 7
    2fa6:	90 78       	andi	r25, 0x80	; 128
    2fa8:	99 23       	and	r25, r25
    2faa:	24 f4       	brge	.+8      	; 0x2fb4 <_Z5checkv+0x1e76>
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	88 6f       	ori	r24, 0xF8	; 248
    2fb0:	9f 6f       	ori	r25, 0xFF	; 255
    2fb2:	01 96       	adiw	r24, 0x01	; 1
    2fb4:	97 01       	movw	r18, r14
    2fb6:	28 1b       	sub	r18, r24
    2fb8:	39 0b       	sbc	r19, r25
    2fba:	3c 83       	std	Y+4, r19	; 0x04
    2fbc:	2b 83       	std	Y+3, r18	; 0x03
    2fbe:	ca 01       	movw	r24, r20
    2fc0:	55 23       	and	r21, r21
    2fc2:	0c f4       	brge	.+2      	; 0x2fc6 <_Z5checkv+0x1e88>
    2fc4:	07 96       	adiw	r24, 0x07	; 7
    2fc6:	fc 01       	movw	r30, r24
    2fc8:	f5 95       	asr	r31
    2fca:	e7 95       	ror	r30
    2fcc:	f5 95       	asr	r31
    2fce:	e7 95       	ror	r30
    2fd0:	f5 95       	asr	r31
    2fd2:	e7 95       	ror	r30
    2fd4:	ea 0f       	add	r30, r26
    2fd6:	fb 1f       	adc	r31, r27
    2fd8:	f6 95       	lsr	r31
    2fda:	fe 2f       	mov	r31, r30
    2fdc:	ee 27       	eor	r30, r30
    2fde:	f7 95       	ror	r31
    2fe0:	e7 95       	ror	r30
    2fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe6:	e8 0f       	add	r30, r24
    2fe8:	f9 1f       	adc	r31, r25
    2fea:	e5 50       	subi	r30, 0x05	; 5
    2fec:	fc 4f       	sbci	r31, 0xFC	; 252
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	30 e0       	ldi	r19, 0x00	; 0
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	02 2e       	mov	r0, r18
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <_Z5checkv+0x1ebe>
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	0a 94       	dec	r0
    2ffe:	e2 f7       	brpl	.-8      	; 0x2ff8 <_Z5checkv+0x1eba>
    3000:	80 78       	andi	r24, 0x80	; 128
    3002:	99 27       	eor	r25, r25
    3004:	0b 80       	ldd	r0, Y+3	; 0x03
    3006:	02 c0       	rjmp	.+4      	; 0x300c <_Z5checkv+0x1ece>
    3008:	95 95       	asr	r25
    300a:	87 95       	ror	r24
    300c:	0a 94       	dec	r0
    300e:	e2 f7       	brpl	.-8      	; 0x3008 <_Z5checkv+0x1eca>
    3010:	90 81       	ld	r25, Z
    3012:	89 2b       	or	r24, r25
    3014:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3016:	2f 5f       	subi	r18, 0xFF	; 255
    3018:	3f 4f       	sbci	r19, 0xFF	; 255
    301a:	28 30       	cpi	r18, 0x08	; 8
    301c:	31 05       	cpc	r19, r1
    301e:	49 f7       	brne	.-46     	; 0x2ff2 <_Z5checkv+0x1eb4>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3020:	4f 5f       	subi	r20, 0xFF	; 255
    3022:	5f 4f       	sbci	r21, 0xFF	; 255
    3024:	48 30       	cpi	r20, 0x08	; 8
    3026:	51 05       	cpc	r21, r1
    3028:	09 f0       	breq	.+2      	; 0x302c <_Z5checkv+0x1eee>
    302a:	b7 cf       	rjmp	.-146    	; 0x2f9a <_Z5checkv+0x1e5c>
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	50 e0       	ldi	r21, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3030:	07 e0       	ldi	r16, 0x07	; 7
    3032:	10 e0       	ldi	r17, 0x00	; 0
    3034:	f3 01       	movw	r30, r6
    3036:	61 91       	ld	r22, Z+
    3038:	3f 01       	movw	r6, r30
    303a:	70 e0       	ldi	r23, 0x00	; 0
    303c:	ca 01       	movw	r24, r20
    303e:	87 70       	andi	r24, 0x07	; 7
    3040:	90 78       	andi	r25, 0x80	; 128
    3042:	99 23       	and	r25, r25
    3044:	24 f4       	brge	.+8      	; 0x304e <_Z5checkv+0x1f10>
    3046:	01 97       	sbiw	r24, 0x01	; 1
    3048:	88 6f       	ori	r24, 0xF8	; 248
    304a:	9f 6f       	ori	r25, 0xFF	; 255
    304c:	01 96       	adiw	r24, 0x01	; 1
    304e:	98 01       	movw	r18, r16
    3050:	28 1b       	sub	r18, r24
    3052:	39 0b       	sbc	r19, r25
    3054:	3c 83       	std	Y+4, r19	; 0x04
    3056:	2b 83       	std	Y+3, r18	; 0x03
    3058:	ca 01       	movw	r24, r20
    305a:	55 23       	and	r21, r21
    305c:	0c f4       	brge	.+2      	; 0x3060 <_Z5checkv+0x1f22>
    305e:	07 96       	adiw	r24, 0x07	; 7
    3060:	fc 01       	movw	r30, r24
    3062:	f5 95       	asr	r31
    3064:	e7 95       	ror	r30
    3066:	f5 95       	asr	r31
    3068:	e7 95       	ror	r30
    306a:	f5 95       	asr	r31
    306c:	e7 95       	ror	r30
    306e:	ea 0f       	add	r30, r26
    3070:	fb 1f       	adc	r31, r27
    3072:	f6 95       	lsr	r31
    3074:	fe 2f       	mov	r31, r30
    3076:	ee 27       	eor	r30, r30
    3078:	f7 95       	ror	r31
    307a:	e7 95       	ror	r30
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	9a 81       	ldd	r25, Y+2	; 0x02
    3080:	e8 0f       	add	r30, r24
    3082:	f9 1f       	adc	r31, r25
    3084:	e5 50       	subi	r30, 0x05	; 5
    3086:	fc 4f       	sbci	r31, 0xFC	; 252
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	cb 01       	movw	r24, r22
    308e:	02 2e       	mov	r0, r18
    3090:	02 c0       	rjmp	.+4      	; 0x3096 <_Z5checkv+0x1f58>
    3092:	88 0f       	add	r24, r24
    3094:	99 1f       	adc	r25, r25
    3096:	0a 94       	dec	r0
    3098:	e2 f7       	brpl	.-8      	; 0x3092 <_Z5checkv+0x1f54>
    309a:	80 78       	andi	r24, 0x80	; 128
    309c:	99 27       	eor	r25, r25
    309e:	0b 80       	ldd	r0, Y+3	; 0x03
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <_Z5checkv+0x1f68>
    30a2:	95 95       	asr	r25
    30a4:	87 95       	ror	r24
    30a6:	0a 94       	dec	r0
    30a8:	e2 f7       	brpl	.-8      	; 0x30a2 <_Z5checkv+0x1f64>
    30aa:	90 81       	ld	r25, Z
    30ac:	89 2b       	or	r24, r25
    30ae:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    30b0:	2f 5f       	subi	r18, 0xFF	; 255
    30b2:	3f 4f       	sbci	r19, 0xFF	; 255
    30b4:	28 30       	cpi	r18, 0x08	; 8
    30b6:	31 05       	cpc	r19, r1
    30b8:	49 f7       	brne	.-46     	; 0x308c <_Z5checkv+0x1f4e>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    30ba:	4f 5f       	subi	r20, 0xFF	; 255
    30bc:	5f 4f       	sbci	r21, 0xFF	; 255
    30be:	48 30       	cpi	r20, 0x08	; 8
    30c0:	51 05       	cpc	r21, r1
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <_Z5checkv+0x1f88>
    30c4:	b7 cf       	rjmp	.-146    	; 0x3034 <_Z5checkv+0x1ef6>
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord+2,1,8,downn);
    30c6:	f6 01       	movw	r30, r12
    30c8:	ee 0f       	add	r30, r30
    30ca:	ff 1f       	adc	r31, r31
    30cc:	e2 51       	subi	r30, 0x12	; 18
    30ce:	fc 4f       	sbci	r31, 0xFC	; 252
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    30d4:	40 e0       	ldi	r20, 0x00	; 0
    30d6:	50 e0       	ldi	r21, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    30d8:	0f 2e       	mov	r0, r31
    30da:	f7 e0       	ldi	r31, 0x07	; 7
    30dc:	ef 2e       	mov	r14, r31
    30de:	f1 2c       	mov	r15, r1
    30e0:	f0 2d       	mov	r31, r0
    30e2:	c6 2e       	mov	r12, r22
    30e4:	d7 2e       	mov	r13, r23
    30e6:	f4 01       	movw	r30, r8
    30e8:	a1 91       	ld	r26, Z+
    30ea:	4f 01       	movw	r8, r30
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	ca 01       	movw	r24, r20
    30f0:	87 70       	andi	r24, 0x07	; 7
    30f2:	90 78       	andi	r25, 0x80	; 128
    30f4:	99 23       	and	r25, r25
    30f6:	24 f4       	brge	.+8      	; 0x3100 <_Z5checkv+0x1fc2>
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	88 6f       	ori	r24, 0xF8	; 248
    30fc:	9f 6f       	ori	r25, 0xFF	; 255
    30fe:	01 96       	adiw	r24, 0x01	; 1
    3100:	87 01       	movw	r16, r14
    3102:	08 1b       	sub	r16, r24
    3104:	19 0b       	sbc	r17, r25
    3106:	c9 82       	std	Y+1, r12	; 0x01
    3108:	da 82       	std	Y+2, r13	; 0x02
    310a:	ca 01       	movw	r24, r20
    310c:	55 23       	and	r21, r21
    310e:	0c f4       	brge	.+2      	; 0x3112 <_Z5checkv+0x1fd4>
    3110:	07 96       	adiw	r24, 0x07	; 7
    3112:	fc 01       	movw	r30, r24
    3114:	f5 95       	asr	r31
    3116:	e7 95       	ror	r30
    3118:	f5 95       	asr	r31
    311a:	e7 95       	ror	r30
    311c:	f5 95       	asr	r31
    311e:	e7 95       	ror	r30
    3120:	e2 0d       	add	r30, r2
    3122:	f3 1d       	adc	r31, r3
    3124:	f6 95       	lsr	r31
    3126:	fe 2f       	mov	r31, r30
    3128:	ee 27       	eor	r30, r30
    312a:	f7 95       	ror	r31
    312c:	e7 95       	ror	r30
    312e:	e6 0f       	add	r30, r22
    3130:	f7 1f       	adc	r31, r23
    3132:	e5 50       	subi	r30, 0x05	; 5
    3134:	fc 4f       	sbci	r31, 0xFC	; 252
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	cd 01       	movw	r24, r26
    313c:	02 2e       	mov	r0, r18
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <_Z5checkv+0x2006>
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	0a 94       	dec	r0
    3146:	e2 f7       	brpl	.-8      	; 0x3140 <_Z5checkv+0x2002>
    3148:	80 78       	andi	r24, 0x80	; 128
    314a:	99 27       	eor	r25, r25
    314c:	00 2e       	mov	r0, r16
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <_Z5checkv+0x2016>
    3150:	95 95       	asr	r25
    3152:	87 95       	ror	r24
    3154:	0a 94       	dec	r0
    3156:	e2 f7       	brpl	.-8      	; 0x3150 <_Z5checkv+0x2012>
    3158:	90 81       	ld	r25, Z
    315a:	89 2b       	or	r24, r25
    315c:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    315e:	2f 5f       	subi	r18, 0xFF	; 255
    3160:	3f 4f       	sbci	r19, 0xFF	; 255
    3162:	28 30       	cpi	r18, 0x08	; 8
    3164:	31 05       	cpc	r19, r1
    3166:	49 f7       	brne	.-46     	; 0x313a <_Z5checkv+0x1ffc>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3168:	4f 5f       	subi	r20, 0xFF	; 255
    316a:	5f 4f       	sbci	r21, 0xFF	; 255
    316c:	48 30       	cpi	r20, 0x08	; 8
    316e:	51 05       	cpc	r21, r1
    3170:	09 f0       	breq	.+2      	; 0x3174 <_Z5checkv+0x2036>
    3172:	b9 cf       	rjmp	.-142    	; 0x30e6 <_Z5checkv+0x1fa8>
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	50 e0       	ldi	r21, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3178:	0f 2e       	mov	r0, r31
    317a:	f7 e0       	ldi	r31, 0x07	; 7
    317c:	ef 2e       	mov	r14, r31
    317e:	f1 2c       	mov	r15, r1
    3180:	f0 2d       	mov	r31, r0
    3182:	ed 85       	ldd	r30, Y+13	; 0x0d
    3184:	fe 85       	ldd	r31, Y+14	; 0x0e
    3186:	01 91       	ld	r16, Z+
    3188:	10 e0       	ldi	r17, 0x00	; 0
    318a:	ca 01       	movw	r24, r20
    318c:	87 70       	andi	r24, 0x07	; 7
    318e:	90 78       	andi	r25, 0x80	; 128
    3190:	99 23       	and	r25, r25
    3192:	24 f4       	brge	.+8      	; 0x319c <_Z5checkv+0x205e>
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	88 6f       	ori	r24, 0xF8	; 248
    3198:	9f 6f       	ori	r25, 0xFF	; 255
    319a:	01 96       	adiw	r24, 0x01	; 1
    319c:	67 01       	movw	r12, r14
    319e:	c8 1a       	sub	r12, r24
    31a0:	d9 0a       	sbc	r13, r25
    31a2:	ca 01       	movw	r24, r20
    31a4:	55 23       	and	r21, r21
    31a6:	0c f4       	brge	.+2      	; 0x31aa <_Z5checkv+0x206c>
    31a8:	07 96       	adiw	r24, 0x07	; 7
    31aa:	dc 01       	movw	r26, r24
    31ac:	b5 95       	asr	r27
    31ae:	a7 95       	ror	r26
    31b0:	b5 95       	asr	r27
    31b2:	a7 95       	ror	r26
    31b4:	b5 95       	asr	r27
    31b6:	a7 95       	ror	r26
    31b8:	a4 0d       	add	r26, r4
    31ba:	b5 1d       	adc	r27, r5
    31bc:	b6 95       	lsr	r27
    31be:	ba 2f       	mov	r27, r26
    31c0:	aa 27       	eor	r26, r26
    31c2:	b7 95       	ror	r27
    31c4:	a7 95       	ror	r26
    31c6:	29 81       	ldd	r18, Y+1	; 0x01
    31c8:	3a 81       	ldd	r19, Y+2	; 0x02
    31ca:	a2 0f       	add	r26, r18
    31cc:	b3 1f       	adc	r27, r19
    31ce:	a5 50       	subi	r26, 0x05	; 5
    31d0:	bc 4f       	sbci	r27, 0xFC	; 252
    31d2:	20 e0       	ldi	r18, 0x00	; 0
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	c8 01       	movw	r24, r16
    31d8:	02 2e       	mov	r0, r18
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <_Z5checkv+0x20a2>
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	0a 94       	dec	r0
    31e2:	e2 f7       	brpl	.-8      	; 0x31dc <_Z5checkv+0x209e>
    31e4:	80 78       	andi	r24, 0x80	; 128
    31e6:	99 27       	eor	r25, r25
    31e8:	0c 2c       	mov	r0, r12
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <_Z5checkv+0x20b2>
    31ec:	95 95       	asr	r25
    31ee:	87 95       	ror	r24
    31f0:	0a 94       	dec	r0
    31f2:	e2 f7       	brpl	.-8      	; 0x31ec <_Z5checkv+0x20ae>
    31f4:	9c 91       	ld	r25, X
    31f6:	89 2b       	or	r24, r25
    31f8:	8d 93       	st	X+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    31fa:	2f 5f       	subi	r18, 0xFF	; 255
    31fc:	3f 4f       	sbci	r19, 0xFF	; 255
    31fe:	28 30       	cpi	r18, 0x08	; 8
    3200:	31 05       	cpc	r19, r1
    3202:	49 f7       	brne	.-46     	; 0x31d6 <_Z5checkv+0x2098>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3204:	4f 5f       	subi	r20, 0xFF	; 255
    3206:	5f 4f       	sbci	r21, 0xFF	; 255
    3208:	48 30       	cpi	r20, 0x08	; 8
    320a:	51 05       	cpc	r21, r1
    320c:	09 f0       	breq	.+2      	; 0x3210 <_Z5checkv+0x20d2>
    320e:	bb cf       	rjmp	.-138    	; 0x3186 <_Z5checkv+0x2048>
		pointer++;
		if(pointer>4)pointer=4;
		if (pointer<5)
		{ 
			write_default();
			variants(xcoord[pointer],ycoord);
    3210:	a5 01       	movw	r20, r10
    3212:	8a ee       	ldi	r24, 0xEA	; 234
    3214:	93 e0       	ldi	r25, 0x03	; 3
    3216:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN14password_scene8variantsEii>
		}
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord+2,1,8);
    321a:	ea ee       	ldi	r30, 0xEA	; 234
    321c:	f3 e0       	ldi	r31, 0x03	; 3
    321e:	a6 85       	ldd	r26, Z+14	; 0x0e
    3220:	b7 85       	ldd	r27, Z+15	; 0x0f
    3222:	7d 01       	movw	r14, r26
    3224:	32 e0       	ldi	r19, 0x02	; 2
    3226:	e3 0e       	add	r14, r19
    3228:	f1 1c       	adc	r15, r1
    322a:	01 90       	ld	r0, Z+
    322c:	f0 81       	ld	r31, Z
    322e:	e0 2d       	mov	r30, r0
    3230:	ee 0f       	add	r30, r30
    3232:	ff 1f       	adc	r31, r31
    3234:	e4 51       	subi	r30, 0x14	; 20
    3236:	fc 4f       	sbci	r31, 0xFC	; 252
    3238:	40 81       	ld	r20, Z
    323a:	51 81       	ldd	r21, Z+1	; 0x01
    323c:	5a 83       	std	Y+2, r21	; 0x02
    323e:	49 83       	std	Y+1, r20	; 0x01
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    3240:	60 e0       	ldi	r22, 0x00	; 0
    3242:	70 e0       	ldi	r23, 0x00	; 0
    3244:	c9 80       	ldd	r12, Y+1	; 0x01
    3246:	da 80       	ldd	r13, Y+2	; 0x02
    3248:	8a 01       	movw	r16, r20
    324a:	08 5f       	subi	r16, 0xF8	; 248
    324c:	1f 4f       	sbci	r17, 0xFF	; 255
    324e:	2c 2d       	mov	r18, r12
    3250:	3d 2d       	mov	r19, r13
    3252:	cb 01       	movw	r24, r22
    3254:	77 23       	and	r23, r23
    3256:	0c f4       	brge	.+2      	; 0x325a <_Z5checkv+0x211c>
    3258:	07 96       	adiw	r24, 0x07	; 7
    325a:	95 95       	asr	r25
    325c:	87 95       	ror	r24
    325e:	95 95       	asr	r25
    3260:	87 95       	ror	r24
    3262:	95 95       	asr	r25
    3264:	87 95       	ror	r24
    3266:	8e 0d       	add	r24, r14
    3268:	9f 1d       	adc	r25, r15
    326a:	96 95       	lsr	r25
    326c:	98 2f       	mov	r25, r24
    326e:	88 27       	eor	r24, r24
    3270:	97 95       	ror	r25
    3272:	87 95       	ror	r24
    3274:	e9 81       	ldd	r30, Y+1	; 0x01
    3276:	fa 81       	ldd	r31, Y+2	; 0x02
    3278:	e8 0f       	add	r30, r24
    327a:	f9 1f       	adc	r31, r25
    327c:	e5 50       	subi	r30, 0x05	; 5
    327e:	fc 4f       	sbci	r31, 0xFC	; 252
    3280:	a8 01       	movw	r20, r16
    3282:	80 0f       	add	r24, r16
    3284:	91 1f       	adc	r25, r17
    3286:	85 50       	subi	r24, 0x05	; 5
    3288:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    328a:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    328c:	e8 17       	cp	r30, r24
    328e:	f9 07       	cpc	r31, r25
    3290:	e1 f7       	brne	.-8      	; 0x328a <_Z5checkv+0x214c>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    3292:	6f 5f       	subi	r22, 0xFF	; 255
    3294:	7f 4f       	sbci	r23, 0xFF	; 255
    3296:	68 30       	cpi	r22, 0x08	; 8
    3298:	71 05       	cpc	r23, r1
    329a:	c9 f6       	brne	.-78     	; 0x324e <_Z5checkv+0x2110>
		{ 
			write_default();
			variants(xcoord[pointer],ycoord);
		}
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord+2,1,8);
		oled.OLED_Clear_Bufer_part(xcoord[pointer-1],ycoord-1,1,8);
    329c:	11 97       	sbiw	r26, 0x01	; 1
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    329e:	60 e0       	ldi	r22, 0x00	; 0
    32a0:	70 e0       	ldi	r23, 0x00	; 0
    32a2:	cb 01       	movw	r24, r22
    32a4:	77 23       	and	r23, r23
    32a6:	0c f4       	brge	.+2      	; 0x32aa <_Z5checkv+0x216c>
    32a8:	07 96       	adiw	r24, 0x07	; 7
    32aa:	95 95       	asr	r25
    32ac:	87 95       	ror	r24
    32ae:	95 95       	asr	r25
    32b0:	87 95       	ror	r24
    32b2:	95 95       	asr	r25
    32b4:	87 95       	ror	r24
    32b6:	8a 0f       	add	r24, r26
    32b8:	9b 1f       	adc	r25, r27
    32ba:	96 95       	lsr	r25
    32bc:	98 2f       	mov	r25, r24
    32be:	88 27       	eor	r24, r24
    32c0:	97 95       	ror	r25
    32c2:	87 95       	ror	r24
    32c4:	fc 01       	movw	r30, r24
    32c6:	e2 0f       	add	r30, r18
    32c8:	f3 1f       	adc	r31, r19
    32ca:	e5 50       	subi	r30, 0x05	; 5
    32cc:	fc 4f       	sbci	r31, 0xFC	; 252
    32ce:	84 0f       	add	r24, r20
    32d0:	95 1f       	adc	r25, r21
    32d2:	85 50       	subi	r24, 0x05	; 5
    32d4:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    32d6:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    32d8:	8e 17       	cp	r24, r30
    32da:	9f 07       	cpc	r25, r31
    32dc:	e1 f7       	brne	.-8      	; 0x32d6 <_Z5checkv+0x2198>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    32de:	6f 5f       	subi	r22, 0xFF	; 255
    32e0:	7f 4f       	sbci	r23, 0xFF	; 255
    32e2:	68 30       	cpi	r22, 0x08	; 8
    32e4:	71 05       	cpc	r23, r1
    32e6:	e9 f6       	brne	.-70     	; 0x32a2 <_Z5checkv+0x2164>
    32e8:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
		oled.OLED_Write_To_Bufer(0,0,1,8,four);
		if(!pss)passw.forward();
		else passww.forward();
		
	}
	else if(!btn1 & !btn2 & !btn12 & btn03)
    32ec:	2b 23       	and	r18, r27
    32ee:	11 f4       	brne	.+4      	; 0x32f4 <_Z5checkv+0x21b6>
    32f0:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
    32f4:	77 23       	and	r23, r23
    32f6:	11 f4       	brne	.+4      	; 0x32fc <_Z5checkv+0x21be>
    32f8:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__stack+0x2a5>
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	c9 01       	movw	r24, r18
    3302:	33 23       	and	r19, r19
    3304:	0c f4       	brge	.+2      	; 0x3308 <_Z5checkv+0x21ca>
    3306:	07 96       	adiw	r24, 0x07	; 7
    3308:	95 95       	asr	r25
    330a:	87 95       	ror	r24
    330c:	95 95       	asr	r25
    330e:	87 95       	ror	r24
    3310:	95 95       	asr	r25
    3312:	87 95       	ror	r24
    3314:	96 95       	lsr	r25
    3316:	98 2f       	mov	r25, r24
    3318:	88 27       	eor	r24, r24
    331a:	97 95       	ror	r25
    331c:	87 95       	ror	r24
    331e:	fc 01       	movw	r30, r24
    3320:	e5 50       	subi	r30, 0x05	; 5
    3322:	fc 4f       	sbci	r31, 0xFC	; 252
    3324:	8d 5f       	subi	r24, 0xFD	; 253
    3326:	9b 4f       	sbci	r25, 0xFB	; 251
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    3328:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    332a:	8e 17       	cp	r24, r30
    332c:	9f 07       	cpc	r25, r31
    332e:	e1 f7       	brne	.-8      	; 0x3328 <_Z5checkv+0x21ea>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    3330:	2f 5f       	subi	r18, 0xFF	; 255
    3332:	3f 4f       	sbci	r19, 0xFF	; 255
    3334:	28 30       	cpi	r18, 0x08	; 8
    3336:	31 05       	cpc	r19, r1
    3338:	19 f7       	brne	.-58     	; 0x3300 <_Z5checkv+0x21c2>
    333a:	80 ea       	ldi	r24, 0xA0	; 160
    333c:	93 e0       	ldi	r25, 0x03	; 3
    333e:	a0 e0       	ldi	r26, 0x00	; 0
    3340:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3342:	07 e0       	ldi	r16, 0x07	; 7
    3344:	10 e0       	ldi	r17, 0x00	; 0
    3346:	9a 83       	std	Y+2, r25	; 0x02
    3348:	89 83       	std	Y+1, r24	; 0x01
    334a:	e9 81       	ldd	r30, Y+1	; 0x01
    334c:	fa 81       	ldd	r31, Y+2	; 0x02
    334e:	41 91       	ld	r20, Z+
    3350:	fa 83       	std	Y+2, r31	; 0x02
    3352:	e9 83       	std	Y+1, r30	; 0x01
    3354:	50 e0       	ldi	r21, 0x00	; 0
    3356:	cd 01       	movw	r24, r26
    3358:	87 70       	andi	r24, 0x07	; 7
    335a:	90 78       	andi	r25, 0x80	; 128
    335c:	99 23       	and	r25, r25
    335e:	24 f4       	brge	.+8      	; 0x3368 <_Z5checkv+0x222a>
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	88 6f       	ori	r24, 0xF8	; 248
    3364:	9f 6f       	ori	r25, 0xFF	; 255
    3366:	01 96       	adiw	r24, 0x01	; 1
    3368:	b8 01       	movw	r22, r16
    336a:	68 1b       	sub	r22, r24
    336c:	79 0b       	sbc	r23, r25
    336e:	cd 01       	movw	r24, r26
    3370:	bb 23       	and	r27, r27
    3372:	0c f4       	brge	.+2      	; 0x3376 <_Z5checkv+0x2238>
    3374:	07 96       	adiw	r24, 0x07	; 7
    3376:	fc 01       	movw	r30, r24
    3378:	f5 95       	asr	r31
    337a:	e7 95       	ror	r30
    337c:	f5 95       	asr	r31
    337e:	e7 95       	ror	r30
    3380:	f5 95       	asr	r31
    3382:	e7 95       	ror	r30
    3384:	f6 95       	lsr	r31
    3386:	fe 2f       	mov	r31, r30
    3388:	ee 27       	eor	r30, r30
    338a:	f7 95       	ror	r31
    338c:	e7 95       	ror	r30
    338e:	e5 50       	subi	r30, 0x05	; 5
    3390:	fc 4f       	sbci	r31, 0xFC	; 252
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	ca 01       	movw	r24, r20
    3398:	02 2e       	mov	r0, r18
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <_Z5checkv+0x2262>
    339c:	88 0f       	add	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	0a 94       	dec	r0
    33a2:	e2 f7       	brpl	.-8      	; 0x339c <_Z5checkv+0x225e>
    33a4:	80 78       	andi	r24, 0x80	; 128
    33a6:	99 27       	eor	r25, r25
    33a8:	06 2e       	mov	r0, r22
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <_Z5checkv+0x2272>
    33ac:	95 95       	asr	r25
    33ae:	87 95       	ror	r24
    33b0:	0a 94       	dec	r0
    33b2:	e2 f7       	brpl	.-8      	; 0x33ac <_Z5checkv+0x226e>
    33b4:	90 81       	ld	r25, Z
    33b6:	89 2b       	or	r24, r25
    33b8:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    33ba:	2f 5f       	subi	r18, 0xFF	; 255
    33bc:	3f 4f       	sbci	r19, 0xFF	; 255
    33be:	28 30       	cpi	r18, 0x08	; 8
    33c0:	31 05       	cpc	r19, r1
    33c2:	49 f7       	brne	.-46     	; 0x3396 <_Z5checkv+0x2258>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    33c4:	11 96       	adiw	r26, 0x01	; 1
    33c6:	a8 30       	cpi	r26, 0x08	; 8
    33c8:	b1 05       	cpc	r27, r1
    33ca:	09 f0       	breq	.+2      	; 0x33ce <_Z5checkv+0x2290>
    33cc:	be cf       	rjmp	.-132    	; 0x334a <_Z5checkv+0x220c>
	}
	else if(!btn1 & !btn2 & !btn12 & btn03)
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,five);
		if(!pss)passw.back();
    33ce:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <pss>
    33d2:	81 11       	cpse	r24, r1
    33d4:	8e c2       	rjmp	.+1308   	; 0x38f2 <_Z5checkv+0x27b4>
		variants(xcoord,ycoord);
	}
	
	void back()
	{
		pointer--;
    33d6:	e2 ee       	ldi	r30, 0xE2	; 226
    33d8:	f3 e0       	ldi	r31, 0x03	; 3
    33da:	80 81       	ld	r24, Z
    33dc:	91 81       	ldd	r25, Z+1	; 0x01
    33de:	01 97       	sbiw	r24, 0x01	; 1
    33e0:	91 83       	std	Z+1, r25	; 0x01
    33e2:	80 83       	st	Z, r24
		if(pointer<0)pointer=2;
    33e4:	99 23       	and	r25, r25
    33e6:	34 f4       	brge	.+12     	; 0x33f4 <_Z5checkv+0x22b6>
    33e8:	82 e0       	ldi	r24, 0x02	; 2
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	90 93 e3 03 	sts	0x03E3, r25	; 0x8003e3 <passw+0x1>
    33f0:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <passw>
		
	}
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord-20,ycoord+1,1,16,lt);
    33f4:	e2 ee       	ldi	r30, 0xE2	; 226
    33f6:	f3 e0       	ldi	r31, 0x03	; 3
    33f8:	66 81       	ldd	r22, Z+6	; 0x06
    33fa:	77 81       	ldd	r23, Z+7	; 0x07
    33fc:	5b 01       	movw	r10, r22
    33fe:	0f ef       	ldi	r16, 0xFF	; 255
    3400:	a0 1a       	sub	r10, r16
    3402:	b0 0a       	sbc	r11, r16
    3404:	84 80       	ldd	r8, Z+4	; 0x04
    3406:	95 80       	ldd	r9, Z+5	; 0x05
    3408:	0f 2e       	mov	r0, r31
    340a:	f0 eb       	ldi	r31, 0xB0	; 176
    340c:	ef 2e       	mov	r14, r31
    340e:	f1 e0       	ldi	r31, 0x01	; 1
    3410:	ff 2e       	mov	r15, r31
    3412:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3414:	00 e0       	ldi	r16, 0x00	; 0
    3416:	10 e0       	ldi	r17, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3418:	0f 2e       	mov	r0, r31
    341a:	f7 e0       	ldi	r31, 0x07	; 7
    341c:	cf 2e       	mov	r12, r31
    341e:	d1 2c       	mov	r13, r1
    3420:	f0 2d       	mov	r31, r0
    3422:	78 2c       	mov	r7, r8
    3424:	69 2c       	mov	r6, r9
    3426:	24 e1       	ldi	r18, 0x14	; 20
    3428:	82 1a       	sub	r8, r18
    342a:	91 08       	sbc	r9, r1
    342c:	f7 01       	movw	r30, r14
    342e:	a1 91       	ld	r26, Z+
    3430:	7f 01       	movw	r14, r30
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	c8 01       	movw	r24, r16
    3436:	87 70       	andi	r24, 0x07	; 7
    3438:	90 78       	andi	r25, 0x80	; 128
    343a:	99 23       	and	r25, r25
    343c:	24 f4       	brge	.+8      	; 0x3446 <_Z5checkv+0x2308>
    343e:	01 97       	sbiw	r24, 0x01	; 1
    3440:	88 6f       	ori	r24, 0xF8	; 248
    3442:	9f 6f       	ori	r25, 0xFF	; 255
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	96 01       	movw	r18, r12
    3448:	28 1b       	sub	r18, r24
    344a:	39 0b       	sbc	r19, r25
    344c:	3a 83       	std	Y+2, r19	; 0x02
    344e:	29 83       	std	Y+1, r18	; 0x01
    3450:	27 2d       	mov	r18, r7
    3452:	36 2d       	mov	r19, r6
    3454:	c8 01       	movw	r24, r16
    3456:	11 23       	and	r17, r17
    3458:	0c f4       	brge	.+2      	; 0x345c <_Z5checkv+0x231e>
    345a:	07 96       	adiw	r24, 0x07	; 7
    345c:	fc 01       	movw	r30, r24
    345e:	f5 95       	asr	r31
    3460:	e7 95       	ror	r30
    3462:	f5 95       	asr	r31
    3464:	e7 95       	ror	r30
    3466:	f5 95       	asr	r31
    3468:	e7 95       	ror	r30
    346a:	ea 0d       	add	r30, r10
    346c:	fb 1d       	adc	r31, r11
    346e:	f6 95       	lsr	r31
    3470:	fe 2f       	mov	r31, r30
    3472:	ee 27       	eor	r30, r30
    3474:	f7 95       	ror	r31
    3476:	e7 95       	ror	r30
    3478:	e8 0d       	add	r30, r8
    347a:	f9 1d       	adc	r31, r9
    347c:	e5 50       	subi	r30, 0x05	; 5
    347e:	fc 4f       	sbci	r31, 0xFC	; 252
    3480:	40 e0       	ldi	r20, 0x00	; 0
    3482:	50 e0       	ldi	r21, 0x00	; 0
    3484:	cd 01       	movw	r24, r26
    3486:	04 2e       	mov	r0, r20
    3488:	02 c0       	rjmp	.+4      	; 0x348e <_Z5checkv+0x2350>
    348a:	88 0f       	add	r24, r24
    348c:	99 1f       	adc	r25, r25
    348e:	0a 94       	dec	r0
    3490:	e2 f7       	brpl	.-8      	; 0x348a <_Z5checkv+0x234c>
    3492:	80 78       	andi	r24, 0x80	; 128
    3494:	99 27       	eor	r25, r25
    3496:	09 80       	ldd	r0, Y+1	; 0x01
    3498:	02 c0       	rjmp	.+4      	; 0x349e <_Z5checkv+0x2360>
    349a:	95 95       	asr	r25
    349c:	87 95       	ror	r24
    349e:	0a 94       	dec	r0
    34a0:	e2 f7       	brpl	.-8      	; 0x349a <_Z5checkv+0x235c>
    34a2:	90 81       	ld	r25, Z
    34a4:	89 2b       	or	r24, r25
    34a6:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    34a8:	4f 5f       	subi	r20, 0xFF	; 255
    34aa:	5f 4f       	sbci	r21, 0xFF	; 255
    34ac:	48 30       	cpi	r20, 0x08	; 8
    34ae:	51 05       	cpc	r21, r1
    34b0:	49 f7       	brne	.-46     	; 0x3484 <_Z5checkv+0x2346>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    34b2:	0f 5f       	subi	r16, 0xFF	; 255
    34b4:	1f 4f       	sbci	r17, 0xFF	; 255
    34b6:	00 31       	cpi	r16, 0x10	; 16
    34b8:	11 05       	cpc	r17, r1
    34ba:	09 f0       	breq	.+2      	; 0x34be <_Z5checkv+0x2380>
    34bc:	b7 cf       	rjmp	.-146    	; 0x342c <_Z5checkv+0x22ee>
    34be:	0f 2e       	mov	r0, r31
    34c0:	f0 e4       	ldi	r31, 0x40	; 64
    34c2:	cf 2e       	mov	r12, r31
    34c4:	f2 e0       	ldi	r31, 0x02	; 2
    34c6:	df 2e       	mov	r13, r31
    34c8:	f0 2d       	mov	r31, r0
    34ca:	00 e0       	ldi	r16, 0x00	; 0
    34cc:	10 e0       	ldi	r17, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    34ce:	0f 2e       	mov	r0, r31
    34d0:	f7 e0       	ldi	r31, 0x07	; 7
    34d2:	ef 2e       	mov	r14, r31
    34d4:	f1 2c       	mov	r15, r1
    34d6:	f0 2d       	mov	r31, r0
    34d8:	49 01       	movw	r8, r18
    34da:	44 e3       	ldi	r20, 0x34	; 52
    34dc:	84 0e       	add	r8, r20
    34de:	91 1c       	adc	r9, r1
    34e0:	f6 01       	movw	r30, r12
    34e2:	a1 91       	ld	r26, Z+
    34e4:	6f 01       	movw	r12, r30
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	c8 01       	movw	r24, r16
    34ea:	87 70       	andi	r24, 0x07	; 7
    34ec:	90 78       	andi	r25, 0x80	; 128
    34ee:	99 23       	and	r25, r25
    34f0:	24 f4       	brge	.+8      	; 0x34fa <_Z5checkv+0x23bc>
    34f2:	01 97       	sbiw	r24, 0x01	; 1
    34f4:	88 6f       	ori	r24, 0xF8	; 248
    34f6:	9f 6f       	ori	r25, 0xFF	; 255
    34f8:	01 96       	adiw	r24, 0x01	; 1
    34fa:	a7 01       	movw	r20, r14
    34fc:	48 1b       	sub	r20, r24
    34fe:	59 0b       	sbc	r21, r25
    3500:	5a 83       	std	Y+2, r21	; 0x02
    3502:	49 83       	std	Y+1, r20	; 0x01
    3504:	c8 01       	movw	r24, r16
    3506:	11 23       	and	r17, r17
    3508:	0c f4       	brge	.+2      	; 0x350c <_Z5checkv+0x23ce>
    350a:	07 96       	adiw	r24, 0x07	; 7
    350c:	fc 01       	movw	r30, r24
    350e:	f5 95       	asr	r31
    3510:	e7 95       	ror	r30
    3512:	f5 95       	asr	r31
    3514:	e7 95       	ror	r30
    3516:	f5 95       	asr	r31
    3518:	e7 95       	ror	r30
    351a:	ea 0d       	add	r30, r10
    351c:	fb 1d       	adc	r31, r11
    351e:	f6 95       	lsr	r31
    3520:	fe 2f       	mov	r31, r30
    3522:	ee 27       	eor	r30, r30
    3524:	f7 95       	ror	r31
    3526:	e7 95       	ror	r30
    3528:	e8 0d       	add	r30, r8
    352a:	f9 1d       	adc	r31, r9
    352c:	e5 50       	subi	r30, 0x05	; 5
    352e:	fc 4f       	sbci	r31, 0xFC	; 252
    3530:	40 e0       	ldi	r20, 0x00	; 0
    3532:	50 e0       	ldi	r21, 0x00	; 0
    3534:	cd 01       	movw	r24, r26
    3536:	04 2e       	mov	r0, r20
    3538:	02 c0       	rjmp	.+4      	; 0x353e <_Z5checkv+0x2400>
    353a:	88 0f       	add	r24, r24
    353c:	99 1f       	adc	r25, r25
    353e:	0a 94       	dec	r0
    3540:	e2 f7       	brpl	.-8      	; 0x353a <_Z5checkv+0x23fc>
    3542:	80 78       	andi	r24, 0x80	; 128
    3544:	99 27       	eor	r25, r25
    3546:	09 80       	ldd	r0, Y+1	; 0x01
    3548:	02 c0       	rjmp	.+4      	; 0x354e <_Z5checkv+0x2410>
    354a:	95 95       	asr	r25
    354c:	87 95       	ror	r24
    354e:	0a 94       	dec	r0
    3550:	e2 f7       	brpl	.-8      	; 0x354a <_Z5checkv+0x240c>
    3552:	90 81       	ld	r25, Z
    3554:	89 2b       	or	r24, r25
    3556:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3558:	4f 5f       	subi	r20, 0xFF	; 255
    355a:	5f 4f       	sbci	r21, 0xFF	; 255
    355c:	48 30       	cpi	r20, 0x08	; 8
    355e:	51 05       	cpc	r21, r1
    3560:	49 f7       	brne	.-46     	; 0x3534 <_Z5checkv+0x23f6>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3562:	0f 5f       	subi	r16, 0xFF	; 255
    3564:	1f 4f       	sbci	r17, 0xFF	; 255
    3566:	00 31       	cpi	r16, 0x10	; 16
    3568:	11 05       	cpc	r17, r1
    356a:	09 f0       	breq	.+2      	; 0x356e <_Z5checkv+0x2430>
    356c:	b9 cf       	rjmp	.-142    	; 0x34e0 <_Z5checkv+0x23a2>
		}
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
    356e:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <passw+0x2>
    3572:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <passw+0x3>
    3576:	81 30       	cpi	r24, 0x01	; 1
    3578:	91 05       	cpc	r25, r1
    357a:	09 f4       	brne	.+2      	; 0x357e <_Z5checkv+0x2440>
    357c:	98 c0       	rjmp	.+304    	; 0x36ae <_Z5checkv+0x2570>
    357e:	82 30       	cpi	r24, 0x02	; 2
    3580:	91 05       	cpc	r25, r1
    3582:	09 f4       	brne	.+2      	; 0x3586 <_Z5checkv+0x2448>
    3584:	25 c1       	rjmp	.+586    	; 0x37d0 <_Z5checkv+0x2692>
    3586:	89 2b       	or	r24, r25
    3588:	09 f0       	breq	.+2      	; 0x358c <_Z5checkv+0x244e>
    358a:	0c c7       	rjmp	.+3608   	; 0x43a4 <__stack+0x2a5>
    358c:	40 e0       	ldi	r20, 0x00	; 0
    358e:	50 e0       	ldi	r21, 0x00	; 0
    3590:	d9 01       	movw	r26, r18
    3592:	90 96       	adiw	r26, 0x20	; 32
    3594:	ca 01       	movw	r24, r20
    3596:	55 23       	and	r21, r21
    3598:	0c f4       	brge	.+2      	; 0x359c <_Z5checkv+0x245e>
    359a:	07 96       	adiw	r24, 0x07	; 7
    359c:	95 95       	asr	r25
    359e:	87 95       	ror	r24
    35a0:	95 95       	asr	r25
    35a2:	87 95       	ror	r24
    35a4:	95 95       	asr	r25
    35a6:	87 95       	ror	r24
    35a8:	86 0f       	add	r24, r22
    35aa:	97 1f       	adc	r25, r23
    35ac:	96 95       	lsr	r25
    35ae:	98 2f       	mov	r25, r24
    35b0:	88 27       	eor	r24, r24
    35b2:	97 95       	ror	r25
    35b4:	87 95       	ror	r24
    35b6:	f9 01       	movw	r30, r18
    35b8:	e8 0f       	add	r30, r24
    35ba:	f9 1f       	adc	r31, r25
    35bc:	e5 50       	subi	r30, 0x05	; 5
    35be:	fc 4f       	sbci	r31, 0xFC	; 252
    35c0:	8a 0f       	add	r24, r26
    35c2:	9b 1f       	adc	r25, r27
    35c4:	85 50       	subi	r24, 0x05	; 5
    35c6:	9c 4f       	sbci	r25, 0xFC	; 252
    35c8:	8f 01       	movw	r16, r30
    35ca:	08 5f       	subi	r16, 0xF8	; 248
    35cc:	1f 4f       	sbci	r17, 0xFF	; 255
    35ce:	1a 83       	std	Y+2, r17	; 0x02
    35d0:	09 83       	std	Y+1, r16	; 0x01
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    35d2:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    35d4:	09 81       	ldd	r16, Y+1	; 0x01
    35d6:	1a 81       	ldd	r17, Y+2	; 0x02
    35d8:	0e 17       	cp	r16, r30
    35da:	1f 07       	cpc	r17, r31
    35dc:	d1 f7       	brne	.-12     	; 0x35d2 <_Z5checkv+0x2494>
    35de:	f8 01       	movw	r30, r16
void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
    35e0:	80 17       	cp	r24, r16
    35e2:	91 07       	cpc	r25, r17
    35e4:	89 f7       	brne	.-30     	; 0x35c8 <_Z5checkv+0x248a>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    35e6:	4f 5f       	subi	r20, 0xFF	; 255
    35e8:	5f 4f       	sbci	r21, 0xFF	; 255
    35ea:	40 32       	cpi	r20, 0x20	; 32
    35ec:	51 05       	cpc	r21, r1
    35ee:	91 f6       	brne	.-92     	; 0x3594 <_Z5checkv+0x2456>
    35f0:	04 ed       	ldi	r16, 0xD4	; 212
    35f2:	12 e0       	ldi	r17, 0x02	; 2
    35f4:	a0 e0       	ldi	r26, 0x00	; 0
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    35f8:	0f 2e       	mov	r0, r31
    35fa:	f7 e0       	ldi	r31, 0x07	; 7
    35fc:	cf 2e       	mov	r12, r31
    35fe:	d1 2c       	mov	r13, r1
    3600:	f0 2d       	mov	r31, r0
    3602:	2d 01       	movw	r4, r26
    3604:	c2 01       	movw	r24, r4
    3606:	87 70       	andi	r24, 0x07	; 7
    3608:	90 78       	andi	r25, 0x80	; 128
    360a:	99 23       	and	r25, r25
    360c:	24 f4       	brge	.+8      	; 0x3616 <_Z5checkv+0x24d8>
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	88 6f       	ori	r24, 0xF8	; 248
    3612:	9f 6f       	ori	r25, 0xFF	; 255
    3614:	01 96       	adiw	r24, 0x01	; 1
    3616:	46 01       	movw	r8, r12
    3618:	88 1a       	sub	r8, r24
    361a:	99 0a       	sbc	r9, r25
    361c:	58 01       	movw	r10, r16
    361e:	44 e0       	ldi	r20, 0x04	; 4
    3620:	a4 1a       	sub	r10, r20
    3622:	b1 08       	sbc	r11, r1
    3624:	c2 01       	movw	r24, r4
    3626:	55 20       	and	r5, r5
    3628:	0c f4       	brge	.+2      	; 0x362c <_Z5checkv+0x24ee>
    362a:	07 96       	adiw	r24, 0x07	; 7
    362c:	ac 01       	movw	r20, r24
    362e:	55 95       	asr	r21
    3630:	47 95       	ror	r20
    3632:	55 95       	asr	r21
    3634:	47 95       	ror	r20
    3636:	55 95       	asr	r21
    3638:	47 95       	ror	r20
    363a:	46 0f       	add	r20, r22
    363c:	57 1f       	adc	r21, r23
    363e:	56 95       	lsr	r21
    3640:	54 2f       	mov	r21, r20
    3642:	44 27       	eor	r20, r20
    3644:	57 95       	ror	r21
    3646:	47 95       	ror	r20
    3648:	42 0f       	add	r20, r18
    364a:	53 1f       	adc	r21, r19
    364c:	45 50       	subi	r20, 0x05	; 5
    364e:	5c 4f       	sbci	r21, 0xFC	; 252
    3650:	d5 01       	movw	r26, r10
    3652:	ed 90       	ld	r14, X+
    3654:	5d 01       	movw	r10, r26
    3656:	f1 2c       	mov	r15, r1
    3658:	3a 01       	movw	r6, r20
    365a:	e0 e0       	ldi	r30, 0x00	; 0
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	c7 01       	movw	r24, r14
    3660:	0e 2e       	mov	r0, r30
    3662:	02 c0       	rjmp	.+4      	; 0x3668 <_Z5checkv+0x252a>
    3664:	88 0f       	add	r24, r24
    3666:	99 1f       	adc	r25, r25
    3668:	0a 94       	dec	r0
    366a:	e2 f7       	brpl	.-8      	; 0x3664 <_Z5checkv+0x2526>
    366c:	80 78       	andi	r24, 0x80	; 128
    366e:	99 27       	eor	r25, r25
    3670:	08 2c       	mov	r0, r8
    3672:	02 c0       	rjmp	.+4      	; 0x3678 <_Z5checkv+0x253a>
    3674:	95 95       	asr	r25
    3676:	87 95       	ror	r24
    3678:	0a 94       	dec	r0
    367a:	e2 f7       	brpl	.-8      	; 0x3674 <_Z5checkv+0x2536>
    367c:	d3 01       	movw	r26, r6
    367e:	9c 91       	ld	r25, X
    3680:	89 2b       	or	r24, r25
    3682:	8d 93       	st	X+, r24
    3684:	3d 01       	movw	r6, r26
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3686:	31 96       	adiw	r30, 0x01	; 1
    3688:	e8 30       	cpi	r30, 0x08	; 8
    368a:	f1 05       	cpc	r31, r1
    368c:	41 f7       	brne	.-48     	; 0x365e <_Z5checkv+0x2520>
    368e:	48 5f       	subi	r20, 0xF8	; 248
    3690:	5f 4f       	sbci	r21, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    3692:	a0 16       	cp	r10, r16
    3694:	b1 06       	cpc	r11, r17
    3696:	e1 f6       	brne	.-72     	; 0x3650 <_Z5checkv+0x2512>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3698:	bf ef       	ldi	r27, 0xFF	; 255
    369a:	4b 1a       	sub	r4, r27
    369c:	5b 0a       	sbc	r5, r27
    369e:	0c 5f       	subi	r16, 0xFC	; 252
    36a0:	1f 4f       	sbci	r17, 0xFF	; 255
    36a2:	e0 e2       	ldi	r30, 0x20	; 32
    36a4:	4e 16       	cp	r4, r30
    36a6:	51 04       	cpc	r5, r1
    36a8:	09 f0       	breq	.+2      	; 0x36ac <_Z5checkv+0x256e>
    36aa:	ac cf       	rjmp	.-168    	; 0x3604 <_Z5checkv+0x24c6>
    36ac:	7b c6       	rjmp	.+3318   	; 0x43a4 <__stack+0x2a5>
		}
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
    36ae:	40 e0       	ldi	r20, 0x00	; 0
    36b0:	50 e0       	ldi	r21, 0x00	; 0
    36b2:	d9 01       	movw	r26, r18
    36b4:	90 96       	adiw	r26, 0x20	; 32
    36b6:	ca 01       	movw	r24, r20
    36b8:	55 23       	and	r21, r21
    36ba:	0c f4       	brge	.+2      	; 0x36be <_Z5checkv+0x2580>
    36bc:	07 96       	adiw	r24, 0x07	; 7
    36be:	95 95       	asr	r25
    36c0:	87 95       	ror	r24
    36c2:	95 95       	asr	r25
    36c4:	87 95       	ror	r24
    36c6:	95 95       	asr	r25
    36c8:	87 95       	ror	r24
    36ca:	86 0f       	add	r24, r22
    36cc:	97 1f       	adc	r25, r23
    36ce:	96 95       	lsr	r25
    36d0:	98 2f       	mov	r25, r24
    36d2:	88 27       	eor	r24, r24
    36d4:	97 95       	ror	r25
    36d6:	87 95       	ror	r24
    36d8:	f9 01       	movw	r30, r18
    36da:	e8 0f       	add	r30, r24
    36dc:	f9 1f       	adc	r31, r25
    36de:	e5 50       	subi	r30, 0x05	; 5
    36e0:	fc 4f       	sbci	r31, 0xFC	; 252
    36e2:	8a 0f       	add	r24, r26
    36e4:	9b 1f       	adc	r25, r27
    36e6:	85 50       	subi	r24, 0x05	; 5
    36e8:	9c 4f       	sbci	r25, 0xFC	; 252
    36ea:	8f 01       	movw	r16, r30
    36ec:	08 5f       	subi	r16, 0xF8	; 248
    36ee:	1f 4f       	sbci	r17, 0xFF	; 255
    36f0:	1a 83       	std	Y+2, r17	; 0x02
    36f2:	09 83       	std	Y+1, r16	; 0x01
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    36f4:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    36f6:	09 81       	ldd	r16, Y+1	; 0x01
    36f8:	1a 81       	ldd	r17, Y+2	; 0x02
    36fa:	0e 17       	cp	r16, r30
    36fc:	1f 07       	cpc	r17, r31
    36fe:	d1 f7       	brne	.-12     	; 0x36f4 <_Z5checkv+0x25b6>
    3700:	f8 01       	movw	r30, r16
void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
    3702:	80 17       	cp	r24, r16
    3704:	91 07       	cpc	r25, r17
    3706:	89 f7       	brne	.-30     	; 0x36ea <_Z5checkv+0x25ac>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    3708:	4f 5f       	subi	r20, 0xFF	; 255
    370a:	5f 4f       	sbci	r21, 0xFF	; 255
    370c:	40 32       	cpi	r20, 0x20	; 32
    370e:	51 05       	cpc	r21, r1
    3710:	91 f6       	brne	.-92     	; 0x36b6 <_Z5checkv+0x2578>
    3712:	04 e5       	ldi	r16, 0x54	; 84
    3714:	12 e0       	ldi	r17, 0x02	; 2
    3716:	a0 e0       	ldi	r26, 0x00	; 0
    3718:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    371a:	0f 2e       	mov	r0, r31
    371c:	f7 e0       	ldi	r31, 0x07	; 7
    371e:	cf 2e       	mov	r12, r31
    3720:	d1 2c       	mov	r13, r1
    3722:	f0 2d       	mov	r31, r0
    3724:	2d 01       	movw	r4, r26
    3726:	c2 01       	movw	r24, r4
    3728:	87 70       	andi	r24, 0x07	; 7
    372a:	90 78       	andi	r25, 0x80	; 128
    372c:	99 23       	and	r25, r25
    372e:	24 f4       	brge	.+8      	; 0x3738 <_Z5checkv+0x25fa>
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	88 6f       	ori	r24, 0xF8	; 248
    3734:	9f 6f       	ori	r25, 0xFF	; 255
    3736:	01 96       	adiw	r24, 0x01	; 1
    3738:	46 01       	movw	r8, r12
    373a:	88 1a       	sub	r8, r24
    373c:	99 0a       	sbc	r9, r25
    373e:	58 01       	movw	r10, r16
    3740:	44 e0       	ldi	r20, 0x04	; 4
    3742:	a4 1a       	sub	r10, r20
    3744:	b1 08       	sbc	r11, r1
    3746:	c2 01       	movw	r24, r4
    3748:	55 20       	and	r5, r5
    374a:	0c f4       	brge	.+2      	; 0x374e <_Z5checkv+0x2610>
    374c:	07 96       	adiw	r24, 0x07	; 7
    374e:	ac 01       	movw	r20, r24
    3750:	55 95       	asr	r21
    3752:	47 95       	ror	r20
    3754:	55 95       	asr	r21
    3756:	47 95       	ror	r20
    3758:	55 95       	asr	r21
    375a:	47 95       	ror	r20
    375c:	46 0f       	add	r20, r22
    375e:	57 1f       	adc	r21, r23
    3760:	56 95       	lsr	r21
    3762:	54 2f       	mov	r21, r20
    3764:	44 27       	eor	r20, r20
    3766:	57 95       	ror	r21
    3768:	47 95       	ror	r20
    376a:	42 0f       	add	r20, r18
    376c:	53 1f       	adc	r21, r19
    376e:	45 50       	subi	r20, 0x05	; 5
    3770:	5c 4f       	sbci	r21, 0xFC	; 252
    3772:	d5 01       	movw	r26, r10
    3774:	ed 90       	ld	r14, X+
    3776:	5d 01       	movw	r10, r26
    3778:	f1 2c       	mov	r15, r1
    377a:	3a 01       	movw	r6, r20
    377c:	e0 e0       	ldi	r30, 0x00	; 0
    377e:	f0 e0       	ldi	r31, 0x00	; 0
    3780:	c7 01       	movw	r24, r14
    3782:	0e 2e       	mov	r0, r30
    3784:	02 c0       	rjmp	.+4      	; 0x378a <_Z5checkv+0x264c>
    3786:	88 0f       	add	r24, r24
    3788:	99 1f       	adc	r25, r25
    378a:	0a 94       	dec	r0
    378c:	e2 f7       	brpl	.-8      	; 0x3786 <_Z5checkv+0x2648>
    378e:	80 78       	andi	r24, 0x80	; 128
    3790:	99 27       	eor	r25, r25
    3792:	08 2c       	mov	r0, r8
    3794:	02 c0       	rjmp	.+4      	; 0x379a <_Z5checkv+0x265c>
    3796:	95 95       	asr	r25
    3798:	87 95       	ror	r24
    379a:	0a 94       	dec	r0
    379c:	e2 f7       	brpl	.-8      	; 0x3796 <_Z5checkv+0x2658>
    379e:	d3 01       	movw	r26, r6
    37a0:	9c 91       	ld	r25, X
    37a2:	89 2b       	or	r24, r25
    37a4:	8d 93       	st	X+, r24
    37a6:	3d 01       	movw	r6, r26
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    37a8:	31 96       	adiw	r30, 0x01	; 1
    37aa:	e8 30       	cpi	r30, 0x08	; 8
    37ac:	f1 05       	cpc	r31, r1
    37ae:	41 f7       	brne	.-48     	; 0x3780 <_Z5checkv+0x2642>
    37b0:	48 5f       	subi	r20, 0xF8	; 248
    37b2:	5f 4f       	sbci	r21, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    37b4:	a0 16       	cp	r10, r16
    37b6:	b1 06       	cpc	r11, r17
    37b8:	e1 f6       	brne	.-72     	; 0x3772 <_Z5checkv+0x2634>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    37ba:	bf ef       	ldi	r27, 0xFF	; 255
    37bc:	4b 1a       	sub	r4, r27
    37be:	5b 0a       	sbc	r5, r27
    37c0:	0c 5f       	subi	r16, 0xFC	; 252
    37c2:	1f 4f       	sbci	r17, 0xFF	; 255
    37c4:	e0 e2       	ldi	r30, 0x20	; 32
    37c6:	4e 16       	cp	r4, r30
    37c8:	51 04       	cpc	r5, r1
    37ca:	09 f0       	breq	.+2      	; 0x37ce <_Z5checkv+0x2690>
    37cc:	ac cf       	rjmp	.-168    	; 0x3726 <_Z5checkv+0x25e8>
    37ce:	ea c5       	rjmp	.+3028   	; 0x43a4 <__stack+0x2a5>
		}
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
    37d0:	40 e0       	ldi	r20, 0x00	; 0
    37d2:	50 e0       	ldi	r21, 0x00	; 0
    37d4:	d9 01       	movw	r26, r18
    37d6:	90 96       	adiw	r26, 0x20	; 32
    37d8:	ca 01       	movw	r24, r20
    37da:	55 23       	and	r21, r21
    37dc:	0c f4       	brge	.+2      	; 0x37e0 <_Z5checkv+0x26a2>
    37de:	07 96       	adiw	r24, 0x07	; 7
    37e0:	95 95       	asr	r25
    37e2:	87 95       	ror	r24
    37e4:	95 95       	asr	r25
    37e6:	87 95       	ror	r24
    37e8:	95 95       	asr	r25
    37ea:	87 95       	ror	r24
    37ec:	86 0f       	add	r24, r22
    37ee:	97 1f       	adc	r25, r23
    37f0:	96 95       	lsr	r25
    37f2:	98 2f       	mov	r25, r24
    37f4:	88 27       	eor	r24, r24
    37f6:	97 95       	ror	r25
    37f8:	87 95       	ror	r24
    37fa:	f9 01       	movw	r30, r18
    37fc:	e8 0f       	add	r30, r24
    37fe:	f9 1f       	adc	r31, r25
    3800:	e5 50       	subi	r30, 0x05	; 5
    3802:	fc 4f       	sbci	r31, 0xFC	; 252
    3804:	8a 0f       	add	r24, r26
    3806:	9b 1f       	adc	r25, r27
    3808:	85 50       	subi	r24, 0x05	; 5
    380a:	9c 4f       	sbci	r25, 0xFC	; 252
    380c:	8f 01       	movw	r16, r30
    380e:	08 5f       	subi	r16, 0xF8	; 248
    3810:	1f 4f       	sbci	r17, 0xFF	; 255
    3812:	1a 83       	std	Y+2, r17	; 0x02
    3814:	09 83       	std	Y+1, r16	; 0x01
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    3816:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    3818:	09 81       	ldd	r16, Y+1	; 0x01
    381a:	1a 81       	ldd	r17, Y+2	; 0x02
    381c:	e0 17       	cp	r30, r16
    381e:	f1 07       	cpc	r31, r17
    3820:	d1 f7       	brne	.-12     	; 0x3816 <_Z5checkv+0x26d8>
    3822:	f8 01       	movw	r30, r16
void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
    3824:	80 17       	cp	r24, r16
    3826:	91 07       	cpc	r25, r17
    3828:	89 f7       	brne	.-30     	; 0x380c <_Z5checkv+0x26ce>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    382a:	4f 5f       	subi	r20, 0xFF	; 255
    382c:	5f 4f       	sbci	r21, 0xFF	; 255
    382e:	40 32       	cpi	r20, 0x20	; 32
    3830:	51 05       	cpc	r21, r1
    3832:	91 f6       	brne	.-92     	; 0x37d8 <_Z5checkv+0x269a>
    3834:	04 ec       	ldi	r16, 0xC4	; 196
    3836:	11 e0       	ldi	r17, 0x01	; 1
    3838:	a0 e0       	ldi	r26, 0x00	; 0
    383a:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    383c:	0f 2e       	mov	r0, r31
    383e:	f7 e0       	ldi	r31, 0x07	; 7
    3840:	cf 2e       	mov	r12, r31
    3842:	d1 2c       	mov	r13, r1
    3844:	f0 2d       	mov	r31, r0
    3846:	2d 01       	movw	r4, r26
    3848:	c2 01       	movw	r24, r4
    384a:	87 70       	andi	r24, 0x07	; 7
    384c:	90 78       	andi	r25, 0x80	; 128
    384e:	99 23       	and	r25, r25
    3850:	24 f4       	brge	.+8      	; 0x385a <_Z5checkv+0x271c>
    3852:	01 97       	sbiw	r24, 0x01	; 1
    3854:	88 6f       	ori	r24, 0xF8	; 248
    3856:	9f 6f       	ori	r25, 0xFF	; 255
    3858:	01 96       	adiw	r24, 0x01	; 1
    385a:	46 01       	movw	r8, r12
    385c:	88 1a       	sub	r8, r24
    385e:	99 0a       	sbc	r9, r25
    3860:	58 01       	movw	r10, r16
    3862:	44 e0       	ldi	r20, 0x04	; 4
    3864:	a4 1a       	sub	r10, r20
    3866:	b1 08       	sbc	r11, r1
    3868:	c2 01       	movw	r24, r4
    386a:	55 20       	and	r5, r5
    386c:	0c f4       	brge	.+2      	; 0x3870 <_Z5checkv+0x2732>
    386e:	07 96       	adiw	r24, 0x07	; 7
    3870:	ac 01       	movw	r20, r24
    3872:	55 95       	asr	r21
    3874:	47 95       	ror	r20
    3876:	55 95       	asr	r21
    3878:	47 95       	ror	r20
    387a:	55 95       	asr	r21
    387c:	47 95       	ror	r20
    387e:	46 0f       	add	r20, r22
    3880:	57 1f       	adc	r21, r23
    3882:	56 95       	lsr	r21
    3884:	54 2f       	mov	r21, r20
    3886:	44 27       	eor	r20, r20
    3888:	57 95       	ror	r21
    388a:	47 95       	ror	r20
    388c:	42 0f       	add	r20, r18
    388e:	53 1f       	adc	r21, r19
    3890:	45 50       	subi	r20, 0x05	; 5
    3892:	5c 4f       	sbci	r21, 0xFC	; 252
    3894:	d5 01       	movw	r26, r10
    3896:	ed 90       	ld	r14, X+
    3898:	5d 01       	movw	r10, r26
    389a:	f1 2c       	mov	r15, r1
    389c:	3a 01       	movw	r6, r20
    389e:	e0 e0       	ldi	r30, 0x00	; 0
    38a0:	f0 e0       	ldi	r31, 0x00	; 0
    38a2:	c7 01       	movw	r24, r14
    38a4:	0e 2e       	mov	r0, r30
    38a6:	02 c0       	rjmp	.+4      	; 0x38ac <_Z5checkv+0x276e>
    38a8:	88 0f       	add	r24, r24
    38aa:	99 1f       	adc	r25, r25
    38ac:	0a 94       	dec	r0
    38ae:	e2 f7       	brpl	.-8      	; 0x38a8 <_Z5checkv+0x276a>
    38b0:	80 78       	andi	r24, 0x80	; 128
    38b2:	99 27       	eor	r25, r25
    38b4:	08 2c       	mov	r0, r8
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <_Z5checkv+0x277e>
    38b8:	95 95       	asr	r25
    38ba:	87 95       	ror	r24
    38bc:	0a 94       	dec	r0
    38be:	e2 f7       	brpl	.-8      	; 0x38b8 <_Z5checkv+0x277a>
    38c0:	d3 01       	movw	r26, r6
    38c2:	9c 91       	ld	r25, X
    38c4:	89 2b       	or	r24, r25
    38c6:	8d 93       	st	X+, r24
    38c8:	3d 01       	movw	r6, r26
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    38ca:	31 96       	adiw	r30, 0x01	; 1
    38cc:	e8 30       	cpi	r30, 0x08	; 8
    38ce:	f1 05       	cpc	r31, r1
    38d0:	41 f7       	brne	.-48     	; 0x38a2 <_Z5checkv+0x2764>
    38d2:	48 5f       	subi	r20, 0xF8	; 248
    38d4:	5f 4f       	sbci	r21, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    38d6:	a0 16       	cp	r10, r16
    38d8:	b1 06       	cpc	r11, r17
    38da:	e1 f6       	brne	.-72     	; 0x3894 <_Z5checkv+0x2756>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    38dc:	bf ef       	ldi	r27, 0xFF	; 255
    38de:	4b 1a       	sub	r4, r27
    38e0:	5b 0a       	sbc	r5, r27
    38e2:	0c 5f       	subi	r16, 0xFC	; 252
    38e4:	1f 4f       	sbci	r17, 0xFF	; 255
    38e6:	e0 e2       	ldi	r30, 0x20	; 32
    38e8:	4e 16       	cp	r4, r30
    38ea:	51 04       	cpc	r5, r1
    38ec:	09 f0       	breq	.+2      	; 0x38f0 <_Z5checkv+0x27b2>
    38ee:	ac cf       	rjmp	.-168    	; 0x3848 <_Z5checkv+0x270a>
    38f0:	59 c5       	rjmp	.+2738   	; 0x43a4 <__stack+0x2a5>
		}
	}
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
    38f2:	ea ee       	ldi	r30, 0xEA	; 234
    38f4:	f3 e0       	ldi	r31, 0x03	; 3
    38f6:	a6 84       	ldd	r10, Z+14	; 0x0e
    38f8:	b7 84       	ldd	r11, Z+15	; 0x0f
    38fa:	d5 01       	movw	r26, r10
    38fc:	11 96       	adiw	r26, 0x01	; 1
    38fe:	04 81       	ldd	r16, Z+4	; 0x04
    3900:	15 81       	ldd	r17, Z+5	; 0x05
    3902:	28 e7       	ldi	r18, 0x78	; 120
    3904:	33 e0       	ldi	r19, 0x03	; 3
    3906:	3c 87       	std	Y+12, r19	; 0x0c
    3908:	2b 87       	std	Y+11, r18	; 0x0b
    390a:	79 01       	movw	r14, r18
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    390c:	1a 82       	std	Y+2, r1	; 0x02
    390e:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3910:	0f 2e       	mov	r0, r31
    3912:	f7 e0       	ldi	r31, 0x07	; 7
    3914:	cf 2e       	mov	r12, r31
    3916:	d1 2c       	mov	r13, r1
    3918:	f0 2d       	mov	r31, r0
    391a:	80 2e       	mov	r8, r16
    391c:	91 2e       	mov	r9, r17
    391e:	f7 01       	movw	r30, r14
    3920:	41 91       	ld	r20, Z+
    3922:	7f 01       	movw	r14, r30
    3924:	50 e0       	ldi	r21, 0x00	; 0
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	9a 81       	ldd	r25, Y+2	; 0x02
    392a:	87 70       	andi	r24, 0x07	; 7
    392c:	90 78       	andi	r25, 0x80	; 128
    392e:	99 23       	and	r25, r25
    3930:	24 f4       	brge	.+8      	; 0x393a <_Z5checkv+0x27fc>
    3932:	01 97       	sbiw	r24, 0x01	; 1
    3934:	88 6f       	ori	r24, 0xF8	; 248
    3936:	9f 6f       	ori	r25, 0xFF	; 255
    3938:	01 96       	adiw	r24, 0x01	; 1
    393a:	b6 01       	movw	r22, r12
    393c:	68 1b       	sub	r22, r24
    393e:	79 0b       	sbc	r23, r25
    3940:	8d 82       	std	Y+5, r8	; 0x05
    3942:	9e 82       	std	Y+6, r9	; 0x06
    3944:	89 81       	ldd	r24, Y+1	; 0x01
    3946:	9a 81       	ldd	r25, Y+2	; 0x02
    3948:	99 23       	and	r25, r25
    394a:	0c f4       	brge	.+2      	; 0x394e <_Z5checkv+0x2810>
    394c:	07 96       	adiw	r24, 0x07	; 7
    394e:	fc 01       	movw	r30, r24
    3950:	f5 95       	asr	r31
    3952:	e7 95       	ror	r30
    3954:	f5 95       	asr	r31
    3956:	e7 95       	ror	r30
    3958:	f5 95       	asr	r31
    395a:	e7 95       	ror	r30
    395c:	ea 0f       	add	r30, r26
    395e:	fb 1f       	adc	r31, r27
    3960:	f6 95       	lsr	r31
    3962:	fe 2f       	mov	r31, r30
    3964:	ee 27       	eor	r30, r30
    3966:	f7 95       	ror	r31
    3968:	e7 95       	ror	r30
    396a:	e0 0f       	add	r30, r16
    396c:	f1 1f       	adc	r31, r17
    396e:	e5 50       	subi	r30, 0x05	; 5
    3970:	fc 4f       	sbci	r31, 0xFC	; 252
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	ca 01       	movw	r24, r20
    3978:	02 2e       	mov	r0, r18
    397a:	02 c0       	rjmp	.+4      	; 0x3980 <_Z5checkv+0x2842>
    397c:	88 0f       	add	r24, r24
    397e:	99 1f       	adc	r25, r25
    3980:	0a 94       	dec	r0
    3982:	e2 f7       	brpl	.-8      	; 0x397c <_Z5checkv+0x283e>
    3984:	80 78       	andi	r24, 0x80	; 128
    3986:	99 27       	eor	r25, r25
    3988:	06 2e       	mov	r0, r22
    398a:	02 c0       	rjmp	.+4      	; 0x3990 <_Z5checkv+0x2852>
    398c:	95 95       	asr	r25
    398e:	87 95       	ror	r24
    3990:	0a 94       	dec	r0
    3992:	e2 f7       	brpl	.-8      	; 0x398c <_Z5checkv+0x284e>
    3994:	90 81       	ld	r25, Z
    3996:	89 2b       	or	r24, r25
    3998:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    399a:	2f 5f       	subi	r18, 0xFF	; 255
    399c:	3f 4f       	sbci	r19, 0xFF	; 255
    399e:	28 30       	cpi	r18, 0x08	; 8
    39a0:	31 05       	cpc	r19, r1
    39a2:	49 f7       	brne	.-46     	; 0x3976 <_Z5checkv+0x2838>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    39a4:	29 81       	ldd	r18, Y+1	; 0x01
    39a6:	3a 81       	ldd	r19, Y+2	; 0x02
    39a8:	2f 5f       	subi	r18, 0xFF	; 255
    39aa:	3f 4f       	sbci	r19, 0xFF	; 255
    39ac:	3a 83       	std	Y+2, r19	; 0x02
    39ae:	29 83       	std	Y+1, r18	; 0x01
    39b0:	28 30       	cpi	r18, 0x08	; 8
    39b2:	31 05       	cpc	r19, r1
    39b4:	09 f0       	breq	.+2      	; 0x39b8 <_Z5checkv+0x287a>
    39b6:	b3 cf       	rjmp	.-154    	; 0x391e <_Z5checkv+0x27e0>
	}
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
    39b8:	00 91 f0 03 	lds	r16, 0x03F0	; 0x8003f0 <passww+0x6>
    39bc:	10 91 f1 03 	lds	r17, 0x03F1	; 0x8003f1 <passww+0x7>
    39c0:	0f 2e       	mov	r0, r31
    39c2:	f8 e7       	ldi	r31, 0x78	; 120
    39c4:	ef 2e       	mov	r14, r31
    39c6:	f3 e0       	ldi	r31, 0x03	; 3
    39c8:	ff 2e       	mov	r15, r31
    39ca:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    39cc:	1a 82       	std	Y+2, r1	; 0x02
    39ce:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    39d0:	0f 2e       	mov	r0, r31
    39d2:	f7 e0       	ldi	r31, 0x07	; 7
    39d4:	cf 2e       	mov	r12, r31
    39d6:	d1 2c       	mov	r13, r1
    39d8:	f0 2d       	mov	r31, r0
    39da:	80 2e       	mov	r8, r16
    39dc:	91 2e       	mov	r9, r17
    39de:	f7 01       	movw	r30, r14
    39e0:	41 91       	ld	r20, Z+
    39e2:	7f 01       	movw	r14, r30
    39e4:	50 e0       	ldi	r21, 0x00	; 0
    39e6:	89 81       	ldd	r24, Y+1	; 0x01
    39e8:	9a 81       	ldd	r25, Y+2	; 0x02
    39ea:	87 70       	andi	r24, 0x07	; 7
    39ec:	90 78       	andi	r25, 0x80	; 128
    39ee:	99 23       	and	r25, r25
    39f0:	24 f4       	brge	.+8      	; 0x39fa <_Z5checkv+0x28bc>
    39f2:	01 97       	sbiw	r24, 0x01	; 1
    39f4:	88 6f       	ori	r24, 0xF8	; 248
    39f6:	9f 6f       	ori	r25, 0xFF	; 255
    39f8:	01 96       	adiw	r24, 0x01	; 1
    39fa:	b6 01       	movw	r22, r12
    39fc:	68 1b       	sub	r22, r24
    39fe:	79 0b       	sbc	r23, r25
    3a00:	28 2c       	mov	r2, r8
    3a02:	39 2c       	mov	r3, r9
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	9a 81       	ldd	r25, Y+2	; 0x02
    3a08:	99 23       	and	r25, r25
    3a0a:	0c f4       	brge	.+2      	; 0x3a0e <_Z5checkv+0x28d0>
    3a0c:	07 96       	adiw	r24, 0x07	; 7
    3a0e:	fc 01       	movw	r30, r24
    3a10:	f5 95       	asr	r31
    3a12:	e7 95       	ror	r30
    3a14:	f5 95       	asr	r31
    3a16:	e7 95       	ror	r30
    3a18:	f5 95       	asr	r31
    3a1a:	e7 95       	ror	r30
    3a1c:	ea 0f       	add	r30, r26
    3a1e:	fb 1f       	adc	r31, r27
    3a20:	f6 95       	lsr	r31
    3a22:	fe 2f       	mov	r31, r30
    3a24:	ee 27       	eor	r30, r30
    3a26:	f7 95       	ror	r31
    3a28:	e7 95       	ror	r30
    3a2a:	e0 0f       	add	r30, r16
    3a2c:	f1 1f       	adc	r31, r17
    3a2e:	e5 50       	subi	r30, 0x05	; 5
    3a30:	fc 4f       	sbci	r31, 0xFC	; 252
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	ca 01       	movw	r24, r20
    3a38:	02 2e       	mov	r0, r18
    3a3a:	02 c0       	rjmp	.+4      	; 0x3a40 <_Z5checkv+0x2902>
    3a3c:	88 0f       	add	r24, r24
    3a3e:	99 1f       	adc	r25, r25
    3a40:	0a 94       	dec	r0
    3a42:	e2 f7       	brpl	.-8      	; 0x3a3c <_Z5checkv+0x28fe>
    3a44:	80 78       	andi	r24, 0x80	; 128
    3a46:	99 27       	eor	r25, r25
    3a48:	06 2e       	mov	r0, r22
    3a4a:	02 c0       	rjmp	.+4      	; 0x3a50 <_Z5checkv+0x2912>
    3a4c:	95 95       	asr	r25
    3a4e:	87 95       	ror	r24
    3a50:	0a 94       	dec	r0
    3a52:	e2 f7       	brpl	.-8      	; 0x3a4c <_Z5checkv+0x290e>
    3a54:	90 81       	ld	r25, Z
    3a56:	89 2b       	or	r24, r25
    3a58:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3a5a:	2f 5f       	subi	r18, 0xFF	; 255
    3a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a5e:	28 30       	cpi	r18, 0x08	; 8
    3a60:	31 05       	cpc	r19, r1
    3a62:	49 f7       	brne	.-46     	; 0x3a36 <_Z5checkv+0x28f8>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3a64:	29 81       	ldd	r18, Y+1	; 0x01
    3a66:	3a 81       	ldd	r19, Y+2	; 0x02
    3a68:	2f 5f       	subi	r18, 0xFF	; 255
    3a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a6c:	3a 83       	std	Y+2, r19	; 0x02
    3a6e:	29 83       	std	Y+1, r18	; 0x01
    3a70:	28 30       	cpi	r18, 0x08	; 8
    3a72:	31 05       	cpc	r19, r1
    3a74:	09 f0       	breq	.+2      	; 0x3a78 <_Z5checkv+0x293a>
    3a76:	b3 cf       	rjmp	.-154    	; 0x39de <_Z5checkv+0x28a0>
	
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
    3a78:	c0 90 f2 03 	lds	r12, 0x03F2	; 0x8003f2 <passww+0x8>
    3a7c:	d0 90 f3 03 	lds	r13, 0x03F3	; 0x8003f3 <passww+0x9>
    3a80:	08 e7       	ldi	r16, 0x78	; 120
    3a82:	13 e0       	ldi	r17, 0x03	; 3
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3a84:	1a 82       	std	Y+2, r1	; 0x02
    3a86:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3a88:	0f 2e       	mov	r0, r31
    3a8a:	f7 e0       	ldi	r31, 0x07	; 7
    3a8c:	ef 2e       	mov	r14, r31
    3a8e:	f1 2c       	mov	r15, r1
    3a90:	f0 2d       	mov	r31, r0
    3a92:	9c 2c       	mov	r9, r12
    3a94:	8d 2c       	mov	r8, r13
    3a96:	f8 01       	movw	r30, r16
    3a98:	41 91       	ld	r20, Z+
    3a9a:	8f 01       	movw	r16, r30
    3a9c:	50 e0       	ldi	r21, 0x00	; 0
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa2:	87 70       	andi	r24, 0x07	; 7
    3aa4:	90 78       	andi	r25, 0x80	; 128
    3aa6:	99 23       	and	r25, r25
    3aa8:	24 f4       	brge	.+8      	; 0x3ab2 <_Z5checkv+0x2974>
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	88 6f       	ori	r24, 0xF8	; 248
    3aae:	9f 6f       	ori	r25, 0xFF	; 255
    3ab0:	01 96       	adiw	r24, 0x01	; 1
    3ab2:	b7 01       	movw	r22, r14
    3ab4:	68 1b       	sub	r22, r24
    3ab6:	79 0b       	sbc	r23, r25
    3ab8:	9f 82       	std	Y+7, r9	; 0x07
    3aba:	88 86       	std	Y+8, r8	; 0x08
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac0:	99 23       	and	r25, r25
    3ac2:	0c f4       	brge	.+2      	; 0x3ac6 <_Z5checkv+0x2988>
    3ac4:	07 96       	adiw	r24, 0x07	; 7
    3ac6:	fc 01       	movw	r30, r24
    3ac8:	f5 95       	asr	r31
    3aca:	e7 95       	ror	r30
    3acc:	f5 95       	asr	r31
    3ace:	e7 95       	ror	r30
    3ad0:	f5 95       	asr	r31
    3ad2:	e7 95       	ror	r30
    3ad4:	ea 0f       	add	r30, r26
    3ad6:	fb 1f       	adc	r31, r27
    3ad8:	f6 95       	lsr	r31
    3ada:	fe 2f       	mov	r31, r30
    3adc:	ee 27       	eor	r30, r30
    3ade:	f7 95       	ror	r31
    3ae0:	e7 95       	ror	r30
    3ae2:	ec 0d       	add	r30, r12
    3ae4:	fd 1d       	adc	r31, r13
    3ae6:	e5 50       	subi	r30, 0x05	; 5
    3ae8:	fc 4f       	sbci	r31, 0xFC	; 252
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	ca 01       	movw	r24, r20
    3af0:	02 2e       	mov	r0, r18
    3af2:	02 c0       	rjmp	.+4      	; 0x3af8 <_Z5checkv+0x29ba>
    3af4:	88 0f       	add	r24, r24
    3af6:	99 1f       	adc	r25, r25
    3af8:	0a 94       	dec	r0
    3afa:	e2 f7       	brpl	.-8      	; 0x3af4 <_Z5checkv+0x29b6>
    3afc:	80 78       	andi	r24, 0x80	; 128
    3afe:	99 27       	eor	r25, r25
    3b00:	06 2e       	mov	r0, r22
    3b02:	02 c0       	rjmp	.+4      	; 0x3b08 <_Z5checkv+0x29ca>
    3b04:	95 95       	asr	r25
    3b06:	87 95       	ror	r24
    3b08:	0a 94       	dec	r0
    3b0a:	e2 f7       	brpl	.-8      	; 0x3b04 <_Z5checkv+0x29c6>
    3b0c:	90 81       	ld	r25, Z
    3b0e:	89 2b       	or	r24, r25
    3b10:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3b12:	2f 5f       	subi	r18, 0xFF	; 255
    3b14:	3f 4f       	sbci	r19, 0xFF	; 255
    3b16:	28 30       	cpi	r18, 0x08	; 8
    3b18:	31 05       	cpc	r19, r1
    3b1a:	49 f7       	brne	.-46     	; 0x3aee <_Z5checkv+0x29b0>
    3b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b1e:	fa 81       	ldd	r31, Y+2	; 0x02
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3b20:	31 96       	adiw	r30, 0x01	; 1
    3b22:	fa 83       	std	Y+2, r31	; 0x02
    3b24:	e9 83       	std	Y+1, r30	; 0x01
    3b26:	38 97       	sbiw	r30, 0x08	; 8
    3b28:	09 f0       	breq	.+2      	; 0x3b2c <_Z5checkv+0x29ee>
    3b2a:	b5 cf       	rjmp	.-150    	; 0x3a96 <_Z5checkv+0x2958>
	void write_default()
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
    3b2c:	c0 90 f4 03 	lds	r12, 0x03F4	; 0x8003f4 <passww+0xa>
    3b30:	d0 90 f5 03 	lds	r13, 0x03F5	; 0x8003f5 <passww+0xb>
    3b34:	08 e7       	ldi	r16, 0x78	; 120
    3b36:	13 e0       	ldi	r17, 0x03	; 3
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3b38:	1a 82       	std	Y+2, r1	; 0x02
    3b3a:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3b3c:	0f 2e       	mov	r0, r31
    3b3e:	f7 e0       	ldi	r31, 0x07	; 7
    3b40:	ef 2e       	mov	r14, r31
    3b42:	f1 2c       	mov	r15, r1
    3b44:	f0 2d       	mov	r31, r0
    3b46:	9c 2c       	mov	r9, r12
    3b48:	8d 2c       	mov	r8, r13
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	3c 83       	std	Y+4, r19	; 0x04
    3b50:	2b 83       	std	Y+3, r18	; 0x03
    3b52:	f8 01       	movw	r30, r16
    3b54:	41 91       	ld	r20, Z+
    3b56:	8f 01       	movw	r16, r30
    3b58:	50 e0       	ldi	r21, 0x00	; 0
    3b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5e:	87 70       	andi	r24, 0x07	; 7
    3b60:	90 78       	andi	r25, 0x80	; 128
    3b62:	99 23       	and	r25, r25
    3b64:	24 f4       	brge	.+8      	; 0x3b6e <_Z5checkv+0x2a30>
    3b66:	01 97       	sbiw	r24, 0x01	; 1
    3b68:	88 6f       	ori	r24, 0xF8	; 248
    3b6a:	9f 6f       	ori	r25, 0xFF	; 255
    3b6c:	01 96       	adiw	r24, 0x01	; 1
    3b6e:	b7 01       	movw	r22, r14
    3b70:	68 1b       	sub	r22, r24
    3b72:	79 0b       	sbc	r23, r25
    3b74:	99 82       	std	Y+1, r9	; 0x01
    3b76:	8a 82       	std	Y+2, r8	; 0x02
    3b78:	8b 81       	ldd	r24, Y+3	; 0x03
    3b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b7c:	99 23       	and	r25, r25
    3b7e:	0c f4       	brge	.+2      	; 0x3b82 <_Z5checkv+0x2a44>
    3b80:	07 96       	adiw	r24, 0x07	; 7
    3b82:	fc 01       	movw	r30, r24
    3b84:	f5 95       	asr	r31
    3b86:	e7 95       	ror	r30
    3b88:	f5 95       	asr	r31
    3b8a:	e7 95       	ror	r30
    3b8c:	f5 95       	asr	r31
    3b8e:	e7 95       	ror	r30
    3b90:	ea 0f       	add	r30, r26
    3b92:	fb 1f       	adc	r31, r27
    3b94:	f6 95       	lsr	r31
    3b96:	fe 2f       	mov	r31, r30
    3b98:	ee 27       	eor	r30, r30
    3b9a:	f7 95       	ror	r31
    3b9c:	e7 95       	ror	r30
    3b9e:	ec 0d       	add	r30, r12
    3ba0:	fd 1d       	adc	r31, r13
    3ba2:	e5 50       	subi	r30, 0x05	; 5
    3ba4:	fc 4f       	sbci	r31, 0xFC	; 252
    3ba6:	20 e0       	ldi	r18, 0x00	; 0
    3ba8:	30 e0       	ldi	r19, 0x00	; 0
    3baa:	ca 01       	movw	r24, r20
    3bac:	02 2e       	mov	r0, r18
    3bae:	02 c0       	rjmp	.+4      	; 0x3bb4 <_Z5checkv+0x2a76>
    3bb0:	88 0f       	add	r24, r24
    3bb2:	99 1f       	adc	r25, r25
    3bb4:	0a 94       	dec	r0
    3bb6:	e2 f7       	brpl	.-8      	; 0x3bb0 <_Z5checkv+0x2a72>
    3bb8:	80 78       	andi	r24, 0x80	; 128
    3bba:	99 27       	eor	r25, r25
    3bbc:	06 2e       	mov	r0, r22
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <_Z5checkv+0x2a86>
    3bc0:	95 95       	asr	r25
    3bc2:	87 95       	ror	r24
    3bc4:	0a 94       	dec	r0
    3bc6:	e2 f7       	brpl	.-8      	; 0x3bc0 <_Z5checkv+0x2a82>
    3bc8:	90 81       	ld	r25, Z
    3bca:	89 2b       	or	r24, r25
    3bcc:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3bce:	2f 5f       	subi	r18, 0xFF	; 255
    3bd0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd2:	28 30       	cpi	r18, 0x08	; 8
    3bd4:	31 05       	cpc	r19, r1
    3bd6:	49 f7       	brne	.-46     	; 0x3baa <_Z5checkv+0x2a6c>
    3bd8:	eb 81       	ldd	r30, Y+3	; 0x03
    3bda:	fc 81       	ldd	r31, Y+4	; 0x04
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3bdc:	31 96       	adiw	r30, 0x01	; 1
    3bde:	fc 83       	std	Y+4, r31	; 0x04
    3be0:	eb 83       	std	Y+3, r30	; 0x03
    3be2:	38 97       	sbiw	r30, 0x08	; 8
    3be4:	09 f0       	breq	.+2      	; 0x3be8 <_Z5checkv+0x2aaa>
    3be6:	b5 cf       	rjmp	.-150    	; 0x3b52 <_Z5checkv+0x2a14>
	{
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
    3be8:	c0 90 f6 03 	lds	r12, 0x03F6	; 0x8003f6 <passww+0xc>
    3bec:	d0 90 f7 03 	lds	r13, 0x03F7	; 0x8003f7 <passww+0xd>
    3bf0:	08 e7       	ldi	r16, 0x78	; 120
    3bf2:	13 e0       	ldi	r17, 0x03	; 3
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3bf4:	1c 82       	std	Y+4, r1	; 0x04
    3bf6:	1b 82       	std	Y+3, r1	; 0x03
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3bf8:	0f 2e       	mov	r0, r31
    3bfa:	f7 e0       	ldi	r31, 0x07	; 7
    3bfc:	ef 2e       	mov	r14, r31
    3bfe:	f1 2c       	mov	r15, r1
    3c00:	f0 2d       	mov	r31, r0
    3c02:	9c 2c       	mov	r9, r12
    3c04:	8d 2c       	mov	r8, r13
    3c06:	20 e0       	ldi	r18, 0x00	; 0
    3c08:	30 e0       	ldi	r19, 0x00	; 0
    3c0a:	3a 87       	std	Y+10, r19	; 0x0a
    3c0c:	29 87       	std	Y+9, r18	; 0x09
    3c0e:	f8 01       	movw	r30, r16
    3c10:	41 91       	ld	r20, Z+
    3c12:	8f 01       	movw	r16, r30
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	89 85       	ldd	r24, Y+9	; 0x09
    3c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1a:	87 70       	andi	r24, 0x07	; 7
    3c1c:	90 78       	andi	r25, 0x80	; 128
    3c1e:	99 23       	and	r25, r25
    3c20:	24 f4       	brge	.+8      	; 0x3c2a <_Z5checkv+0x2aec>
    3c22:	01 97       	sbiw	r24, 0x01	; 1
    3c24:	88 6f       	ori	r24, 0xF8	; 248
    3c26:	9f 6f       	ori	r25, 0xFF	; 255
    3c28:	01 96       	adiw	r24, 0x01	; 1
    3c2a:	b7 01       	movw	r22, r14
    3c2c:	68 1b       	sub	r22, r24
    3c2e:	79 0b       	sbc	r23, r25
    3c30:	9b 82       	std	Y+3, r9	; 0x03
    3c32:	8c 82       	std	Y+4, r8	; 0x04
    3c34:	89 85       	ldd	r24, Y+9	; 0x09
    3c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c38:	99 23       	and	r25, r25
    3c3a:	0c f4       	brge	.+2      	; 0x3c3e <_Z5checkv+0x2b00>
    3c3c:	07 96       	adiw	r24, 0x07	; 7
    3c3e:	fc 01       	movw	r30, r24
    3c40:	f5 95       	asr	r31
    3c42:	e7 95       	ror	r30
    3c44:	f5 95       	asr	r31
    3c46:	e7 95       	ror	r30
    3c48:	f5 95       	asr	r31
    3c4a:	e7 95       	ror	r30
    3c4c:	ea 0f       	add	r30, r26
    3c4e:	fb 1f       	adc	r31, r27
    3c50:	f6 95       	lsr	r31
    3c52:	fe 2f       	mov	r31, r30
    3c54:	ee 27       	eor	r30, r30
    3c56:	f7 95       	ror	r31
    3c58:	e7 95       	ror	r30
    3c5a:	ec 0d       	add	r30, r12
    3c5c:	fd 1d       	adc	r31, r13
    3c5e:	e5 50       	subi	r30, 0x05	; 5
    3c60:	fc 4f       	sbci	r31, 0xFC	; 252
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	ca 01       	movw	r24, r20
    3c68:	02 2e       	mov	r0, r18
    3c6a:	02 c0       	rjmp	.+4      	; 0x3c70 <_Z5checkv+0x2b32>
    3c6c:	88 0f       	add	r24, r24
    3c6e:	99 1f       	adc	r25, r25
    3c70:	0a 94       	dec	r0
    3c72:	e2 f7       	brpl	.-8      	; 0x3c6c <_Z5checkv+0x2b2e>
    3c74:	80 78       	andi	r24, 0x80	; 128
    3c76:	99 27       	eor	r25, r25
    3c78:	06 2e       	mov	r0, r22
    3c7a:	02 c0       	rjmp	.+4      	; 0x3c80 <_Z5checkv+0x2b42>
    3c7c:	95 95       	asr	r25
    3c7e:	87 95       	ror	r24
    3c80:	0a 94       	dec	r0
    3c82:	e2 f7       	brpl	.-8      	; 0x3c7c <_Z5checkv+0x2b3e>
    3c84:	90 81       	ld	r25, Z
    3c86:	89 2b       	or	r24, r25
    3c88:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3c8a:	2f 5f       	subi	r18, 0xFF	; 255
    3c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8e:	28 30       	cpi	r18, 0x08	; 8
    3c90:	31 05       	cpc	r19, r1
    3c92:	49 f7       	brne	.-46     	; 0x3c66 <_Z5checkv+0x2b28>
    3c94:	e9 85       	ldd	r30, Y+9	; 0x09
    3c96:	fa 85       	ldd	r31, Y+10	; 0x0a
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3c98:	31 96       	adiw	r30, 0x01	; 1
    3c9a:	fa 87       	std	Y+10, r31	; 0x0a
    3c9c:	e9 87       	std	Y+9, r30	; 0x09
    3c9e:	38 97       	sbiw	r30, 0x08	; 8
    3ca0:	09 f0       	breq	.+2      	; 0x3ca4 <_Z5checkv+0x2b66>
    3ca2:	b5 cf       	rjmp	.-150    	; 0x3c0e <_Z5checkv+0x2ad0>
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord+2,1,8,downn);
    3ca4:	35 01       	movw	r6, r10
    3ca6:	f2 e0       	ldi	r31, 0x02	; 2
    3ca8:	6f 0e       	add	r6, r31
    3caa:	71 1c       	adc	r7, r1
    3cac:	40 90 ea 03 	lds	r4, 0x03EA	; 0x8003ea <passww>
    3cb0:	50 90 eb 03 	lds	r5, 0x03EB	; 0x8003eb <passww+0x1>
    3cb4:	f2 01       	movw	r30, r4
    3cb6:	ee 0f       	add	r30, r30
    3cb8:	ff 1f       	adc	r31, r31
    3cba:	e2 51       	subi	r30, 0x12	; 18
    3cbc:	fc 4f       	sbci	r31, 0xFC	; 252
    3cbe:	c0 80       	ld	r12, Z
    3cc0:	d1 80       	ldd	r13, Z+1	; 0x01
    3cc2:	00 e6       	ldi	r16, 0x60	; 96
    3cc4:	13 e0       	ldi	r17, 0x03	; 3
    3cc6:	18 8b       	std	Y+16, r17	; 0x10
    3cc8:	0f 87       	std	Y+15, r16	; 0x0f
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3cca:	1a 8a       	std	Y+18, r1	; 0x12
    3ccc:	19 8a       	std	Y+17, r1	; 0x11
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3cce:	0f 2e       	mov	r0, r31
    3cd0:	f7 e0       	ldi	r31, 0x07	; 7
    3cd2:	ef 2e       	mov	r14, r31
    3cd4:	f1 2c       	mov	r15, r1
    3cd6:	f0 2d       	mov	r31, r0
    3cd8:	c9 86       	std	Y+9, r12	; 0x09
    3cda:	dd 86       	std	Y+13, r13	; 0x0d
    3cdc:	f8 01       	movw	r30, r16
    3cde:	41 91       	ld	r20, Z+
    3ce0:	8f 01       	movw	r16, r30
    3ce2:	50 e0       	ldi	r21, 0x00	; 0
    3ce4:	89 89       	ldd	r24, Y+17	; 0x11
    3ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ce8:	87 70       	andi	r24, 0x07	; 7
    3cea:	90 78       	andi	r25, 0x80	; 128
    3cec:	99 23       	and	r25, r25
    3cee:	24 f4       	brge	.+8      	; 0x3cf8 <_Z5checkv+0x2bba>
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	88 6f       	ori	r24, 0xF8	; 248
    3cf4:	9f 6f       	ori	r25, 0xFF	; 255
    3cf6:	01 96       	adiw	r24, 0x01	; 1
    3cf8:	b7 01       	movw	r22, r14
    3cfa:	68 1b       	sub	r22, r24
    3cfc:	79 0b       	sbc	r23, r25
    3cfe:	89 84       	ldd	r8, Y+9	; 0x09
    3d00:	9d 84       	ldd	r9, Y+13	; 0x0d
    3d02:	89 89       	ldd	r24, Y+17	; 0x11
    3d04:	9a 89       	ldd	r25, Y+18	; 0x12
    3d06:	99 23       	and	r25, r25
    3d08:	0c f4       	brge	.+2      	; 0x3d0c <_Z5checkv+0x2bce>
    3d0a:	07 96       	adiw	r24, 0x07	; 7
    3d0c:	fc 01       	movw	r30, r24
    3d0e:	f5 95       	asr	r31
    3d10:	e7 95       	ror	r30
    3d12:	f5 95       	asr	r31
    3d14:	e7 95       	ror	r30
    3d16:	f5 95       	asr	r31
    3d18:	e7 95       	ror	r30
    3d1a:	e6 0d       	add	r30, r6
    3d1c:	f7 1d       	adc	r31, r7
    3d1e:	f6 95       	lsr	r31
    3d20:	fe 2f       	mov	r31, r30
    3d22:	ee 27       	eor	r30, r30
    3d24:	f7 95       	ror	r31
    3d26:	e7 95       	ror	r30
    3d28:	ec 0d       	add	r30, r12
    3d2a:	fd 1d       	adc	r31, r13
    3d2c:	e5 50       	subi	r30, 0x05	; 5
    3d2e:	fc 4f       	sbci	r31, 0xFC	; 252
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	ca 01       	movw	r24, r20
    3d36:	02 2e       	mov	r0, r18
    3d38:	02 c0       	rjmp	.+4      	; 0x3d3e <_Z5checkv+0x2c00>
    3d3a:	88 0f       	add	r24, r24
    3d3c:	99 1f       	adc	r25, r25
    3d3e:	0a 94       	dec	r0
    3d40:	e2 f7       	brpl	.-8      	; 0x3d3a <_Z5checkv+0x2bfc>
    3d42:	80 78       	andi	r24, 0x80	; 128
    3d44:	99 27       	eor	r25, r25
    3d46:	06 2e       	mov	r0, r22
    3d48:	02 c0       	rjmp	.+4      	; 0x3d4e <_Z5checkv+0x2c10>
    3d4a:	95 95       	asr	r25
    3d4c:	87 95       	ror	r24
    3d4e:	0a 94       	dec	r0
    3d50:	e2 f7       	brpl	.-8      	; 0x3d4a <_Z5checkv+0x2c0c>
    3d52:	90 81       	ld	r25, Z
    3d54:	89 2b       	or	r24, r25
    3d56:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3d58:	2f 5f       	subi	r18, 0xFF	; 255
    3d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5c:	28 30       	cpi	r18, 0x08	; 8
    3d5e:	31 05       	cpc	r19, r1
    3d60:	49 f7       	brne	.-46     	; 0x3d34 <_Z5checkv+0x2bf6>
    3d62:	e9 89       	ldd	r30, Y+17	; 0x11
    3d64:	fa 89       	ldd	r31, Y+18	; 0x12
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3d66:	31 96       	adiw	r30, 0x01	; 1
    3d68:	fa 8b       	std	Y+18, r31	; 0x12
    3d6a:	e9 8b       	std	Y+17, r30	; 0x11
    3d6c:	38 97       	sbiw	r30, 0x08	; 8
    3d6e:	09 f0       	breq	.+2      	; 0x3d72 <_Z5checkv+0x2c34>
    3d70:	b5 cf       	rjmp	.-150    	; 0x3cdc <_Z5checkv+0x2b9e>
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord+2,1,8,downn);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord-1,1,8,upp);
    3d72:	65 01       	movw	r12, r10
    3d74:	f1 e0       	ldi	r31, 0x01	; 1
    3d76:	cf 1a       	sub	r12, r31
    3d78:	d1 08       	sbc	r13, r1
    3d7a:	08 e6       	ldi	r16, 0x68	; 104
    3d7c:	13 e0       	ldi	r17, 0x03	; 3
    3d7e:	1a 87       	std	Y+10, r17	; 0x0a
    3d80:	09 87       	std	Y+9, r16	; 0x09
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3d82:	1e 86       	std	Y+14, r1	; 0x0e
    3d84:	1d 86       	std	Y+13, r1	; 0x0d
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3d86:	0f 2e       	mov	r0, r31
    3d88:	f7 e0       	ldi	r31, 0x07	; 7
    3d8a:	ef 2e       	mov	r14, r31
    3d8c:	f1 2c       	mov	r15, r1
    3d8e:	f0 2d       	mov	r31, r0
    3d90:	f8 01       	movw	r30, r16
    3d92:	41 91       	ld	r20, Z+
    3d94:	8f 01       	movw	r16, r30
    3d96:	50 e0       	ldi	r21, 0x00	; 0
    3d98:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d9c:	87 70       	andi	r24, 0x07	; 7
    3d9e:	90 78       	andi	r25, 0x80	; 128
    3da0:	99 23       	and	r25, r25
    3da2:	24 f4       	brge	.+8      	; 0x3dac <_Z5checkv+0x2c6e>
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	88 6f       	ori	r24, 0xF8	; 248
    3da8:	9f 6f       	ori	r25, 0xFF	; 255
    3daa:	01 96       	adiw	r24, 0x01	; 1
    3dac:	b7 01       	movw	r22, r14
    3dae:	68 1b       	sub	r22, r24
    3db0:	79 0b       	sbc	r23, r25
    3db2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db6:	99 23       	and	r25, r25
    3db8:	0c f4       	brge	.+2      	; 0x3dbc <_Z5checkv+0x2c7e>
    3dba:	07 96       	adiw	r24, 0x07	; 7
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	f5 95       	asr	r31
    3dc0:	e7 95       	ror	r30
    3dc2:	f5 95       	asr	r31
    3dc4:	e7 95       	ror	r30
    3dc6:	f5 95       	asr	r31
    3dc8:	e7 95       	ror	r30
    3dca:	ec 0d       	add	r30, r12
    3dcc:	fd 1d       	adc	r31, r13
    3dce:	f6 95       	lsr	r31
    3dd0:	fe 2f       	mov	r31, r30
    3dd2:	ee 27       	eor	r30, r30
    3dd4:	f7 95       	ror	r31
    3dd6:	e7 95       	ror	r30
    3dd8:	e8 0d       	add	r30, r8
    3dda:	f9 1d       	adc	r31, r9
    3ddc:	e5 50       	subi	r30, 0x05	; 5
    3dde:	fc 4f       	sbci	r31, 0xFC	; 252
    3de0:	20 e0       	ldi	r18, 0x00	; 0
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	ca 01       	movw	r24, r20
    3de6:	02 2e       	mov	r0, r18
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <_Z5checkv+0x2cb0>
    3dea:	88 0f       	add	r24, r24
    3dec:	99 1f       	adc	r25, r25
    3dee:	0a 94       	dec	r0
    3df0:	e2 f7       	brpl	.-8      	; 0x3dea <_Z5checkv+0x2cac>
    3df2:	80 78       	andi	r24, 0x80	; 128
    3df4:	99 27       	eor	r25, r25
    3df6:	06 2e       	mov	r0, r22
    3df8:	02 c0       	rjmp	.+4      	; 0x3dfe <_Z5checkv+0x2cc0>
    3dfa:	95 95       	asr	r25
    3dfc:	87 95       	ror	r24
    3dfe:	0a 94       	dec	r0
    3e00:	e2 f7       	brpl	.-8      	; 0x3dfa <_Z5checkv+0x2cbc>
    3e02:	90 81       	ld	r25, Z
    3e04:	89 2b       	or	r24, r25
    3e06:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3e08:	2f 5f       	subi	r18, 0xFF	; 255
    3e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0c:	28 30       	cpi	r18, 0x08	; 8
    3e0e:	31 05       	cpc	r19, r1
    3e10:	49 f7       	brne	.-46     	; 0x3de4 <_Z5checkv+0x2ca6>
    3e12:	ed 85       	ldd	r30, Y+13	; 0x0d
    3e14:	fe 85       	ldd	r31, Y+14	; 0x0e
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3e16:	31 96       	adiw	r30, 0x01	; 1
    3e18:	fe 87       	std	Y+14, r31	; 0x0e
    3e1a:	ed 87       	std	Y+13, r30	; 0x0d
    3e1c:	38 97       	sbiw	r30, 0x08	; 8
    3e1e:	09 f0       	breq	.+2      	; 0x3e22 <_Z5checkv+0x2ce4>
    3e20:	b7 cf       	rjmp	.-146    	; 0x3d90 <_Z5checkv+0x2c52>
	}
	
	void back()
	{
		write_default();
		pointer--;
    3e22:	f1 e0       	ldi	r31, 0x01	; 1
    3e24:	4f 1a       	sub	r4, r31
    3e26:	51 08       	sbc	r5, r1
    3e28:	50 92 eb 03 	sts	0x03EB, r5	; 0x8003eb <passww+0x1>
    3e2c:	40 92 ea 03 	sts	0x03EA, r4	; 0x8003ea <passww>
		if(pointer<0)pointer=0;
    3e30:	55 20       	and	r5, r5
    3e32:	0c f0       	brlt	.+2      	; 0x3e36 <_Z5checkv+0x2cf8>
    3e34:	0c c3       	rjmp	.+1560   	; 0x444e <__stack+0x34f>
    3e36:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <passww+0x1>
    3e3a:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <passww>
    3e3e:	07 c3       	rjmp	.+1550   	; 0x444e <__stack+0x34f>
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3e40:	f7 01       	movw	r30, r14
    3e42:	41 91       	ld	r20, Z+
    3e44:	7f 01       	movw	r14, r30
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e4c:	87 70       	andi	r24, 0x07	; 7
    3e4e:	90 78       	andi	r25, 0x80	; 128
    3e50:	99 23       	and	r25, r25
    3e52:	24 f4       	brge	.+8      	; 0x3e5c <_Z5checkv+0x2d1e>
    3e54:	01 97       	sbiw	r24, 0x01	; 1
    3e56:	88 6f       	ori	r24, 0xF8	; 248
    3e58:	9f 6f       	ori	r25, 0xFF	; 255
    3e5a:	01 96       	adiw	r24, 0x01	; 1
    3e5c:	b8 01       	movw	r22, r16
    3e5e:	68 1b       	sub	r22, r24
    3e60:	79 0b       	sbc	r23, r25
    3e62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e66:	99 23       	and	r25, r25
    3e68:	0c f4       	brge	.+2      	; 0x3e6c <_Z5checkv+0x2d2e>
    3e6a:	07 96       	adiw	r24, 0x07	; 7
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	f5 95       	asr	r31
    3e70:	e7 95       	ror	r30
    3e72:	f5 95       	asr	r31
    3e74:	e7 95       	ror	r30
    3e76:	f5 95       	asr	r31
    3e78:	e7 95       	ror	r30
    3e7a:	ea 0f       	add	r30, r26
    3e7c:	fb 1f       	adc	r31, r27
    3e7e:	f6 95       	lsr	r31
    3e80:	fe 2f       	mov	r31, r30
    3e82:	ee 27       	eor	r30, r30
    3e84:	f7 95       	ror	r31
    3e86:	e7 95       	ror	r30
    3e88:	2d 81       	ldd	r18, Y+5	; 0x05
    3e8a:	3e 81       	ldd	r19, Y+6	; 0x06
    3e8c:	e2 0f       	add	r30, r18
    3e8e:	f3 1f       	adc	r31, r19
    3e90:	e5 50       	subi	r30, 0x05	; 5
    3e92:	fc 4f       	sbci	r31, 0xFC	; 252
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	ca 01       	movw	r24, r20
    3e9a:	02 2e       	mov	r0, r18
    3e9c:	02 c0       	rjmp	.+4      	; 0x3ea2 <_Z5checkv+0x2d64>
    3e9e:	88 0f       	add	r24, r24
    3ea0:	99 1f       	adc	r25, r25
    3ea2:	0a 94       	dec	r0
    3ea4:	e2 f7       	brpl	.-8      	; 0x3e9e <_Z5checkv+0x2d60>
    3ea6:	80 78       	andi	r24, 0x80	; 128
    3ea8:	99 27       	eor	r25, r25
    3eaa:	06 2e       	mov	r0, r22
    3eac:	02 c0       	rjmp	.+4      	; 0x3eb2 <_Z5checkv+0x2d74>
    3eae:	95 95       	asr	r25
    3eb0:	87 95       	ror	r24
    3eb2:	0a 94       	dec	r0
    3eb4:	e2 f7       	brpl	.-8      	; 0x3eae <_Z5checkv+0x2d70>
    3eb6:	90 81       	ld	r25, Z
    3eb8:	89 2b       	or	r24, r25
    3eba:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3ebc:	2f 5f       	subi	r18, 0xFF	; 255
    3ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec0:	28 30       	cpi	r18, 0x08	; 8
    3ec2:	31 05       	cpc	r19, r1
    3ec4:	49 f7       	brne	.-46     	; 0x3e98 <_Z5checkv+0x2d5a>
    3ec6:	ed 85       	ldd	r30, Y+13	; 0x0d
    3ec8:	fe 85       	ldd	r31, Y+14	; 0x0e
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3eca:	31 96       	adiw	r30, 0x01	; 1
    3ecc:	fe 87       	std	Y+14, r31	; 0x0e
    3ece:	ed 87       	std	Y+13, r30	; 0x0d
    3ed0:	38 97       	sbiw	r30, 0x08	; 8
    3ed2:	09 f0       	breq	.+2      	; 0x3ed6 <_Z5checkv+0x2d98>
    3ed4:	b5 cf       	rjmp	.-150    	; 0x3e40 <_Z5checkv+0x2d02>
    3ed6:	0f 2e       	mov	r0, r31
    3ed8:	f8 e7       	ldi	r31, 0x78	; 120
    3eda:	ef 2e       	mov	r14, r31
    3edc:	f3 e0       	ldi	r31, 0x03	; 3
    3ede:	ff 2e       	mov	r15, r31
    3ee0:	f0 2d       	mov	r31, r0
    3ee2:	1e 82       	std	Y+6, r1	; 0x06
    3ee4:	1d 82       	std	Y+5, r1	; 0x05
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3ee6:	07 e0       	ldi	r16, 0x07	; 7
    3ee8:	10 e0       	ldi	r17, 0x00	; 0
    3eea:	f7 01       	movw	r30, r14
    3eec:	41 91       	ld	r20, Z+
    3eee:	7f 01       	movw	r14, r30
    3ef0:	50 e0       	ldi	r21, 0x00	; 0
    3ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef6:	87 70       	andi	r24, 0x07	; 7
    3ef8:	90 78       	andi	r25, 0x80	; 128
    3efa:	99 23       	and	r25, r25
    3efc:	24 f4       	brge	.+8      	; 0x3f06 <_Z5checkv+0x2dc8>
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	88 6f       	ori	r24, 0xF8	; 248
    3f02:	9f 6f       	ori	r25, 0xFF	; 255
    3f04:	01 96       	adiw	r24, 0x01	; 1
    3f06:	b8 01       	movw	r22, r16
    3f08:	68 1b       	sub	r22, r24
    3f0a:	79 0b       	sbc	r23, r25
    3f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f10:	99 23       	and	r25, r25
    3f12:	0c f4       	brge	.+2      	; 0x3f16 <_Z5checkv+0x2dd8>
    3f14:	07 96       	adiw	r24, 0x07	; 7
    3f16:	fc 01       	movw	r30, r24
    3f18:	f5 95       	asr	r31
    3f1a:	e7 95       	ror	r30
    3f1c:	f5 95       	asr	r31
    3f1e:	e7 95       	ror	r30
    3f20:	f5 95       	asr	r31
    3f22:	e7 95       	ror	r30
    3f24:	ea 0f       	add	r30, r26
    3f26:	fb 1f       	adc	r31, r27
    3f28:	f6 95       	lsr	r31
    3f2a:	fe 2f       	mov	r31, r30
    3f2c:	ee 27       	eor	r30, r30
    3f2e:	f7 95       	ror	r31
    3f30:	e7 95       	ror	r30
    3f32:	e2 0d       	add	r30, r2
    3f34:	f3 1d       	adc	r31, r3
    3f36:	e5 50       	subi	r30, 0x05	; 5
    3f38:	fc 4f       	sbci	r31, 0xFC	; 252
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	ca 01       	movw	r24, r20
    3f40:	02 2e       	mov	r0, r18
    3f42:	02 c0       	rjmp	.+4      	; 0x3f48 <_Z5checkv+0x2e0a>
    3f44:	88 0f       	add	r24, r24
    3f46:	99 1f       	adc	r25, r25
    3f48:	0a 94       	dec	r0
    3f4a:	e2 f7       	brpl	.-8      	; 0x3f44 <_Z5checkv+0x2e06>
    3f4c:	80 78       	andi	r24, 0x80	; 128
    3f4e:	99 27       	eor	r25, r25
    3f50:	06 2e       	mov	r0, r22
    3f52:	02 c0       	rjmp	.+4      	; 0x3f58 <_Z5checkv+0x2e1a>
    3f54:	95 95       	asr	r25
    3f56:	87 95       	ror	r24
    3f58:	0a 94       	dec	r0
    3f5a:	e2 f7       	brpl	.-8      	; 0x3f54 <_Z5checkv+0x2e16>
    3f5c:	90 81       	ld	r25, Z
    3f5e:	89 2b       	or	r24, r25
    3f60:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    3f62:	2f 5f       	subi	r18, 0xFF	; 255
    3f64:	3f 4f       	sbci	r19, 0xFF	; 255
    3f66:	28 30       	cpi	r18, 0x08	; 8
    3f68:	31 05       	cpc	r19, r1
    3f6a:	49 f7       	brne	.-46     	; 0x3f3e <_Z5checkv+0x2e00>
    3f6c:	ed 81       	ldd	r30, Y+5	; 0x05
    3f6e:	fe 81       	ldd	r31, Y+6	; 0x06
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    3f70:	31 96       	adiw	r30, 0x01	; 1
    3f72:	fe 83       	std	Y+6, r31	; 0x06
    3f74:	ed 83       	std	Y+5, r30	; 0x05
    3f76:	38 97       	sbiw	r30, 0x08	; 8
    3f78:	09 f0       	breq	.+2      	; 0x3f7c <_Z5checkv+0x2e3e>
    3f7a:	b7 cf       	rjmp	.-146    	; 0x3eea <_Z5checkv+0x2dac>
    3f7c:	0f 2e       	mov	r0, r31
    3f7e:	f8 e7       	ldi	r31, 0x78	; 120
    3f80:	ef 2e       	mov	r14, r31
    3f82:	f3 e0       	ldi	r31, 0x03	; 3
    3f84:	ff 2e       	mov	r15, r31
    3f86:	f0 2d       	mov	r31, r0
    3f88:	1e 82       	std	Y+6, r1	; 0x06
    3f8a:	1d 82       	std	Y+5, r1	; 0x05
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    3f8c:	07 e0       	ldi	r16, 0x07	; 7
    3f8e:	10 e0       	ldi	r17, 0x00	; 0
    3f90:	f7 01       	movw	r30, r14
    3f92:	41 91       	ld	r20, Z+
    3f94:	7f 01       	movw	r14, r30
    3f96:	50 e0       	ldi	r21, 0x00	; 0
    3f98:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3f9c:	87 70       	andi	r24, 0x07	; 7
    3f9e:	90 78       	andi	r25, 0x80	; 128
    3fa0:	99 23       	and	r25, r25
    3fa2:	24 f4       	brge	.+8      	; 0x3fac <_Z5checkv+0x2e6e>
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	88 6f       	ori	r24, 0xF8	; 248
    3fa8:	9f 6f       	ori	r25, 0xFF	; 255
    3faa:	01 96       	adiw	r24, 0x01	; 1
    3fac:	b8 01       	movw	r22, r16
    3fae:	68 1b       	sub	r22, r24
    3fb0:	79 0b       	sbc	r23, r25
    3fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb6:	99 23       	and	r25, r25
    3fb8:	0c f4       	brge	.+2      	; 0x3fbc <_Z5checkv+0x2e7e>
    3fba:	07 96       	adiw	r24, 0x07	; 7
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	f5 95       	asr	r31
    3fc0:	e7 95       	ror	r30
    3fc2:	f5 95       	asr	r31
    3fc4:	e7 95       	ror	r30
    3fc6:	f5 95       	asr	r31
    3fc8:	e7 95       	ror	r30
    3fca:	ea 0f       	add	r30, r26
    3fcc:	fb 1f       	adc	r31, r27
    3fce:	f6 95       	lsr	r31
    3fd0:	fe 2f       	mov	r31, r30
    3fd2:	ee 27       	eor	r30, r30
    3fd4:	f7 95       	ror	r31
    3fd6:	e7 95       	ror	r30
    3fd8:	2f 81       	ldd	r18, Y+7	; 0x07
    3fda:	38 85       	ldd	r19, Y+8	; 0x08
    3fdc:	e2 0f       	add	r30, r18
    3fde:	f3 1f       	adc	r31, r19
    3fe0:	e5 50       	subi	r30, 0x05	; 5
    3fe2:	fc 4f       	sbci	r31, 0xFC	; 252
    3fe4:	20 e0       	ldi	r18, 0x00	; 0
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	ca 01       	movw	r24, r20
    3fea:	02 2e       	mov	r0, r18
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <_Z5checkv+0x2eb4>
    3fee:	88 0f       	add	r24, r24
    3ff0:	99 1f       	adc	r25, r25
    3ff2:	0a 94       	dec	r0
    3ff4:	e2 f7       	brpl	.-8      	; 0x3fee <_Z5checkv+0x2eb0>
    3ff6:	80 78       	andi	r24, 0x80	; 128
    3ff8:	99 27       	eor	r25, r25
    3ffa:	06 2e       	mov	r0, r22
    3ffc:	02 c0       	rjmp	.+4      	; 0x4002 <_Z5checkv+0x2ec4>
    3ffe:	95 95       	asr	r25
    4000:	87 95       	ror	r24
    4002:	0a 94       	dec	r0
    4004:	e2 f7       	brpl	.-8      	; 0x3ffe <_Z5checkv+0x2ec0>
    4006:	90 81       	ld	r25, Z
    4008:	89 2b       	or	r24, r25
    400a:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    400c:	2f 5f       	subi	r18, 0xFF	; 255
    400e:	3f 4f       	sbci	r19, 0xFF	; 255
    4010:	28 30       	cpi	r18, 0x08	; 8
    4012:	31 05       	cpc	r19, r1
    4014:	49 f7       	brne	.-46     	; 0x3fe8 <_Z5checkv+0x2eaa>
    4016:	ed 81       	ldd	r30, Y+5	; 0x05
    4018:	fe 81       	ldd	r31, Y+6	; 0x06
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    401a:	31 96       	adiw	r30, 0x01	; 1
    401c:	fe 83       	std	Y+6, r31	; 0x06
    401e:	ed 83       	std	Y+5, r30	; 0x05
    4020:	38 97       	sbiw	r30, 0x08	; 8
    4022:	09 f0       	breq	.+2      	; 0x4026 <_Z5checkv+0x2ee8>
    4024:	b5 cf       	rjmp	.-150    	; 0x3f90 <_Z5checkv+0x2e52>
    4026:	0f 2e       	mov	r0, r31
    4028:	f8 e7       	ldi	r31, 0x78	; 120
    402a:	ef 2e       	mov	r14, r31
    402c:	f3 e0       	ldi	r31, 0x03	; 3
    402e:	ff 2e       	mov	r15, r31
    4030:	f0 2d       	mov	r31, r0
    4032:	1e 82       	std	Y+6, r1	; 0x06
    4034:	1d 82       	std	Y+5, r1	; 0x05
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4036:	07 e0       	ldi	r16, 0x07	; 7
    4038:	10 e0       	ldi	r17, 0x00	; 0
    403a:	f7 01       	movw	r30, r14
    403c:	41 91       	ld	r20, Z+
    403e:	7f 01       	movw	r14, r30
    4040:	50 e0       	ldi	r21, 0x00	; 0
    4042:	8d 81       	ldd	r24, Y+5	; 0x05
    4044:	9e 81       	ldd	r25, Y+6	; 0x06
    4046:	87 70       	andi	r24, 0x07	; 7
    4048:	90 78       	andi	r25, 0x80	; 128
    404a:	99 23       	and	r25, r25
    404c:	24 f4       	brge	.+8      	; 0x4056 <_Z5checkv+0x2f18>
    404e:	01 97       	sbiw	r24, 0x01	; 1
    4050:	88 6f       	ori	r24, 0xF8	; 248
    4052:	9f 6f       	ori	r25, 0xFF	; 255
    4054:	01 96       	adiw	r24, 0x01	; 1
    4056:	b8 01       	movw	r22, r16
    4058:	68 1b       	sub	r22, r24
    405a:	79 0b       	sbc	r23, r25
    405c:	8d 81       	ldd	r24, Y+5	; 0x05
    405e:	9e 81       	ldd	r25, Y+6	; 0x06
    4060:	99 23       	and	r25, r25
    4062:	0c f4       	brge	.+2      	; 0x4066 <_Z5checkv+0x2f28>
    4064:	07 96       	adiw	r24, 0x07	; 7
    4066:	fc 01       	movw	r30, r24
    4068:	f5 95       	asr	r31
    406a:	e7 95       	ror	r30
    406c:	f5 95       	asr	r31
    406e:	e7 95       	ror	r30
    4070:	f5 95       	asr	r31
    4072:	e7 95       	ror	r30
    4074:	ea 0f       	add	r30, r26
    4076:	fb 1f       	adc	r31, r27
    4078:	f6 95       	lsr	r31
    407a:	fe 2f       	mov	r31, r30
    407c:	ee 27       	eor	r30, r30
    407e:	f7 95       	ror	r31
    4080:	e7 95       	ror	r30
    4082:	29 81       	ldd	r18, Y+1	; 0x01
    4084:	3a 81       	ldd	r19, Y+2	; 0x02
    4086:	e2 0f       	add	r30, r18
    4088:	f3 1f       	adc	r31, r19
    408a:	e5 50       	subi	r30, 0x05	; 5
    408c:	fc 4f       	sbci	r31, 0xFC	; 252
    408e:	20 e0       	ldi	r18, 0x00	; 0
    4090:	30 e0       	ldi	r19, 0x00	; 0
    4092:	ca 01       	movw	r24, r20
    4094:	02 2e       	mov	r0, r18
    4096:	02 c0       	rjmp	.+4      	; 0x409c <_Z5checkv+0x2f5e>
    4098:	88 0f       	add	r24, r24
    409a:	99 1f       	adc	r25, r25
    409c:	0a 94       	dec	r0
    409e:	e2 f7       	brpl	.-8      	; 0x4098 <_Z5checkv+0x2f5a>
    40a0:	80 78       	andi	r24, 0x80	; 128
    40a2:	99 27       	eor	r25, r25
    40a4:	06 2e       	mov	r0, r22
    40a6:	02 c0       	rjmp	.+4      	; 0x40ac <_Z5checkv+0x2f6e>
    40a8:	95 95       	asr	r25
    40aa:	87 95       	ror	r24
    40ac:	0a 94       	dec	r0
    40ae:	e2 f7       	brpl	.-8      	; 0x40a8 <_Z5checkv+0x2f6a>
    40b0:	90 81       	ld	r25, Z
    40b2:	89 2b       	or	r24, r25
    40b4:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    40b6:	2f 5f       	subi	r18, 0xFF	; 255
    40b8:	3f 4f       	sbci	r19, 0xFF	; 255
    40ba:	28 30       	cpi	r18, 0x08	; 8
    40bc:	31 05       	cpc	r19, r1
    40be:	49 f7       	brne	.-46     	; 0x4092 <_Z5checkv+0x2f54>
    40c0:	ed 81       	ldd	r30, Y+5	; 0x05
    40c2:	fe 81       	ldd	r31, Y+6	; 0x06
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    40c4:	31 96       	adiw	r30, 0x01	; 1
    40c6:	fe 83       	std	Y+6, r31	; 0x06
    40c8:	ed 83       	std	Y+5, r30	; 0x05
    40ca:	38 97       	sbiw	r30, 0x08	; 8
    40cc:	09 f0       	breq	.+2      	; 0x40d0 <_Z5checkv+0x2f92>
    40ce:	b5 cf       	rjmp	.-150    	; 0x403a <_Z5checkv+0x2efc>
    40d0:	1a 82       	std	Y+2, r1	; 0x02
    40d2:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    40d4:	07 e0       	ldi	r16, 0x07	; 7
    40d6:	10 e0       	ldi	r17, 0x00	; 0
    40d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    40da:	fc 85       	ldd	r31, Y+12	; 0x0c
    40dc:	61 91       	ld	r22, Z+
    40de:	fc 87       	std	Y+12, r31	; 0x0c
    40e0:	eb 87       	std	Y+11, r30	; 0x0b
    40e2:	70 e0       	ldi	r23, 0x00	; 0
    40e4:	89 81       	ldd	r24, Y+1	; 0x01
    40e6:	9a 81       	ldd	r25, Y+2	; 0x02
    40e8:	87 70       	andi	r24, 0x07	; 7
    40ea:	90 78       	andi	r25, 0x80	; 128
    40ec:	99 23       	and	r25, r25
    40ee:	24 f4       	brge	.+8      	; 0x40f8 <_Z5checkv+0x2fba>
    40f0:	01 97       	sbiw	r24, 0x01	; 1
    40f2:	88 6f       	ori	r24, 0xF8	; 248
    40f4:	9f 6f       	ori	r25, 0xFF	; 255
    40f6:	01 96       	adiw	r24, 0x01	; 1
    40f8:	78 01       	movw	r14, r16
    40fa:	e8 1a       	sub	r14, r24
    40fc:	f9 0a       	sbc	r15, r25
    40fe:	89 81       	ldd	r24, Y+1	; 0x01
    4100:	9a 81       	ldd	r25, Y+2	; 0x02
    4102:	99 23       	and	r25, r25
    4104:	0c f4       	brge	.+2      	; 0x4108 <__stack+0x9>
    4106:	07 96       	adiw	r24, 0x07	; 7
    4108:	ac 01       	movw	r20, r24
    410a:	55 95       	asr	r21
    410c:	47 95       	ror	r20
    410e:	55 95       	asr	r21
    4110:	47 95       	ror	r20
    4112:	55 95       	asr	r21
    4114:	47 95       	ror	r20
    4116:	4a 0f       	add	r20, r26
    4118:	5b 1f       	adc	r21, r27
    411a:	56 95       	lsr	r21
    411c:	54 2f       	mov	r21, r20
    411e:	44 27       	eor	r20, r20
    4120:	57 95       	ror	r21
    4122:	47 95       	ror	r20
    4124:	2b 81       	ldd	r18, Y+3	; 0x03
    4126:	3c 81       	ldd	r19, Y+4	; 0x04
    4128:	42 0f       	add	r20, r18
    412a:	53 1f       	adc	r21, r19
    412c:	fa 01       	movw	r30, r20
    412e:	e5 50       	subi	r30, 0x05	; 5
    4130:	fc 4f       	sbci	r31, 0xFC	; 252
    4132:	20 e0       	ldi	r18, 0x00	; 0
    4134:	30 e0       	ldi	r19, 0x00	; 0
    4136:	cb 01       	movw	r24, r22
    4138:	02 2e       	mov	r0, r18
    413a:	02 c0       	rjmp	.+4      	; 0x4140 <__stack+0x41>
    413c:	88 0f       	add	r24, r24
    413e:	99 1f       	adc	r25, r25
    4140:	0a 94       	dec	r0
    4142:	e2 f7       	brpl	.-8      	; 0x413c <__stack+0x3d>
    4144:	80 78       	andi	r24, 0x80	; 128
    4146:	99 27       	eor	r25, r25
    4148:	0e 2c       	mov	r0, r14
    414a:	02 c0       	rjmp	.+4      	; 0x4150 <__stack+0x51>
    414c:	95 95       	asr	r25
    414e:	87 95       	ror	r24
    4150:	0a 94       	dec	r0
    4152:	e2 f7       	brpl	.-8      	; 0x414c <__stack+0x4d>
    4154:	90 81       	ld	r25, Z
    4156:	89 2b       	or	r24, r25
    4158:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    415a:	2f 5f       	subi	r18, 0xFF	; 255
    415c:	3f 4f       	sbci	r19, 0xFF	; 255
    415e:	28 30       	cpi	r18, 0x08	; 8
    4160:	31 05       	cpc	r19, r1
    4162:	49 f7       	brne	.-46     	; 0x4136 <__stack+0x37>
    4164:	89 81       	ldd	r24, Y+1	; 0x01
    4166:	9a 81       	ldd	r25, Y+2	; 0x02
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4168:	01 96       	adiw	r24, 0x01	; 1
    416a:	9a 83       	std	Y+2, r25	; 0x02
    416c:	89 83       	std	Y+1, r24	; 0x01
    416e:	08 97       	sbiw	r24, 0x08	; 8
    4170:	09 f0       	breq	.+2      	; 0x4174 <__stack+0x75>
    4172:	b2 cf       	rjmp	.-156    	; 0x40d8 <_Z5checkv+0x2f9a>
		oled.OLED_Write_To_Bufer(xcoord[0],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[1],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[2],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[3],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[4],ycoord+1,1,8,line);
		oled.OLED_Write_To_Bufer(xcoord[pointer],ycoord+2,1,8,downn);
    4174:	f4 01       	movw	r30, r8
    4176:	ee 0f       	add	r30, r30
    4178:	ff 1f       	adc	r31, r31
    417a:	e2 51       	subi	r30, 0x12	; 18
    417c:	fc 4f       	sbci	r31, 0xFC	; 252
    417e:	60 81       	ld	r22, Z
    4180:	71 81       	ldd	r23, Z+1	; 0x01
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4182:	1a 82       	std	Y+2, r1	; 0x02
    4184:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4186:	0f 2e       	mov	r0, r31
    4188:	f7 e0       	ldi	r31, 0x07	; 7
    418a:	ef 2e       	mov	r14, r31
    418c:	f1 2c       	mov	r15, r1
    418e:	f0 2d       	mov	r31, r0
    4190:	86 2e       	mov	r8, r22
    4192:	97 2e       	mov	r9, r23
    4194:	ef 85       	ldd	r30, Y+15	; 0x0f
    4196:	f8 89       	ldd	r31, Y+16	; 0x10
    4198:	41 91       	ld	r20, Z+
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	9a 81       	ldd	r25, Y+2	; 0x02
    41a0:	87 70       	andi	r24, 0x07	; 7
    41a2:	90 78       	andi	r25, 0x80	; 128
    41a4:	99 23       	and	r25, r25
    41a6:	24 f4       	brge	.+8      	; 0x41b0 <__stack+0xb1>
    41a8:	01 97       	sbiw	r24, 0x01	; 1
    41aa:	88 6f       	ori	r24, 0xF8	; 248
    41ac:	9f 6f       	ori	r25, 0xFF	; 255
    41ae:	01 96       	adiw	r24, 0x01	; 1
    41b0:	27 01       	movw	r4, r14
    41b2:	48 1a       	sub	r4, r24
    41b4:	59 0a       	sbc	r5, r25
    41b6:	08 2d       	mov	r16, r8
    41b8:	19 2d       	mov	r17, r9
    41ba:	89 81       	ldd	r24, Y+1	; 0x01
    41bc:	9a 81       	ldd	r25, Y+2	; 0x02
    41be:	99 23       	and	r25, r25
    41c0:	0c f4       	brge	.+2      	; 0x41c4 <__stack+0xc5>
    41c2:	07 96       	adiw	r24, 0x07	; 7
    41c4:	dc 01       	movw	r26, r24
    41c6:	b5 95       	asr	r27
    41c8:	a7 95       	ror	r26
    41ca:	b5 95       	asr	r27
    41cc:	a7 95       	ror	r26
    41ce:	b5 95       	asr	r27
    41d0:	a7 95       	ror	r26
    41d2:	a6 0d       	add	r26, r6
    41d4:	b7 1d       	adc	r27, r7
    41d6:	b6 95       	lsr	r27
    41d8:	ba 2f       	mov	r27, r26
    41da:	aa 27       	eor	r26, r26
    41dc:	b7 95       	ror	r27
    41de:	a7 95       	ror	r26
    41e0:	a6 0f       	add	r26, r22
    41e2:	b7 1f       	adc	r27, r23
    41e4:	a5 50       	subi	r26, 0x05	; 5
    41e6:	bc 4f       	sbci	r27, 0xFC	; 252
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	ca 01       	movw	r24, r20
    41ee:	02 2e       	mov	r0, r18
    41f0:	02 c0       	rjmp	.+4      	; 0x41f6 <__stack+0xf7>
    41f2:	88 0f       	add	r24, r24
    41f4:	99 1f       	adc	r25, r25
    41f6:	0a 94       	dec	r0
    41f8:	e2 f7       	brpl	.-8      	; 0x41f2 <__stack+0xf3>
    41fa:	80 78       	andi	r24, 0x80	; 128
    41fc:	99 27       	eor	r25, r25
    41fe:	04 2c       	mov	r0, r4
    4200:	02 c0       	rjmp	.+4      	; 0x4206 <__stack+0x107>
    4202:	95 95       	asr	r25
    4204:	87 95       	ror	r24
    4206:	0a 94       	dec	r0
    4208:	e2 f7       	brpl	.-8      	; 0x4202 <__stack+0x103>
    420a:	9c 91       	ld	r25, X
    420c:	89 2b       	or	r24, r25
    420e:	8d 93       	st	X+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4210:	2f 5f       	subi	r18, 0xFF	; 255
    4212:	3f 4f       	sbci	r19, 0xFF	; 255
    4214:	28 30       	cpi	r18, 0x08	; 8
    4216:	31 05       	cpc	r19, r1
    4218:	49 f7       	brne	.-46     	; 0x41ec <__stack+0xed>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    421a:	29 81       	ldd	r18, Y+1	; 0x01
    421c:	3a 81       	ldd	r19, Y+2	; 0x02
    421e:	2f 5f       	subi	r18, 0xFF	; 255
    4220:	3f 4f       	sbci	r19, 0xFF	; 255
    4222:	3a 83       	std	Y+2, r19	; 0x02
    4224:	29 83       	std	Y+1, r18	; 0x01
    4226:	28 30       	cpi	r18, 0x08	; 8
    4228:	31 05       	cpc	r19, r1
    422a:	09 f0       	breq	.+2      	; 0x422e <__stack+0x12f>
    422c:	b5 cf       	rjmp	.-150    	; 0x4198 <__stack+0x99>
    422e:	1a 82       	std	Y+2, r1	; 0x02
    4230:	19 82       	std	Y+1, r1	; 0x01
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4232:	0f 2e       	mov	r0, r31
    4234:	f7 e0       	ldi	r31, 0x07	; 7
    4236:	ef 2e       	mov	r14, r31
    4238:	f1 2c       	mov	r15, r1
    423a:	f0 2d       	mov	r31, r0
    423c:	e9 85       	ldd	r30, Y+9	; 0x09
    423e:	fa 85       	ldd	r31, Y+10	; 0x0a
    4240:	41 91       	ld	r20, Z+
    4242:	50 e0       	ldi	r21, 0x00	; 0
    4244:	89 81       	ldd	r24, Y+1	; 0x01
    4246:	9a 81       	ldd	r25, Y+2	; 0x02
    4248:	87 70       	andi	r24, 0x07	; 7
    424a:	90 78       	andi	r25, 0x80	; 128
    424c:	99 23       	and	r25, r25
    424e:	24 f4       	brge	.+8      	; 0x4258 <__stack+0x159>
    4250:	01 97       	sbiw	r24, 0x01	; 1
    4252:	88 6f       	ori	r24, 0xF8	; 248
    4254:	9f 6f       	ori	r25, 0xFF	; 255
    4256:	01 96       	adiw	r24, 0x01	; 1
    4258:	47 01       	movw	r8, r14
    425a:	88 1a       	sub	r8, r24
    425c:	99 0a       	sbc	r9, r25
    425e:	89 81       	ldd	r24, Y+1	; 0x01
    4260:	9a 81       	ldd	r25, Y+2	; 0x02
    4262:	99 23       	and	r25, r25
    4264:	0c f4       	brge	.+2      	; 0x4268 <__stack+0x169>
    4266:	07 96       	adiw	r24, 0x07	; 7
    4268:	dc 01       	movw	r26, r24
    426a:	b5 95       	asr	r27
    426c:	a7 95       	ror	r26
    426e:	b5 95       	asr	r27
    4270:	a7 95       	ror	r26
    4272:	b5 95       	asr	r27
    4274:	a7 95       	ror	r26
    4276:	ac 0d       	add	r26, r12
    4278:	bd 1d       	adc	r27, r13
    427a:	b6 95       	lsr	r27
    427c:	ba 2f       	mov	r27, r26
    427e:	aa 27       	eor	r26, r26
    4280:	b7 95       	ror	r27
    4282:	a7 95       	ror	r26
    4284:	a0 0f       	add	r26, r16
    4286:	b1 1f       	adc	r27, r17
    4288:	a5 50       	subi	r26, 0x05	; 5
    428a:	bc 4f       	sbci	r27, 0xFC	; 252
    428c:	20 e0       	ldi	r18, 0x00	; 0
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	ca 01       	movw	r24, r20
    4292:	02 2e       	mov	r0, r18
    4294:	02 c0       	rjmp	.+4      	; 0x429a <__stack+0x19b>
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	0a 94       	dec	r0
    429c:	e2 f7       	brpl	.-8      	; 0x4296 <__stack+0x197>
    429e:	80 78       	andi	r24, 0x80	; 128
    42a0:	99 27       	eor	r25, r25
    42a2:	08 2c       	mov	r0, r8
    42a4:	02 c0       	rjmp	.+4      	; 0x42aa <__stack+0x1ab>
    42a6:	95 95       	asr	r25
    42a8:	87 95       	ror	r24
    42aa:	0a 94       	dec	r0
    42ac:	e2 f7       	brpl	.-8      	; 0x42a6 <__stack+0x1a7>
    42ae:	9c 91       	ld	r25, X
    42b0:	89 2b       	or	r24, r25
    42b2:	8d 93       	st	X+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    42b4:	2f 5f       	subi	r18, 0xFF	; 255
    42b6:	3f 4f       	sbci	r19, 0xFF	; 255
    42b8:	28 30       	cpi	r18, 0x08	; 8
    42ba:	31 05       	cpc	r19, r1
    42bc:	49 f7       	brne	.-46     	; 0x4290 <__stack+0x191>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    42be:	89 81       	ldd	r24, Y+1	; 0x01
    42c0:	9a 81       	ldd	r25, Y+2	; 0x02
    42c2:	01 96       	adiw	r24, 0x01	; 1
    42c4:	9a 83       	std	Y+2, r25	; 0x02
    42c6:	89 83       	std	Y+1, r24	; 0x01
    42c8:	08 97       	sbiw	r24, 0x08	; 8
    42ca:	09 f0       	breq	.+2      	; 0x42ce <__stack+0x1cf>
    42cc:	b9 cf       	rjmp	.-142    	; 0x4240 <__stack+0x141>
		if(pointer<0)pointer=0;
		if (pointer>=0)
		{
			
			write_default();
			variants(xcoord[pointer],ycoord);
    42ce:	a5 01       	movw	r20, r10
    42d0:	8a ee       	ldi	r24, 0xEA	; 234
    42d2:	93 e0       	ldi	r25, 0x03	; 3
    42d4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN14password_scene8variantsEii>
			oled.OLED_Clear_Bufer_part(xcoord[pointer+1],ycoord+2,1,8);
    42d8:	ea ee       	ldi	r30, 0xEA	; 234
    42da:	f3 e0       	ldi	r31, 0x03	; 3
    42dc:	a6 85       	ldd	r26, Z+14	; 0x0e
    42de:	b7 85       	ldd	r27, Z+15	; 0x0f
    42e0:	7d 01       	movw	r14, r26
    42e2:	92 e0       	ldi	r25, 0x02	; 2
    42e4:	e9 0e       	add	r14, r25
    42e6:	f1 1c       	adc	r15, r1
    42e8:	01 90       	ld	r0, Z+
    42ea:	f0 81       	ld	r31, Z
    42ec:	e0 2d       	mov	r30, r0
    42ee:	ee 0f       	add	r30, r30
    42f0:	ff 1f       	adc	r31, r31
    42f2:	e0 51       	subi	r30, 0x10	; 16
    42f4:	fc 4f       	sbci	r31, 0xFC	; 252
    42f6:	00 81       	ld	r16, Z
    42f8:	11 81       	ldd	r17, Z+1	; 0x01
    42fa:	1a 83       	std	Y+2, r17	; 0x02
    42fc:	09 83       	std	Y+1, r16	; 0x01
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    42fe:	60 e0       	ldi	r22, 0x00	; 0
    4300:	70 e0       	ldi	r23, 0x00	; 0
    4302:	c9 80       	ldd	r12, Y+1	; 0x01
    4304:	da 80       	ldd	r13, Y+2	; 0x02
    4306:	08 5f       	subi	r16, 0xF8	; 248
    4308:	1f 4f       	sbci	r17, 0xFF	; 255
    430a:	2c 2d       	mov	r18, r12
    430c:	3d 2d       	mov	r19, r13
    430e:	cb 01       	movw	r24, r22
    4310:	77 23       	and	r23, r23
    4312:	0c f4       	brge	.+2      	; 0x4316 <__stack+0x217>
    4314:	07 96       	adiw	r24, 0x07	; 7
    4316:	95 95       	asr	r25
    4318:	87 95       	ror	r24
    431a:	95 95       	asr	r25
    431c:	87 95       	ror	r24
    431e:	95 95       	asr	r25
    4320:	87 95       	ror	r24
    4322:	8e 0d       	add	r24, r14
    4324:	9f 1d       	adc	r25, r15
    4326:	96 95       	lsr	r25
    4328:	98 2f       	mov	r25, r24
    432a:	88 27       	eor	r24, r24
    432c:	97 95       	ror	r25
    432e:	87 95       	ror	r24
    4330:	e9 81       	ldd	r30, Y+1	; 0x01
    4332:	fa 81       	ldd	r31, Y+2	; 0x02
    4334:	e8 0f       	add	r30, r24
    4336:	f9 1f       	adc	r31, r25
    4338:	e5 50       	subi	r30, 0x05	; 5
    433a:	fc 4f       	sbci	r31, 0xFC	; 252
    433c:	a8 01       	movw	r20, r16
    433e:	80 0f       	add	r24, r16
    4340:	91 1f       	adc	r25, r17
    4342:	85 50       	subi	r24, 0x05	; 5
    4344:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    4346:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    4348:	8e 17       	cp	r24, r30
    434a:	9f 07       	cpc	r25, r31
    434c:	e1 f7       	brne	.-8      	; 0x4346 <__stack+0x247>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    434e:	6f 5f       	subi	r22, 0xFF	; 255
    4350:	7f 4f       	sbci	r23, 0xFF	; 255
    4352:	68 30       	cpi	r22, 0x08	; 8
    4354:	71 05       	cpc	r23, r1
    4356:	c9 f6       	brne	.-78     	; 0x430a <__stack+0x20b>
		{
			
			write_default();
			variants(xcoord[pointer],ycoord);
			oled.OLED_Clear_Bufer_part(xcoord[pointer+1],ycoord+2,1,8);
			oled.OLED_Clear_Bufer_part(xcoord[pointer+1],ycoord-1,1,8);
    4358:	11 97       	sbiw	r26, 0x01	; 1
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    435a:	60 e0       	ldi	r22, 0x00	; 0
    435c:	70 e0       	ldi	r23, 0x00	; 0
    435e:	cb 01       	movw	r24, r22
    4360:	77 23       	and	r23, r23
    4362:	0c f4       	brge	.+2      	; 0x4366 <__stack+0x267>
    4364:	07 96       	adiw	r24, 0x07	; 7
    4366:	95 95       	asr	r25
    4368:	87 95       	ror	r24
    436a:	95 95       	asr	r25
    436c:	87 95       	ror	r24
    436e:	95 95       	asr	r25
    4370:	87 95       	ror	r24
    4372:	8a 0f       	add	r24, r26
    4374:	9b 1f       	adc	r25, r27
    4376:	96 95       	lsr	r25
    4378:	98 2f       	mov	r25, r24
    437a:	88 27       	eor	r24, r24
    437c:	97 95       	ror	r25
    437e:	87 95       	ror	r24
    4380:	fc 01       	movw	r30, r24
    4382:	e2 0f       	add	r30, r18
    4384:	f3 1f       	adc	r31, r19
    4386:	e5 50       	subi	r30, 0x05	; 5
    4388:	fc 4f       	sbci	r31, 0xFC	; 252
    438a:	84 0f       	add	r24, r20
    438c:	95 1f       	adc	r25, r21
    438e:	85 50       	subi	r24, 0x05	; 5
    4390:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    4392:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    4394:	e8 17       	cp	r30, r24
    4396:	f9 07       	cpc	r31, r25
    4398:	e1 f7       	brne	.-8      	; 0x4392 <__stack+0x293>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    439a:	6f 5f       	subi	r22, 0xFF	; 255
    439c:	7f 4f       	sbci	r23, 0xFF	; 255
    439e:	68 30       	cpi	r22, 0x08	; 8
    43a0:	71 05       	cpc	r23, r1
    43a2:	e9 f6       	brne	.-70     	; 0x435e <__stack+0x25f>
		oled.OLED_Write_To_Bufer(0,0,1,8,five);
		if(!pss)passw.back();
		else passww.back();
		
	}
		btn0=false;
    43a4:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <btn0>
		btn1=false;
    43a8:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <btn1>
		btn2=false;
    43ac:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <btn2>
		btn3=false;
    43b0:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <btn3>
		btn03=false;
    43b4:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <btn03>
		btn12=false;
    43b8:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <btn12>
	
}
    43bc:	5f c0       	rjmp	.+190    	; 0x447c <__stack+0x37d>
void check()
{
	if(btn0 & !btn1 & !btn2 & btn3) btn03=true;
	if(!btn0 & btn1 & btn2 & !btn3) btn12=true;
	
	if(btn0 & !btn1 & !btn2 & !btn3 & !btn12 & !btn03)
    43be:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <btn12>
    43c2:	21 e0       	ldi	r18, 0x01	; 1
    43c4:	2e 27       	eor	r18, r30
    43c6:	70 91 dd 03 	lds	r23, 0x03DD	; 0x8003dd <btn03>
    43ca:	08 2f       	mov	r16, r24
    43cc:	02 23       	and	r16, r18
    43ce:	a0 23       	and	r26, r16
    43d0:	7a 17       	cp	r23, r26
    43d2:	10 f4       	brcc	.+4      	; 0x43d8 <__stack+0x2d9>
    43d4:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <_Z5checkv+0x98>
    43d8:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <_Z5checkv+0xa5a>
	
	void up()
	{
		imgnum++;
		if (imgnum>2) imgnum=0;
		variants(xcoord,ycoord);
    43dc:	e2 ee       	ldi	r30, 0xE2	; 226
    43de:	f3 e0       	ldi	r31, 0x03	; 3
    43e0:	06 81       	ldd	r16, Z+6	; 0x06
    43e2:	17 81       	ldd	r17, Z+7	; 0x07
    43e4:	24 81       	ldd	r18, Z+4	; 0x04
    43e6:	35 81       	ldd	r19, Z+5	; 0x05
		}
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
    43e8:	81 30       	cpi	r24, 0x01	; 1
    43ea:	91 05       	cpc	r25, r1
    43ec:	11 f4       	brne	.+4      	; 0x43f2 <__stack+0x2f3>
    43ee:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <_Z5checkv+0x2c4>
    43f2:	82 30       	cpi	r24, 0x02	; 2
    43f4:	91 05       	cpc	r25, r1
    43f6:	11 f4       	brne	.+4      	; 0x43fc <__stack+0x2fd>
    43f8:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <_Z5checkv+0x3f4>
    43fc:	89 2b       	or	r24, r25
    43fe:	91 f6       	brne	.-92     	; 0x43a4 <__stack+0x2a5>
    4400:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <_Z5checkv+0x194>
	
	void down()
	{
		imgnum--;
		if (imgnum<0) imgnum=2;
		variants(xcoord,ycoord);
    4404:	e2 ee       	ldi	r30, 0xE2	; 226
    4406:	f3 e0       	ldi	r31, 0x03	; 3
    4408:	a6 81       	ldd	r26, Z+6	; 0x06
    440a:	b7 81       	ldd	r27, Z+7	; 0x07
    440c:	24 81       	ldd	r18, Z+4	; 0x04
    440e:	35 81       	ldd	r19, Z+5	; 0x05
		}
	}
	
	void variants(int x,int y)
	{
		switch(imgnum)
    4410:	81 30       	cpi	r24, 0x01	; 1
    4412:	91 05       	cpc	r25, r1
    4414:	11 f4       	brne	.+4      	; 0x441a <__stack+0x31b>
    4416:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <_Z5checkv+0xe72>
    441a:	82 30       	cpi	r24, 0x02	; 2
    441c:	91 05       	cpc	r25, r1
    441e:	11 f4       	brne	.+4      	; 0x4424 <__stack+0x325>
    4420:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <_Z5checkv+0xd2e>
    4424:	89 2b       	or	r24, r25
    4426:	09 f0       	breq	.+2      	; 0x442a <__stack+0x32b>
    4428:	bd cf       	rjmp	.-134    	; 0x43a4 <__stack+0x2a5>
    442a:	0c 94 40 0f 	jmp	0x1e80	; 0x1e80 <_Z5checkv+0xd42>
	void forward()
	{
		write_default();
		pointer++;
		if(pointer>4)pointer=4;
		if (pointer<5)
    442e:	c0 90 ea 03 	lds	r12, 0x03EA	; 0x8003ea <passww>
    4432:	d0 90 eb 03 	lds	r13, 0x03EB	; 0x8003eb <passww+0x1>
    4436:	0f 2e       	mov	r0, r31
    4438:	f8 e7       	ldi	r31, 0x78	; 120
    443a:	ef 2e       	mov	r14, r31
    443c:	f3 e0       	ldi	r31, 0x03	; 3
    443e:	ff 2e       	mov	r15, r31
    4440:	f0 2d       	mov	r31, r0
    4442:	40 e0       	ldi	r20, 0x00	; 0
    4444:	50 e0       	ldi	r21, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4446:	07 e0       	ldi	r16, 0x07	; 7
    4448:	10 e0       	ldi	r17, 0x00	; 0
    444a:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <_Z5checkv+0x1c70>
	void back()
	{
		write_default();
		pointer--;
		if(pointer<0)pointer=0;
		if (pointer>=0)
    444e:	80 90 ea 03 	lds	r8, 0x03EA	; 0x8003ea <passww>
    4452:	90 90 eb 03 	lds	r9, 0x03EB	; 0x8003eb <passww+0x1>
    4456:	0f 2e       	mov	r0, r31
    4458:	f8 e7       	ldi	r31, 0x78	; 120
    445a:	ef 2e       	mov	r14, r31
    445c:	f3 e0       	ldi	r31, 0x03	; 3
    445e:	ff 2e       	mov	r15, r31
    4460:	f0 2d       	mov	r31, r0
    4462:	1e 86       	std	Y+14, r1	; 0x0e
    4464:	1d 86       	std	Y+13, r1	; 0x0d
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4466:	07 e0       	ldi	r16, 0x07	; 7
    4468:	10 e0       	ldi	r17, 0x00	; 0
    446a:	ea cc       	rjmp	.-1580   	; 0x3e40 <_Z5checkv+0x2d02>
void check()
{
	if(btn0 & !btn1 & !btn2 & btn3) btn03=true;
	if(!btn0 & btn1 & btn2 & !btn3) btn12=true;
	
	if(btn0 & !btn1 & !btn2 & !btn3 & !btn12 & !btn03)
    446c:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <btn12>
    4470:	21 e0       	ldi	r18, 0x01	; 1
    4472:	2e 27       	eor	r18, r30
    4474:	70 91 dd 03 	lds	r23, 0x03DD	; 0x8003dd <btn03>
    4478:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <_Z5checkv+0xa5a>
		btn2=false;
		btn3=false;
		btn03=false;
		btn12=false;
	
}
    447c:	62 96       	adiw	r28, 0x12	; 18
    447e:	0f b6       	in	r0, 0x3f	; 63
    4480:	f8 94       	cli
    4482:	de bf       	out	0x3e, r29	; 62
    4484:	0f be       	out	0x3f, r0	; 63
    4486:	cd bf       	out	0x3d, r28	; 61
    4488:	df 91       	pop	r29
    448a:	cf 91       	pop	r28
    448c:	1f 91       	pop	r17
    448e:	0f 91       	pop	r16
    4490:	ff 90       	pop	r15
    4492:	ef 90       	pop	r14
    4494:	df 90       	pop	r13
    4496:	cf 90       	pop	r12
    4498:	bf 90       	pop	r11
    449a:	af 90       	pop	r10
    449c:	9f 90       	pop	r9
    449e:	8f 90       	pop	r8
    44a0:	7f 90       	pop	r7
    44a2:	6f 90       	pop	r6
    44a4:	5f 90       	pop	r5
    44a6:	4f 90       	pop	r4
    44a8:	3f 90       	pop	r3
    44aa:	2f 90       	pop	r2
    44ac:	08 95       	ret

000044ae <_ZN6Batary19printlvltoOLEDbuferEv>:
	if((PINB>>2)&0b00000001==1) kf++;
	if((PINB>>3)&0b00000001==1) kf++;
	curlvl=kf;
}

void printlvltoOLEDbufer()
    44ae:	8f 92       	push	r8
    44b0:	9f 92       	push	r9
    44b2:	af 92       	push	r10
    44b4:	bf 92       	push	r11
    44b6:	cf 92       	push	r12
    44b8:	df 92       	push	r13
    44ba:	ef 92       	push	r14
    44bc:	ff 92       	push	r15
    44be:	0f 93       	push	r16
    44c0:	1f 93       	push	r17
    44c2:	cf 93       	push	r28
    44c4:	df 93       	push	r29
    44c6:	4c 01       	movw	r8, r24
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
    44c8:	fc 01       	movw	r30, r24
    44ca:	80 81       	ld	r24, Z
    44cc:	91 81       	ldd	r25, Z+1	; 0x01
    44ce:	00 97       	sbiw	r24, 0x00	; 0
    44d0:	09 f0       	breq	.+2      	; 0x44d4 <_ZN6Batary19printlvltoOLEDbuferEv+0x26>
    44d2:	de c1       	rjmp	.+956    	; 0x4890 <_ZN6Batary19printlvltoOLEDbuferEv+0x3e2>
    44d4:	0f 2e       	mov	r0, r31
    44d6:	f0 e9       	ldi	r31, 0x90	; 144
    44d8:	af 2e       	mov	r10, r31
    44da:	f1 e0       	ldi	r31, 0x01	; 1
    44dc:	bf 2e       	mov	r11, r31
    44de:	f0 2d       	mov	r31, r0
    44e0:	e1 2c       	mov	r14, r1
    44e2:	f1 2c       	mov	r15, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    44e4:	0f 2e       	mov	r0, r31
    44e6:	f7 e0       	ldi	r31, 0x07	; 7
    44e8:	cf 2e       	mov	r12, r31
    44ea:	d1 2c       	mov	r13, r1
    44ec:	f0 2d       	mov	r31, r0
    44ee:	c7 01       	movw	r24, r14
    44f0:	87 70       	andi	r24, 0x07	; 7
    44f2:	90 78       	andi	r25, 0x80	; 128
    44f4:	99 23       	and	r25, r25
    44f6:	24 f4       	brge	.+8      	; 0x4500 <_ZN6Batary19printlvltoOLEDbuferEv+0x52>
    44f8:	01 97       	sbiw	r24, 0x01	; 1
    44fa:	88 6f       	ori	r24, 0xF8	; 248
    44fc:	9f 6f       	ori	r25, 0xFF	; 255
    44fe:	01 96       	adiw	r24, 0x01	; 1
    4500:	b6 01       	movw	r22, r12
    4502:	68 1b       	sub	r22, r24
    4504:	79 0b       	sbc	r23, r25
    4506:	87 01       	movw	r16, r14
    4508:	ff 20       	and	r15, r15
    450a:	14 f4       	brge	.+4      	; 0x4510 <_ZN6Batary19printlvltoOLEDbuferEv+0x62>
    450c:	09 5f       	subi	r16, 0xF9	; 249
    450e:	1f 4f       	sbci	r17, 0xFF	; 255
    4510:	15 95       	asr	r17
    4512:	07 95       	ror	r16
    4514:	15 95       	asr	r17
    4516:	07 95       	ror	r16
    4518:	15 95       	asr	r17
    451a:	07 95       	ror	r16
    451c:	16 95       	lsr	r17
    451e:	10 2f       	mov	r17, r16
    4520:	00 27       	eor	r16, r16
    4522:	17 95       	ror	r17
    4524:	07 95       	ror	r16
    4526:	d8 01       	movw	r26, r16
    4528:	a5 5a       	subi	r26, 0xA5	; 165
    452a:	bb 4f       	sbci	r27, 0xFB	; 251
    452c:	05 58       	subi	r16, 0x85	; 133
    452e:	1b 4f       	sbci	r17, 0xFB	; 251
    4530:	e5 01       	movw	r28, r10
    4532:	49 91       	ld	r20, Y+
    4534:	50 e0       	ldi	r21, 0x00	; 0
    4536:	fd 01       	movw	r30, r26
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	ca 01       	movw	r24, r20
    453e:	02 2e       	mov	r0, r18
    4540:	02 c0       	rjmp	.+4      	; 0x4546 <_ZN6Batary19printlvltoOLEDbuferEv+0x98>
    4542:	88 0f       	add	r24, r24
    4544:	99 1f       	adc	r25, r25
    4546:	0a 94       	dec	r0
    4548:	e2 f7       	brpl	.-8      	; 0x4542 <_ZN6Batary19printlvltoOLEDbuferEv+0x94>
    454a:	80 78       	andi	r24, 0x80	; 128
    454c:	99 27       	eor	r25, r25
    454e:	06 2e       	mov	r0, r22
    4550:	02 c0       	rjmp	.+4      	; 0x4556 <_ZN6Batary19printlvltoOLEDbuferEv+0xa8>
    4552:	95 95       	asr	r25
    4554:	87 95       	ror	r24
    4556:	0a 94       	dec	r0
    4558:	e2 f7       	brpl	.-8      	; 0x4552 <_ZN6Batary19printlvltoOLEDbuferEv+0xa4>
    455a:	90 81       	ld	r25, Z
    455c:	89 2b       	or	r24, r25
    455e:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4560:	2f 5f       	subi	r18, 0xFF	; 255
    4562:	3f 4f       	sbci	r19, 0xFF	; 255
    4564:	28 30       	cpi	r18, 0x08	; 8
    4566:	31 05       	cpc	r19, r1
    4568:	49 f7       	brne	.-46     	; 0x453c <_ZN6Batary19printlvltoOLEDbuferEv+0x8e>
    456a:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    456c:	a0 17       	cp	r26, r16
    456e:	b1 07       	cpc	r27, r17
    4570:	01 f7       	brne	.-64     	; 0x4532 <_ZN6Batary19printlvltoOLEDbuferEv+0x84>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4572:	ff ef       	ldi	r31, 0xFF	; 255
    4574:	ef 1a       	sub	r14, r31
    4576:	ff 0a       	sbc	r15, r31
    4578:	84 e0       	ldi	r24, 0x04	; 4
    457a:	a8 0e       	add	r10, r24
    457c:	b1 1c       	adc	r11, r1
    457e:	e8 e0       	ldi	r30, 0x08	; 8
    4580:	ee 16       	cp	r14, r30
    4582:	f1 04       	cpc	r15, r1
    4584:	09 f0       	breq	.+2      	; 0x4588 <_ZN6Batary19printlvltoOLEDbuferEv+0xda>
    4586:	b3 cf       	rjmp	.-154    	; 0x44ee <_ZN6Batary19printlvltoOLEDbuferEv+0x40>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
    4588:	f4 01       	movw	r30, r8
    458a:	80 81       	ld	r24, Z
    458c:	91 81       	ldd	r25, Z+1	; 0x01
    458e:	81 30       	cpi	r24, 0x01	; 1
    4590:	91 05       	cpc	r25, r1
    4592:	09 f0       	breq	.+2      	; 0x4596 <_ZN6Batary19printlvltoOLEDbuferEv+0xe8>
    4594:	81 c1       	rjmp	.+770    	; 0x4898 <_ZN6Batary19printlvltoOLEDbuferEv+0x3ea>
    4596:	0f 2e       	mov	r0, r31
    4598:	f0 e7       	ldi	r31, 0x70	; 112
    459a:	af 2e       	mov	r10, r31
    459c:	f1 e0       	ldi	r31, 0x01	; 1
    459e:	bf 2e       	mov	r11, r31
    45a0:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    45a2:	e1 2c       	mov	r14, r1
    45a4:	f1 2c       	mov	r15, r1
    45a6:	0f 2e       	mov	r0, r31
    45a8:	f7 e0       	ldi	r31, 0x07	; 7
    45aa:	cf 2e       	mov	r12, r31
    45ac:	d1 2c       	mov	r13, r1
    45ae:	f0 2d       	mov	r31, r0
    45b0:	c7 01       	movw	r24, r14
    45b2:	87 70       	andi	r24, 0x07	; 7
    45b4:	90 78       	andi	r25, 0x80	; 128
    45b6:	99 23       	and	r25, r25
    45b8:	24 f4       	brge	.+8      	; 0x45c2 <_ZN6Batary19printlvltoOLEDbuferEv+0x114>
    45ba:	01 97       	sbiw	r24, 0x01	; 1
    45bc:	88 6f       	ori	r24, 0xF8	; 248
    45be:	9f 6f       	ori	r25, 0xFF	; 255
    45c0:	01 96       	adiw	r24, 0x01	; 1
    45c2:	b6 01       	movw	r22, r12
    45c4:	68 1b       	sub	r22, r24
    45c6:	79 0b       	sbc	r23, r25
    45c8:	87 01       	movw	r16, r14
    45ca:	ff 20       	and	r15, r15
    45cc:	14 f4       	brge	.+4      	; 0x45d2 <_ZN6Batary19printlvltoOLEDbuferEv+0x124>
    45ce:	09 5f       	subi	r16, 0xF9	; 249
    45d0:	1f 4f       	sbci	r17, 0xFF	; 255
    45d2:	15 95       	asr	r17
    45d4:	07 95       	ror	r16
    45d6:	15 95       	asr	r17
    45d8:	07 95       	ror	r16
    45da:	15 95       	asr	r17
    45dc:	07 95       	ror	r16
    45de:	16 95       	lsr	r17
    45e0:	10 2f       	mov	r17, r16
    45e2:	00 27       	eor	r16, r16
    45e4:	17 95       	ror	r17
    45e6:	07 95       	ror	r16
    45e8:	d8 01       	movw	r26, r16
    45ea:	a5 5a       	subi	r26, 0xA5	; 165
    45ec:	bb 4f       	sbci	r27, 0xFB	; 251
    45ee:	05 58       	subi	r16, 0x85	; 133
    45f0:	1b 4f       	sbci	r17, 0xFB	; 251
    45f2:	e5 01       	movw	r28, r10
    45f4:	49 91       	ld	r20, Y+
    45f6:	50 e0       	ldi	r21, 0x00	; 0
    45f8:	fd 01       	movw	r30, r26
    45fa:	20 e0       	ldi	r18, 0x00	; 0
    45fc:	30 e0       	ldi	r19, 0x00	; 0
    45fe:	ca 01       	movw	r24, r20
    4600:	02 2e       	mov	r0, r18
    4602:	02 c0       	rjmp	.+4      	; 0x4608 <_ZN6Batary19printlvltoOLEDbuferEv+0x15a>
    4604:	88 0f       	add	r24, r24
    4606:	99 1f       	adc	r25, r25
    4608:	0a 94       	dec	r0
    460a:	e2 f7       	brpl	.-8      	; 0x4604 <_ZN6Batary19printlvltoOLEDbuferEv+0x156>
    460c:	80 78       	andi	r24, 0x80	; 128
    460e:	99 27       	eor	r25, r25
    4610:	06 2e       	mov	r0, r22
    4612:	02 c0       	rjmp	.+4      	; 0x4618 <_ZN6Batary19printlvltoOLEDbuferEv+0x16a>
    4614:	95 95       	asr	r25
    4616:	87 95       	ror	r24
    4618:	0a 94       	dec	r0
    461a:	e2 f7       	brpl	.-8      	; 0x4614 <_ZN6Batary19printlvltoOLEDbuferEv+0x166>
    461c:	90 81       	ld	r25, Z
    461e:	89 2b       	or	r24, r25
    4620:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4622:	2f 5f       	subi	r18, 0xFF	; 255
    4624:	3f 4f       	sbci	r19, 0xFF	; 255
    4626:	28 30       	cpi	r18, 0x08	; 8
    4628:	31 05       	cpc	r19, r1
    462a:	49 f7       	brne	.-46     	; 0x45fe <_ZN6Batary19printlvltoOLEDbuferEv+0x150>
    462c:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    462e:	a0 17       	cp	r26, r16
    4630:	b1 07       	cpc	r27, r17
    4632:	01 f7       	brne	.-64     	; 0x45f4 <_ZN6Batary19printlvltoOLEDbuferEv+0x146>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4634:	ff ef       	ldi	r31, 0xFF	; 255
    4636:	ef 1a       	sub	r14, r31
    4638:	ff 0a       	sbc	r15, r31
    463a:	84 e0       	ldi	r24, 0x04	; 4
    463c:	a8 0e       	add	r10, r24
    463e:	b1 1c       	adc	r11, r1
    4640:	e8 e0       	ldi	r30, 0x08	; 8
    4642:	ee 16       	cp	r14, r30
    4644:	f1 04       	cpc	r15, r1
    4646:	09 f0       	breq	.+2      	; 0x464a <_ZN6Batary19printlvltoOLEDbuferEv+0x19c>
    4648:	b3 cf       	rjmp	.-154    	; 0x45b0 <_ZN6Batary19printlvltoOLEDbuferEv+0x102>

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
    464a:	f4 01       	movw	r30, r8
    464c:	80 81       	ld	r24, Z
    464e:	91 81       	ldd	r25, Z+1	; 0x01
    4650:	82 30       	cpi	r24, 0x02	; 2
    4652:	91 05       	cpc	r25, r1
    4654:	09 f0       	breq	.+2      	; 0x4658 <_ZN6Batary19printlvltoOLEDbuferEv+0x1aa>
    4656:	24 c1       	rjmp	.+584    	; 0x48a0 <_ZN6Batary19printlvltoOLEDbuferEv+0x3f2>
    4658:	0f 2e       	mov	r0, r31
    465a:	f0 e5       	ldi	r31, 0x50	; 80
    465c:	af 2e       	mov	r10, r31
    465e:	f1 e0       	ldi	r31, 0x01	; 1
    4660:	bf 2e       	mov	r11, r31
    4662:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4664:	e1 2c       	mov	r14, r1
    4666:	f1 2c       	mov	r15, r1
    4668:	0f 2e       	mov	r0, r31
    466a:	f7 e0       	ldi	r31, 0x07	; 7
    466c:	cf 2e       	mov	r12, r31
    466e:	d1 2c       	mov	r13, r1
    4670:	f0 2d       	mov	r31, r0
    4672:	c7 01       	movw	r24, r14
    4674:	87 70       	andi	r24, 0x07	; 7
    4676:	90 78       	andi	r25, 0x80	; 128
    4678:	99 23       	and	r25, r25
    467a:	24 f4       	brge	.+8      	; 0x4684 <_ZN6Batary19printlvltoOLEDbuferEv+0x1d6>
    467c:	01 97       	sbiw	r24, 0x01	; 1
    467e:	88 6f       	ori	r24, 0xF8	; 248
    4680:	9f 6f       	ori	r25, 0xFF	; 255
    4682:	01 96       	adiw	r24, 0x01	; 1
    4684:	b6 01       	movw	r22, r12
    4686:	68 1b       	sub	r22, r24
    4688:	79 0b       	sbc	r23, r25
    468a:	87 01       	movw	r16, r14
    468c:	ff 20       	and	r15, r15
    468e:	14 f4       	brge	.+4      	; 0x4694 <_ZN6Batary19printlvltoOLEDbuferEv+0x1e6>
    4690:	09 5f       	subi	r16, 0xF9	; 249
    4692:	1f 4f       	sbci	r17, 0xFF	; 255
    4694:	15 95       	asr	r17
    4696:	07 95       	ror	r16
    4698:	15 95       	asr	r17
    469a:	07 95       	ror	r16
    469c:	15 95       	asr	r17
    469e:	07 95       	ror	r16
    46a0:	16 95       	lsr	r17
    46a2:	10 2f       	mov	r17, r16
    46a4:	00 27       	eor	r16, r16
    46a6:	17 95       	ror	r17
    46a8:	07 95       	ror	r16
    46aa:	d8 01       	movw	r26, r16
    46ac:	a5 5a       	subi	r26, 0xA5	; 165
    46ae:	bb 4f       	sbci	r27, 0xFB	; 251
    46b0:	05 58       	subi	r16, 0x85	; 133
    46b2:	1b 4f       	sbci	r17, 0xFB	; 251
    46b4:	e5 01       	movw	r28, r10
    46b6:	49 91       	ld	r20, Y+
    46b8:	50 e0       	ldi	r21, 0x00	; 0
    46ba:	fd 01       	movw	r30, r26
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	ca 01       	movw	r24, r20
    46c2:	02 2e       	mov	r0, r18
    46c4:	02 c0       	rjmp	.+4      	; 0x46ca <_ZN6Batary19printlvltoOLEDbuferEv+0x21c>
    46c6:	88 0f       	add	r24, r24
    46c8:	99 1f       	adc	r25, r25
    46ca:	0a 94       	dec	r0
    46cc:	e2 f7       	brpl	.-8      	; 0x46c6 <_ZN6Batary19printlvltoOLEDbuferEv+0x218>
    46ce:	80 78       	andi	r24, 0x80	; 128
    46d0:	99 27       	eor	r25, r25
    46d2:	06 2e       	mov	r0, r22
    46d4:	02 c0       	rjmp	.+4      	; 0x46da <_ZN6Batary19printlvltoOLEDbuferEv+0x22c>
    46d6:	95 95       	asr	r25
    46d8:	87 95       	ror	r24
    46da:	0a 94       	dec	r0
    46dc:	e2 f7       	brpl	.-8      	; 0x46d6 <_ZN6Batary19printlvltoOLEDbuferEv+0x228>
    46de:	90 81       	ld	r25, Z
    46e0:	89 2b       	or	r24, r25
    46e2:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    46e4:	2f 5f       	subi	r18, 0xFF	; 255
    46e6:	3f 4f       	sbci	r19, 0xFF	; 255
    46e8:	28 30       	cpi	r18, 0x08	; 8
    46ea:	31 05       	cpc	r19, r1
    46ec:	49 f7       	brne	.-46     	; 0x46c0 <_ZN6Batary19printlvltoOLEDbuferEv+0x212>
    46ee:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    46f0:	a0 17       	cp	r26, r16
    46f2:	b1 07       	cpc	r27, r17
    46f4:	01 f7       	brne	.-64     	; 0x46b6 <_ZN6Batary19printlvltoOLEDbuferEv+0x208>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    46f6:	ff ef       	ldi	r31, 0xFF	; 255
    46f8:	ef 1a       	sub	r14, r31
    46fa:	ff 0a       	sbc	r15, r31
    46fc:	84 e0       	ldi	r24, 0x04	; 4
    46fe:	a8 0e       	add	r10, r24
    4700:	b1 1c       	adc	r11, r1
    4702:	e8 e0       	ldi	r30, 0x08	; 8
    4704:	ee 16       	cp	r14, r30
    4706:	f1 04       	cpc	r15, r1
    4708:	09 f0       	breq	.+2      	; 0x470c <_ZN6Batary19printlvltoOLEDbuferEv+0x25e>
    470a:	b3 cf       	rjmp	.-154    	; 0x4672 <_ZN6Batary19printlvltoOLEDbuferEv+0x1c4>
void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
    470c:	f4 01       	movw	r30, r8
    470e:	80 81       	ld	r24, Z
    4710:	91 81       	ldd	r25, Z+1	; 0x01
    4712:	83 30       	cpi	r24, 0x03	; 3
    4714:	91 05       	cpc	r25, r1
    4716:	09 f0       	breq	.+2      	; 0x471a <_ZN6Batary19printlvltoOLEDbuferEv+0x26c>
    4718:	c7 c0       	rjmp	.+398    	; 0x48a8 <_ZN6Batary19printlvltoOLEDbuferEv+0x3fa>
    471a:	0f 2e       	mov	r0, r31
    471c:	f0 e3       	ldi	r31, 0x30	; 48
    471e:	af 2e       	mov	r10, r31
    4720:	f1 e0       	ldi	r31, 0x01	; 1
    4722:	bf 2e       	mov	r11, r31
    4724:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4726:	e1 2c       	mov	r14, r1
    4728:	f1 2c       	mov	r15, r1
    472a:	0f 2e       	mov	r0, r31
    472c:	f7 e0       	ldi	r31, 0x07	; 7
    472e:	cf 2e       	mov	r12, r31
    4730:	d1 2c       	mov	r13, r1
    4732:	f0 2d       	mov	r31, r0
    4734:	c7 01       	movw	r24, r14
    4736:	87 70       	andi	r24, 0x07	; 7
    4738:	90 78       	andi	r25, 0x80	; 128
    473a:	99 23       	and	r25, r25
    473c:	24 f4       	brge	.+8      	; 0x4746 <_ZN6Batary19printlvltoOLEDbuferEv+0x298>
    473e:	01 97       	sbiw	r24, 0x01	; 1
    4740:	88 6f       	ori	r24, 0xF8	; 248
    4742:	9f 6f       	ori	r25, 0xFF	; 255
    4744:	01 96       	adiw	r24, 0x01	; 1
    4746:	b6 01       	movw	r22, r12
    4748:	68 1b       	sub	r22, r24
    474a:	79 0b       	sbc	r23, r25
    474c:	87 01       	movw	r16, r14
    474e:	ff 20       	and	r15, r15
    4750:	14 f4       	brge	.+4      	; 0x4756 <_ZN6Batary19printlvltoOLEDbuferEv+0x2a8>
    4752:	09 5f       	subi	r16, 0xF9	; 249
    4754:	1f 4f       	sbci	r17, 0xFF	; 255
    4756:	15 95       	asr	r17
    4758:	07 95       	ror	r16
    475a:	15 95       	asr	r17
    475c:	07 95       	ror	r16
    475e:	15 95       	asr	r17
    4760:	07 95       	ror	r16
    4762:	16 95       	lsr	r17
    4764:	10 2f       	mov	r17, r16
    4766:	00 27       	eor	r16, r16
    4768:	17 95       	ror	r17
    476a:	07 95       	ror	r16
    476c:	d8 01       	movw	r26, r16
    476e:	a5 5a       	subi	r26, 0xA5	; 165
    4770:	bb 4f       	sbci	r27, 0xFB	; 251
    4772:	05 58       	subi	r16, 0x85	; 133
    4774:	1b 4f       	sbci	r17, 0xFB	; 251
    4776:	e5 01       	movw	r28, r10
    4778:	49 91       	ld	r20, Y+
    477a:	50 e0       	ldi	r21, 0x00	; 0
    477c:	fd 01       	movw	r30, r26
    477e:	20 e0       	ldi	r18, 0x00	; 0
    4780:	30 e0       	ldi	r19, 0x00	; 0
    4782:	ca 01       	movw	r24, r20
    4784:	02 2e       	mov	r0, r18
    4786:	02 c0       	rjmp	.+4      	; 0x478c <_ZN6Batary19printlvltoOLEDbuferEv+0x2de>
    4788:	88 0f       	add	r24, r24
    478a:	99 1f       	adc	r25, r25
    478c:	0a 94       	dec	r0
    478e:	e2 f7       	brpl	.-8      	; 0x4788 <_ZN6Batary19printlvltoOLEDbuferEv+0x2da>
    4790:	80 78       	andi	r24, 0x80	; 128
    4792:	99 27       	eor	r25, r25
    4794:	06 2e       	mov	r0, r22
    4796:	02 c0       	rjmp	.+4      	; 0x479c <_ZN6Batary19printlvltoOLEDbuferEv+0x2ee>
    4798:	95 95       	asr	r25
    479a:	87 95       	ror	r24
    479c:	0a 94       	dec	r0
    479e:	e2 f7       	brpl	.-8      	; 0x4798 <_ZN6Batary19printlvltoOLEDbuferEv+0x2ea>
    47a0:	90 81       	ld	r25, Z
    47a2:	89 2b       	or	r24, r25
    47a4:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    47a6:	2f 5f       	subi	r18, 0xFF	; 255
    47a8:	3f 4f       	sbci	r19, 0xFF	; 255
    47aa:	28 30       	cpi	r18, 0x08	; 8
    47ac:	31 05       	cpc	r19, r1
    47ae:	49 f7       	brne	.-46     	; 0x4782 <_ZN6Batary19printlvltoOLEDbuferEv+0x2d4>
    47b0:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    47b2:	0a 17       	cp	r16, r26
    47b4:	1b 07       	cpc	r17, r27
    47b6:	01 f7       	brne	.-64     	; 0x4778 <_ZN6Batary19printlvltoOLEDbuferEv+0x2ca>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    47b8:	ff ef       	ldi	r31, 0xFF	; 255
    47ba:	ef 1a       	sub	r14, r31
    47bc:	ff 0a       	sbc	r15, r31
    47be:	84 e0       	ldi	r24, 0x04	; 4
    47c0:	a8 0e       	add	r10, r24
    47c2:	b1 1c       	adc	r11, r1
    47c4:	e8 e0       	ldi	r30, 0x08	; 8
    47c6:	ee 16       	cp	r14, r30
    47c8:	f1 04       	cpc	r15, r1
    47ca:	09 f0       	breq	.+2      	; 0x47ce <_ZN6Batary19printlvltoOLEDbuferEv+0x320>
    47cc:	b3 cf       	rjmp	.-154    	; 0x4734 <_ZN6Batary19printlvltoOLEDbuferEv+0x286>
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
    47ce:	f4 01       	movw	r30, r8
    47d0:	80 81       	ld	r24, Z
    47d2:	91 81       	ldd	r25, Z+1	; 0x01
    47d4:	04 97       	sbiw	r24, 0x04	; 4
    47d6:	09 f0       	breq	.+2      	; 0x47da <_ZN6Batary19printlvltoOLEDbuferEv+0x32c>
    47d8:	6a c0       	rjmp	.+212    	; 0x48ae <_ZN6Batary19printlvltoOLEDbuferEv+0x400>
    47da:	0f 2e       	mov	r0, r31
    47dc:	f0 e1       	ldi	r31, 0x10	; 16
    47de:	af 2e       	mov	r10, r31
    47e0:	f1 e0       	ldi	r31, 0x01	; 1
    47e2:	bf 2e       	mov	r11, r31
    47e4:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    47e6:	e1 2c       	mov	r14, r1
    47e8:	f1 2c       	mov	r15, r1
    47ea:	0f 2e       	mov	r0, r31
    47ec:	f7 e0       	ldi	r31, 0x07	; 7
    47ee:	cf 2e       	mov	r12, r31
    47f0:	d1 2c       	mov	r13, r1
    47f2:	f0 2d       	mov	r31, r0
    47f4:	c7 01       	movw	r24, r14
    47f6:	87 70       	andi	r24, 0x07	; 7
    47f8:	90 78       	andi	r25, 0x80	; 128
    47fa:	99 23       	and	r25, r25
    47fc:	24 f4       	brge	.+8      	; 0x4806 <_ZN6Batary19printlvltoOLEDbuferEv+0x358>
    47fe:	01 97       	sbiw	r24, 0x01	; 1
    4800:	88 6f       	ori	r24, 0xF8	; 248
    4802:	9f 6f       	ori	r25, 0xFF	; 255
    4804:	01 96       	adiw	r24, 0x01	; 1
    4806:	b6 01       	movw	r22, r12
    4808:	68 1b       	sub	r22, r24
    480a:	79 0b       	sbc	r23, r25
    480c:	87 01       	movw	r16, r14
    480e:	ff 20       	and	r15, r15
    4810:	14 f4       	brge	.+4      	; 0x4816 <_ZN6Batary19printlvltoOLEDbuferEv+0x368>
    4812:	09 5f       	subi	r16, 0xF9	; 249
    4814:	1f 4f       	sbci	r17, 0xFF	; 255
    4816:	15 95       	asr	r17
    4818:	07 95       	ror	r16
    481a:	15 95       	asr	r17
    481c:	07 95       	ror	r16
    481e:	15 95       	asr	r17
    4820:	07 95       	ror	r16
    4822:	16 95       	lsr	r17
    4824:	10 2f       	mov	r17, r16
    4826:	00 27       	eor	r16, r16
    4828:	17 95       	ror	r17
    482a:	07 95       	ror	r16
    482c:	d8 01       	movw	r26, r16
    482e:	a5 5a       	subi	r26, 0xA5	; 165
    4830:	bb 4f       	sbci	r27, 0xFB	; 251
    4832:	05 58       	subi	r16, 0x85	; 133
    4834:	1b 4f       	sbci	r17, 0xFB	; 251
    4836:	e5 01       	movw	r28, r10
    4838:	49 91       	ld	r20, Y+
    483a:	50 e0       	ldi	r21, 0x00	; 0
    483c:	fd 01       	movw	r30, r26
    483e:	20 e0       	ldi	r18, 0x00	; 0
    4840:	30 e0       	ldi	r19, 0x00	; 0
    4842:	ca 01       	movw	r24, r20
    4844:	02 2e       	mov	r0, r18
    4846:	02 c0       	rjmp	.+4      	; 0x484c <_ZN6Batary19printlvltoOLEDbuferEv+0x39e>
    4848:	88 0f       	add	r24, r24
    484a:	99 1f       	adc	r25, r25
    484c:	0a 94       	dec	r0
    484e:	e2 f7       	brpl	.-8      	; 0x4848 <_ZN6Batary19printlvltoOLEDbuferEv+0x39a>
    4850:	80 78       	andi	r24, 0x80	; 128
    4852:	99 27       	eor	r25, r25
    4854:	06 2e       	mov	r0, r22
    4856:	02 c0       	rjmp	.+4      	; 0x485c <_ZN6Batary19printlvltoOLEDbuferEv+0x3ae>
    4858:	95 95       	asr	r25
    485a:	87 95       	ror	r24
    485c:	0a 94       	dec	r0
    485e:	e2 f7       	brpl	.-8      	; 0x4858 <_ZN6Batary19printlvltoOLEDbuferEv+0x3aa>
    4860:	90 81       	ld	r25, Z
    4862:	89 2b       	or	r24, r25
    4864:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4866:	2f 5f       	subi	r18, 0xFF	; 255
    4868:	3f 4f       	sbci	r19, 0xFF	; 255
    486a:	28 30       	cpi	r18, 0x08	; 8
    486c:	31 05       	cpc	r19, r1
    486e:	49 f7       	brne	.-46     	; 0x4842 <_ZN6Batary19printlvltoOLEDbuferEv+0x394>
    4870:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    4872:	a0 17       	cp	r26, r16
    4874:	b1 07       	cpc	r27, r17
    4876:	01 f7       	brne	.-64     	; 0x4838 <_ZN6Batary19printlvltoOLEDbuferEv+0x38a>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4878:	ff ef       	ldi	r31, 0xFF	; 255
    487a:	ef 1a       	sub	r14, r31
    487c:	ff 0a       	sbc	r15, r31
    487e:	84 e0       	ldi	r24, 0x04	; 4
    4880:	a8 0e       	add	r10, r24
    4882:	b1 1c       	adc	r11, r1
    4884:	e8 e0       	ldi	r30, 0x08	; 8
    4886:	ee 16       	cp	r14, r30
    4888:	f1 04       	cpc	r15, r1
    488a:	09 f0       	breq	.+2      	; 0x488e <_ZN6Batary19printlvltoOLEDbuferEv+0x3e0>
    488c:	b3 cf       	rjmp	.-154    	; 0x47f4 <_ZN6Batary19printlvltoOLEDbuferEv+0x346>
    488e:	0f c0       	rjmp	.+30     	; 0x48ae <_ZN6Batary19printlvltoOLEDbuferEv+0x400>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
    4890:	01 97       	sbiw	r24, 0x01	; 1
    4892:	09 f0       	breq	.+2      	; 0x4896 <_ZN6Batary19printlvltoOLEDbuferEv+0x3e8>
    4894:	da ce       	rjmp	.-588    	; 0x464a <_ZN6Batary19printlvltoOLEDbuferEv+0x19c>
    4896:	7f ce       	rjmp	.-770    	; 0x4596 <_ZN6Batary19printlvltoOLEDbuferEv+0xe8>
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
    4898:	02 97       	sbiw	r24, 0x02	; 2
    489a:	09 f0       	breq	.+2      	; 0x489e <_ZN6Batary19printlvltoOLEDbuferEv+0x3f0>
    489c:	37 cf       	rjmp	.-402    	; 0x470c <_ZN6Batary19printlvltoOLEDbuferEv+0x25e>
    489e:	dc ce       	rjmp	.-584    	; 0x4658 <_ZN6Batary19printlvltoOLEDbuferEv+0x1aa>
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
    48a0:	03 97       	sbiw	r24, 0x03	; 3
    48a2:	09 f0       	breq	.+2      	; 0x48a6 <_ZN6Batary19printlvltoOLEDbuferEv+0x3f8>
    48a4:	94 cf       	rjmp	.-216    	; 0x47ce <_ZN6Batary19printlvltoOLEDbuferEv+0x320>
    48a6:	39 cf       	rjmp	.-398    	; 0x471a <_ZN6Batary19printlvltoOLEDbuferEv+0x26c>
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
    48a8:	04 97       	sbiw	r24, 0x04	; 4
    48aa:	09 f4       	brne	.+2      	; 0x48ae <_ZN6Batary19printlvltoOLEDbuferEv+0x400>
    48ac:	96 cf       	rjmp	.-212    	; 0x47da <_ZN6Batary19printlvltoOLEDbuferEv+0x32c>
}
    48ae:	df 91       	pop	r29
    48b0:	cf 91       	pop	r28
    48b2:	1f 91       	pop	r17
    48b4:	0f 91       	pop	r16
    48b6:	ff 90       	pop	r15
    48b8:	ef 90       	pop	r14
    48ba:	df 90       	pop	r13
    48bc:	cf 90       	pop	r12
    48be:	bf 90       	pop	r11
    48c0:	af 90       	pop	r10
    48c2:	9f 90       	pop	r9
    48c4:	8f 90       	pop	r8
    48c6:	08 95       	ret

000048c8 <main>:
};

Batary batary;


int main(void){
    48c8:	cf 93       	push	r28
    48ca:	df 93       	push	r29
    48cc:	00 d0       	rcall	.+0      	; 0x48ce <main+0x6>
    48ce:	cd b7       	in	r28, 0x3d	; 61
    48d0:	de b7       	in	r29, 0x3e	; 62
    48d2:	0f 2e       	mov	r0, r31
    48d4:	fb ef       	ldi	r31, 0xFB	; 251
    48d6:	6f 2e       	mov	r6, r31
    48d8:	f7 e0       	ldi	r31, 0x07	; 7
    48da:	7f 2e       	mov	r7, r31
    48dc:	f0 2d       	mov	r31, r0
    48de:	eb ef       	ldi	r30, 0xFB	; 251
    48e0:	f3 e0       	ldi	r31, 0x03	; 3
}


void OLED_Data(int data)
{
	TWDR=data;							
    48e2:	4b eb       	ldi	r20, 0xBB	; 187
    48e4:	50 e0       	ldi	r21, 0x00	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);				
    48e6:	2c eb       	ldi	r18, 0xBC	; 188
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	84 e8       	ldi	r24, 0x84	; 132

void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
			OLED_Data(oled_bufer[i]);
    48ec:	91 91       	ld	r25, Z+
}


void OLED_Data(int data)
{
	TWDR=data;							
    48ee:	da 01       	movw	r26, r20
    48f0:	9c 93       	st	X, r25
	TWCR=(1<<TWINT)|(1<<TWEN);				
    48f2:	d9 01       	movw	r26, r18
    48f4:	8c 93       	st	X, r24
	while(!(TWCR & (1<<TWINT))){};
    48f6:	d9 01       	movw	r26, r18
    48f8:	9c 91       	ld	r25, X
    48fa:	99 23       	and	r25, r25
    48fc:	e4 f7       	brge	.-8      	; 0x48f6 <main+0x2e>
}


void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
    48fe:	6e 16       	cp	r6, r30
    4900:	7f 06       	cpc	r7, r31
    4902:	a1 f7       	brne	.-24     	; 0x48ec <main+0x24>
		//oled.OLED_Clear_Bufer_part(0,0,1,8);
		//oled.OLED_Write_To_Bufer(2,2,1,8,arrow);
		oled.OLED_Write_Bufer();
		//Interupts

	DDRA = 0x00;
    4904:	11 b8       	out	0x01, r1	; 1
		PORTA=0x00;
    4906:	12 b8       	out	0x02, r1	; 2
		PCMSK0=0b00111100;
    4908:	8c e3       	ldi	r24, 0x3C	; 60
    490a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
		PCICR|=0b00000001;
    490e:	e8 e6       	ldi	r30, 0x68	; 104
    4910:	f0 e0       	ldi	r31, 0x00	; 0
    4912:	80 81       	ld	r24, Z
    4914:	81 60       	ori	r24, 0x01	; 1
    4916:	80 83       	st	Z, r24
		sei();
    4918:	78 94       	sei
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    491a:	0f 2e       	mov	r0, r31
    491c:	f7 e0       	ldi	r31, 0x07	; 7
    491e:	2f 2e       	mov	r2, r31
    4920:	31 2c       	mov	r3, r1
    4922:	f0 2d       	mov	r31, r0
}


void OLED_Data(int data)
{
	TWDR=data;							
    4924:	0f 2e       	mov	r0, r31
    4926:	fb eb       	ldi	r31, 0xBB	; 187
    4928:	4f 2e       	mov	r4, r31
    492a:	51 2c       	mov	r5, r1
    492c:	f0 2d       	mov	r31, r0
	TWCR=(1<<TWINT)|(1<<TWEN);				
    492e:	0f 2e       	mov	r0, r31
    4930:	f4 e8       	ldi	r31, 0x84	; 132
    4932:	9f 2e       	mov	r9, r31
    4934:	f0 2d       	mov	r31, r0
}

void refreshlvl()
{
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
    4936:	83 b1       	in	r24, 0x03	; 3
	printlvltoOLEDbufer();
}

void refreshlvl()
{
	int kf=0;
    4938:	81 70       	andi	r24, 0x01	; 1
    493a:	89 83       	std	Y+1, r24	; 0x01
    493c:	1a 82       	std	Y+2, r1	; 0x02
    493e:	89 81       	ldd	r24, Y+1	; 0x01
    4940:	9a 81       	ldd	r25, Y+2	; 0x02
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
    4942:	19 99       	sbic	0x03, 1	; 3
    4944:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>2)&0b00000001==1) kf++;
    4946:	1a 99       	sbic	0x03, 2	; 3
    4948:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>3)&0b00000001==1) kf++;
    494a:	1b 9b       	sbis	0x03, 3	; 3
    494c:	57 c2       	rjmp	.+1198   	; 0x4dfc <main+0x534>
    494e:	01 96       	adiw	r24, 0x01	; 1
	curlvl=kf;
    4950:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <__data_end+0x1>
    4954:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <__data_end>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
    4958:	00 97       	sbiw	r24, 0x00	; 0
    495a:	09 f0       	breq	.+2      	; 0x495e <main+0x96>
    495c:	57 c2       	rjmp	.+1198   	; 0x4e0c <main+0x544>
    495e:	0f 2e       	mov	r0, r31
    4960:	f0 e9       	ldi	r31, 0x90	; 144
    4962:	af 2e       	mov	r10, r31
    4964:	f1 e0       	ldi	r31, 0x01	; 1
    4966:	bf 2e       	mov	r11, r31
    4968:	f0 2d       	mov	r31, r0
};

Batary batary;


int main(void){
    496a:	c1 2c       	mov	r12, r1
    496c:	d1 2c       	mov	r13, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    496e:	c6 01       	movw	r24, r12
    4970:	87 70       	andi	r24, 0x07	; 7
    4972:	90 78       	andi	r25, 0x80	; 128
    4974:	99 23       	and	r25, r25
    4976:	24 f4       	brge	.+8      	; 0x4980 <main+0xb8>
    4978:	01 97       	sbiw	r24, 0x01	; 1
    497a:	88 6f       	ori	r24, 0xF8	; 248
    497c:	9f 6f       	ori	r25, 0xFF	; 255
    497e:	01 96       	adiw	r24, 0x01	; 1
    4980:	b1 01       	movw	r22, r2
    4982:	68 1b       	sub	r22, r24
    4984:	79 0b       	sbc	r23, r25
    4986:	c6 01       	movw	r24, r12
    4988:	dd 20       	and	r13, r13
    498a:	0c f4       	brge	.+2      	; 0x498e <main+0xc6>
    498c:	07 96       	adiw	r24, 0x07	; 7
    498e:	95 95       	asr	r25
    4990:	87 95       	ror	r24
    4992:	95 95       	asr	r25
    4994:	87 95       	ror	r24
    4996:	95 95       	asr	r25
    4998:	87 95       	ror	r24
    499a:	96 95       	lsr	r25
    499c:	98 2f       	mov	r25, r24
    499e:	88 27       	eor	r24, r24
    49a0:	97 95       	ror	r25
    49a2:	87 95       	ror	r24
    49a4:	dc 01       	movw	r26, r24
    49a6:	a5 5a       	subi	r26, 0xA5	; 165
    49a8:	bb 4f       	sbci	r27, 0xFB	; 251
    49aa:	fc 01       	movw	r30, r24
    49ac:	e5 58       	subi	r30, 0x85	; 133
    49ae:	fb 4f       	sbci	r31, 0xFB	; 251
    49b0:	7f 01       	movw	r14, r30
    49b2:	85 01       	movw	r16, r10
    49b4:	f8 01       	movw	r30, r16
    49b6:	41 91       	ld	r20, Z+
    49b8:	8f 01       	movw	r16, r30
    49ba:	50 e0       	ldi	r21, 0x00	; 0
    49bc:	fd 01       	movw	r30, r26
    49be:	20 e0       	ldi	r18, 0x00	; 0
    49c0:	30 e0       	ldi	r19, 0x00	; 0
    49c2:	ca 01       	movw	r24, r20
    49c4:	02 2e       	mov	r0, r18
    49c6:	02 c0       	rjmp	.+4      	; 0x49cc <main+0x104>
    49c8:	88 0f       	add	r24, r24
    49ca:	99 1f       	adc	r25, r25
    49cc:	0a 94       	dec	r0
    49ce:	e2 f7       	brpl	.-8      	; 0x49c8 <main+0x100>
    49d0:	80 78       	andi	r24, 0x80	; 128
    49d2:	99 27       	eor	r25, r25
    49d4:	06 2e       	mov	r0, r22
    49d6:	02 c0       	rjmp	.+4      	; 0x49dc <main+0x114>
    49d8:	95 95       	asr	r25
    49da:	87 95       	ror	r24
    49dc:	0a 94       	dec	r0
    49de:	e2 f7       	brpl	.-8      	; 0x49d8 <main+0x110>
    49e0:	90 81       	ld	r25, Z
    49e2:	89 2b       	or	r24, r25
    49e4:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    49e6:	2f 5f       	subi	r18, 0xFF	; 255
    49e8:	3f 4f       	sbci	r19, 0xFF	; 255
    49ea:	28 30       	cpi	r18, 0x08	; 8
    49ec:	31 05       	cpc	r19, r1
    49ee:	49 f7       	brne	.-46     	; 0x49c2 <main+0xfa>
    49f0:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    49f2:	ea 16       	cp	r14, r26
    49f4:	fb 06       	cpc	r15, r27
    49f6:	f1 f6       	brne	.-68     	; 0x49b4 <main+0xec>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    49f8:	ff ef       	ldi	r31, 0xFF	; 255
    49fa:	cf 1a       	sub	r12, r31
    49fc:	df 0a       	sbc	r13, r31
    49fe:	24 e0       	ldi	r18, 0x04	; 4
    4a00:	a2 0e       	add	r10, r18
    4a02:	b1 1c       	adc	r11, r1
    4a04:	38 e0       	ldi	r19, 0x08	; 8
    4a06:	c3 16       	cp	r12, r19
    4a08:	d1 04       	cpc	r13, r1
    4a0a:	09 f0       	breq	.+2      	; 0x4a0e <main+0x146>
    4a0c:	b0 cf       	rjmp	.-160    	; 0x496e <main+0xa6>
    4a0e:	17 c1       	rjmp	.+558    	; 0x4c3e <main+0x376>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
    4a10:	81 30       	cpi	r24, 0x01	; 1
    4a12:	91 05       	cpc	r25, r1
    4a14:	09 f0       	breq	.+2      	; 0x4a18 <main+0x150>
    4a16:	ff c1       	rjmp	.+1022   	; 0x4e16 <main+0x54e>
    4a18:	0f 2e       	mov	r0, r31
    4a1a:	f0 e7       	ldi	r31, 0x70	; 112
    4a1c:	af 2e       	mov	r10, r31
    4a1e:	f1 e0       	ldi	r31, 0x01	; 1
    4a20:	bf 2e       	mov	r11, r31
    4a22:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4a24:	c1 2c       	mov	r12, r1
    4a26:	d1 2c       	mov	r13, r1
    4a28:	c6 01       	movw	r24, r12
    4a2a:	87 70       	andi	r24, 0x07	; 7
    4a2c:	90 78       	andi	r25, 0x80	; 128
    4a2e:	99 23       	and	r25, r25
    4a30:	24 f4       	brge	.+8      	; 0x4a3a <main+0x172>
    4a32:	01 97       	sbiw	r24, 0x01	; 1
    4a34:	88 6f       	ori	r24, 0xF8	; 248
    4a36:	9f 6f       	ori	r25, 0xFF	; 255
    4a38:	01 96       	adiw	r24, 0x01	; 1
    4a3a:	b1 01       	movw	r22, r2
    4a3c:	68 1b       	sub	r22, r24
    4a3e:	79 0b       	sbc	r23, r25
    4a40:	c6 01       	movw	r24, r12
    4a42:	dd 20       	and	r13, r13
    4a44:	0c f4       	brge	.+2      	; 0x4a48 <main+0x180>
    4a46:	07 96       	adiw	r24, 0x07	; 7
    4a48:	95 95       	asr	r25
    4a4a:	87 95       	ror	r24
    4a4c:	95 95       	asr	r25
    4a4e:	87 95       	ror	r24
    4a50:	95 95       	asr	r25
    4a52:	87 95       	ror	r24
    4a54:	96 95       	lsr	r25
    4a56:	98 2f       	mov	r25, r24
    4a58:	88 27       	eor	r24, r24
    4a5a:	97 95       	ror	r25
    4a5c:	87 95       	ror	r24
    4a5e:	dc 01       	movw	r26, r24
    4a60:	a5 5a       	subi	r26, 0xA5	; 165
    4a62:	bb 4f       	sbci	r27, 0xFB	; 251
    4a64:	fc 01       	movw	r30, r24
    4a66:	e5 58       	subi	r30, 0x85	; 133
    4a68:	fb 4f       	sbci	r31, 0xFB	; 251
    4a6a:	7f 01       	movw	r14, r30
    4a6c:	85 01       	movw	r16, r10
    4a6e:	f8 01       	movw	r30, r16
    4a70:	41 91       	ld	r20, Z+
    4a72:	8f 01       	movw	r16, r30
    4a74:	50 e0       	ldi	r21, 0x00	; 0
    4a76:	fd 01       	movw	r30, r26
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	ca 01       	movw	r24, r20
    4a7e:	02 2e       	mov	r0, r18
    4a80:	02 c0       	rjmp	.+4      	; 0x4a86 <main+0x1be>
    4a82:	88 0f       	add	r24, r24
    4a84:	99 1f       	adc	r25, r25
    4a86:	0a 94       	dec	r0
    4a88:	e2 f7       	brpl	.-8      	; 0x4a82 <main+0x1ba>
    4a8a:	80 78       	andi	r24, 0x80	; 128
    4a8c:	99 27       	eor	r25, r25
    4a8e:	06 2e       	mov	r0, r22
    4a90:	02 c0       	rjmp	.+4      	; 0x4a96 <main+0x1ce>
    4a92:	95 95       	asr	r25
    4a94:	87 95       	ror	r24
    4a96:	0a 94       	dec	r0
    4a98:	e2 f7       	brpl	.-8      	; 0x4a92 <main+0x1ca>
    4a9a:	90 81       	ld	r25, Z
    4a9c:	89 2b       	or	r24, r25
    4a9e:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4aa0:	2f 5f       	subi	r18, 0xFF	; 255
    4aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    4aa4:	28 30       	cpi	r18, 0x08	; 8
    4aa6:	31 05       	cpc	r19, r1
    4aa8:	49 f7       	brne	.-46     	; 0x4a7c <main+0x1b4>
    4aaa:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    4aac:	ae 15       	cp	r26, r14
    4aae:	bf 05       	cpc	r27, r15
    4ab0:	f1 f6       	brne	.-68     	; 0x4a6e <main+0x1a6>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4ab2:	ff ef       	ldi	r31, 0xFF	; 255
    4ab4:	cf 1a       	sub	r12, r31
    4ab6:	df 0a       	sbc	r13, r31
    4ab8:	24 e0       	ldi	r18, 0x04	; 4
    4aba:	a2 0e       	add	r10, r18
    4abc:	b1 1c       	adc	r11, r1
    4abe:	38 e0       	ldi	r19, 0x08	; 8
    4ac0:	c3 16       	cp	r12, r19
    4ac2:	d1 04       	cpc	r13, r1
    4ac4:	09 f0       	breq	.+2      	; 0x4ac8 <main+0x200>
    4ac6:	b0 cf       	rjmp	.-160    	; 0x4a28 <main+0x160>
    4ac8:	17 c1       	rjmp	.+558    	; 0x4cf8 <main+0x430>

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
    4aca:	82 30       	cpi	r24, 0x02	; 2
    4acc:	91 05       	cpc	r25, r1
    4ace:	09 f0       	breq	.+2      	; 0x4ad2 <main+0x20a>
    4ad0:	a7 c1       	rjmp	.+846    	; 0x4e20 <main+0x558>
    4ad2:	0f 2e       	mov	r0, r31
    4ad4:	f0 e5       	ldi	r31, 0x50	; 80
    4ad6:	af 2e       	mov	r10, r31
    4ad8:	f1 e0       	ldi	r31, 0x01	; 1
    4ada:	bf 2e       	mov	r11, r31
    4adc:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4ade:	c1 2c       	mov	r12, r1
    4ae0:	d1 2c       	mov	r13, r1
    4ae2:	c6 01       	movw	r24, r12
    4ae4:	87 70       	andi	r24, 0x07	; 7
    4ae6:	90 78       	andi	r25, 0x80	; 128
    4ae8:	99 23       	and	r25, r25
    4aea:	24 f4       	brge	.+8      	; 0x4af4 <main+0x22c>
    4aec:	01 97       	sbiw	r24, 0x01	; 1
    4aee:	88 6f       	ori	r24, 0xF8	; 248
    4af0:	9f 6f       	ori	r25, 0xFF	; 255
    4af2:	01 96       	adiw	r24, 0x01	; 1
    4af4:	b1 01       	movw	r22, r2
    4af6:	68 1b       	sub	r22, r24
    4af8:	79 0b       	sbc	r23, r25
    4afa:	c6 01       	movw	r24, r12
    4afc:	dd 20       	and	r13, r13
    4afe:	0c f4       	brge	.+2      	; 0x4b02 <main+0x23a>
    4b00:	07 96       	adiw	r24, 0x07	; 7
    4b02:	95 95       	asr	r25
    4b04:	87 95       	ror	r24
    4b06:	95 95       	asr	r25
    4b08:	87 95       	ror	r24
    4b0a:	95 95       	asr	r25
    4b0c:	87 95       	ror	r24
    4b0e:	96 95       	lsr	r25
    4b10:	98 2f       	mov	r25, r24
    4b12:	88 27       	eor	r24, r24
    4b14:	97 95       	ror	r25
    4b16:	87 95       	ror	r24
    4b18:	dc 01       	movw	r26, r24
    4b1a:	a5 5a       	subi	r26, 0xA5	; 165
    4b1c:	bb 4f       	sbci	r27, 0xFB	; 251
    4b1e:	fc 01       	movw	r30, r24
    4b20:	e5 58       	subi	r30, 0x85	; 133
    4b22:	fb 4f       	sbci	r31, 0xFB	; 251
    4b24:	7f 01       	movw	r14, r30
    4b26:	85 01       	movw	r16, r10
    4b28:	f8 01       	movw	r30, r16
    4b2a:	41 91       	ld	r20, Z+
    4b2c:	8f 01       	movw	r16, r30
    4b2e:	50 e0       	ldi	r21, 0x00	; 0
    4b30:	fd 01       	movw	r30, r26
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	30 e0       	ldi	r19, 0x00	; 0
    4b36:	ca 01       	movw	r24, r20
    4b38:	02 2e       	mov	r0, r18
    4b3a:	02 c0       	rjmp	.+4      	; 0x4b40 <main+0x278>
    4b3c:	88 0f       	add	r24, r24
    4b3e:	99 1f       	adc	r25, r25
    4b40:	0a 94       	dec	r0
    4b42:	e2 f7       	brpl	.-8      	; 0x4b3c <main+0x274>
    4b44:	80 78       	andi	r24, 0x80	; 128
    4b46:	99 27       	eor	r25, r25
    4b48:	06 2e       	mov	r0, r22
    4b4a:	02 c0       	rjmp	.+4      	; 0x4b50 <main+0x288>
    4b4c:	95 95       	asr	r25
    4b4e:	87 95       	ror	r24
    4b50:	0a 94       	dec	r0
    4b52:	e2 f7       	brpl	.-8      	; 0x4b4c <main+0x284>
    4b54:	90 81       	ld	r25, Z
    4b56:	89 2b       	or	r24, r25
    4b58:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4b5a:	2f 5f       	subi	r18, 0xFF	; 255
    4b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b5e:	28 30       	cpi	r18, 0x08	; 8
    4b60:	31 05       	cpc	r19, r1
    4b62:	49 f7       	brne	.-46     	; 0x4b36 <main+0x26e>
    4b64:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    4b66:	ae 15       	cp	r26, r14
    4b68:	bf 05       	cpc	r27, r15
    4b6a:	f1 f6       	brne	.-68     	; 0x4b28 <main+0x260>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4b6c:	ff ef       	ldi	r31, 0xFF	; 255
    4b6e:	cf 1a       	sub	r12, r31
    4b70:	df 0a       	sbc	r13, r31
    4b72:	24 e0       	ldi	r18, 0x04	; 4
    4b74:	a2 0e       	add	r10, r18
    4b76:	b1 1c       	adc	r11, r1
    4b78:	38 e0       	ldi	r19, 0x08	; 8
    4b7a:	c3 16       	cp	r12, r19
    4b7c:	d1 04       	cpc	r13, r1
    4b7e:	09 f0       	breq	.+2      	; 0x4b82 <main+0x2ba>
    4b80:	b0 cf       	rjmp	.-160    	; 0x4ae2 <main+0x21a>
    4b82:	ba c0       	rjmp	.+372    	; 0x4cf8 <main+0x430>
void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
    4b84:	83 30       	cpi	r24, 0x03	; 3
    4b86:	91 05       	cpc	r25, r1
    4b88:	09 f0       	breq	.+2      	; 0x4b8c <main+0x2c4>
    4b8a:	4f c1       	rjmp	.+670    	; 0x4e2a <main+0x562>
    4b8c:	0f 2e       	mov	r0, r31
    4b8e:	f0 e3       	ldi	r31, 0x30	; 48
    4b90:	af 2e       	mov	r10, r31
    4b92:	f1 e0       	ldi	r31, 0x01	; 1
    4b94:	bf 2e       	mov	r11, r31
    4b96:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4b98:	c1 2c       	mov	r12, r1
    4b9a:	d1 2c       	mov	r13, r1
    4b9c:	c6 01       	movw	r24, r12
    4b9e:	87 70       	andi	r24, 0x07	; 7
    4ba0:	90 78       	andi	r25, 0x80	; 128
    4ba2:	99 23       	and	r25, r25
    4ba4:	24 f4       	brge	.+8      	; 0x4bae <main+0x2e6>
    4ba6:	01 97       	sbiw	r24, 0x01	; 1
    4ba8:	88 6f       	ori	r24, 0xF8	; 248
    4baa:	9f 6f       	ori	r25, 0xFF	; 255
    4bac:	01 96       	adiw	r24, 0x01	; 1
    4bae:	b1 01       	movw	r22, r2
    4bb0:	68 1b       	sub	r22, r24
    4bb2:	79 0b       	sbc	r23, r25
    4bb4:	c6 01       	movw	r24, r12
    4bb6:	dd 20       	and	r13, r13
    4bb8:	0c f4       	brge	.+2      	; 0x4bbc <main+0x2f4>
    4bba:	07 96       	adiw	r24, 0x07	; 7
    4bbc:	95 95       	asr	r25
    4bbe:	87 95       	ror	r24
    4bc0:	95 95       	asr	r25
    4bc2:	87 95       	ror	r24
    4bc4:	95 95       	asr	r25
    4bc6:	87 95       	ror	r24
    4bc8:	96 95       	lsr	r25
    4bca:	98 2f       	mov	r25, r24
    4bcc:	88 27       	eor	r24, r24
    4bce:	97 95       	ror	r25
    4bd0:	87 95       	ror	r24
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	a5 5a       	subi	r26, 0xA5	; 165
    4bd6:	bb 4f       	sbci	r27, 0xFB	; 251
    4bd8:	fc 01       	movw	r30, r24
    4bda:	e5 58       	subi	r30, 0x85	; 133
    4bdc:	fb 4f       	sbci	r31, 0xFB	; 251
    4bde:	7f 01       	movw	r14, r30
    4be0:	85 01       	movw	r16, r10
    4be2:	f8 01       	movw	r30, r16
    4be4:	41 91       	ld	r20, Z+
    4be6:	8f 01       	movw	r16, r30
    4be8:	50 e0       	ldi	r21, 0x00	; 0
    4bea:	fd 01       	movw	r30, r26
    4bec:	20 e0       	ldi	r18, 0x00	; 0
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	ca 01       	movw	r24, r20
    4bf2:	02 2e       	mov	r0, r18
    4bf4:	02 c0       	rjmp	.+4      	; 0x4bfa <main+0x332>
    4bf6:	88 0f       	add	r24, r24
    4bf8:	99 1f       	adc	r25, r25
    4bfa:	0a 94       	dec	r0
    4bfc:	e2 f7       	brpl	.-8      	; 0x4bf6 <main+0x32e>
    4bfe:	80 78       	andi	r24, 0x80	; 128
    4c00:	99 27       	eor	r25, r25
    4c02:	06 2e       	mov	r0, r22
    4c04:	02 c0       	rjmp	.+4      	; 0x4c0a <main+0x342>
    4c06:	95 95       	asr	r25
    4c08:	87 95       	ror	r24
    4c0a:	0a 94       	dec	r0
    4c0c:	e2 f7       	brpl	.-8      	; 0x4c06 <main+0x33e>
    4c0e:	90 81       	ld	r25, Z
    4c10:	89 2b       	or	r24, r25
    4c12:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4c14:	2f 5f       	subi	r18, 0xFF	; 255
    4c16:	3f 4f       	sbci	r19, 0xFF	; 255
    4c18:	28 30       	cpi	r18, 0x08	; 8
    4c1a:	31 05       	cpc	r19, r1
    4c1c:	49 f7       	brne	.-46     	; 0x4bf0 <main+0x328>
    4c1e:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    4c20:	ea 16       	cp	r14, r26
    4c22:	fb 06       	cpc	r15, r27
    4c24:	f1 f6       	brne	.-68     	; 0x4be2 <main+0x31a>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4c26:	ff ef       	ldi	r31, 0xFF	; 255
    4c28:	cf 1a       	sub	r12, r31
    4c2a:	df 0a       	sbc	r13, r31
    4c2c:	24 e0       	ldi	r18, 0x04	; 4
    4c2e:	a2 0e       	add	r10, r18
    4c30:	b1 1c       	adc	r11, r1
    4c32:	38 e0       	ldi	r19, 0x08	; 8
    4c34:	c3 16       	cp	r12, r19
    4c36:	d1 04       	cpc	r13, r1
    4c38:	09 f0       	breq	.+2      	; 0x4c3c <main+0x374>
    4c3a:	b0 cf       	rjmp	.-160    	; 0x4b9c <main+0x2d4>
    4c3c:	5d c0       	rjmp	.+186    	; 0x4cf8 <main+0x430>
    4c3e:	80 e0       	ldi	r24, 0x00	; 0
    4c40:	90 e0       	ldi	r25, 0x00	; 0
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
    4c42:	04 97       	sbiw	r24, 0x04	; 4
    4c44:	09 f0       	breq	.+2      	; 0x4c48 <main+0x380>
    4c46:	58 c0       	rjmp	.+176    	; 0x4cf8 <main+0x430>
    4c48:	0f 2e       	mov	r0, r31
    4c4a:	f0 e1       	ldi	r31, 0x10	; 16
    4c4c:	af 2e       	mov	r10, r31
    4c4e:	f1 e0       	ldi	r31, 0x01	; 1
    4c50:	bf 2e       	mov	r11, r31
    4c52:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4c54:	c1 2c       	mov	r12, r1
    4c56:	d1 2c       	mov	r13, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4c58:	c6 01       	movw	r24, r12
    4c5a:	87 70       	andi	r24, 0x07	; 7
    4c5c:	90 78       	andi	r25, 0x80	; 128
    4c5e:	99 23       	and	r25, r25
    4c60:	24 f4       	brge	.+8      	; 0x4c6a <main+0x3a2>
    4c62:	01 97       	sbiw	r24, 0x01	; 1
    4c64:	88 6f       	ori	r24, 0xF8	; 248
    4c66:	9f 6f       	ori	r25, 0xFF	; 255
    4c68:	01 96       	adiw	r24, 0x01	; 1
    4c6a:	b1 01       	movw	r22, r2
    4c6c:	68 1b       	sub	r22, r24
    4c6e:	79 0b       	sbc	r23, r25
    4c70:	c6 01       	movw	r24, r12
    4c72:	dd 20       	and	r13, r13
    4c74:	0c f4       	brge	.+2      	; 0x4c78 <main+0x3b0>
    4c76:	07 96       	adiw	r24, 0x07	; 7
    4c78:	95 95       	asr	r25
    4c7a:	87 95       	ror	r24
    4c7c:	95 95       	asr	r25
    4c7e:	87 95       	ror	r24
    4c80:	95 95       	asr	r25
    4c82:	87 95       	ror	r24
    4c84:	96 95       	lsr	r25
    4c86:	98 2f       	mov	r25, r24
    4c88:	88 27       	eor	r24, r24
    4c8a:	97 95       	ror	r25
    4c8c:	87 95       	ror	r24
    4c8e:	dc 01       	movw	r26, r24
    4c90:	a5 5a       	subi	r26, 0xA5	; 165
    4c92:	bb 4f       	sbci	r27, 0xFB	; 251
    4c94:	fc 01       	movw	r30, r24
    4c96:	e5 58       	subi	r30, 0x85	; 133
    4c98:	fb 4f       	sbci	r31, 0xFB	; 251
    4c9a:	7f 01       	movw	r14, r30
    4c9c:	85 01       	movw	r16, r10
    4c9e:	f8 01       	movw	r30, r16
    4ca0:	41 91       	ld	r20, Z+
    4ca2:	8f 01       	movw	r16, r30
    4ca4:	50 e0       	ldi	r21, 0x00	; 0
    4ca6:	fd 01       	movw	r30, r26
    4ca8:	20 e0       	ldi	r18, 0x00	; 0
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	ca 01       	movw	r24, r20
    4cae:	02 2e       	mov	r0, r18
    4cb0:	02 c0       	rjmp	.+4      	; 0x4cb6 <main+0x3ee>
    4cb2:	88 0f       	add	r24, r24
    4cb4:	99 1f       	adc	r25, r25
    4cb6:	0a 94       	dec	r0
    4cb8:	e2 f7       	brpl	.-8      	; 0x4cb2 <main+0x3ea>
    4cba:	80 78       	andi	r24, 0x80	; 128
    4cbc:	99 27       	eor	r25, r25
    4cbe:	06 2e       	mov	r0, r22
    4cc0:	02 c0       	rjmp	.+4      	; 0x4cc6 <main+0x3fe>
    4cc2:	95 95       	asr	r25
    4cc4:	87 95       	ror	r24
    4cc6:	0a 94       	dec	r0
    4cc8:	e2 f7       	brpl	.-8      	; 0x4cc2 <main+0x3fa>
    4cca:	90 81       	ld	r25, Z
    4ccc:	89 2b       	or	r24, r25
    4cce:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4cd0:	2f 5f       	subi	r18, 0xFF	; 255
    4cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    4cd4:	28 30       	cpi	r18, 0x08	; 8
    4cd6:	31 05       	cpc	r19, r1
    4cd8:	49 f7       	brne	.-46     	; 0x4cac <main+0x3e4>
    4cda:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    4cdc:	ae 15       	cp	r26, r14
    4cde:	bf 05       	cpc	r27, r15
    4ce0:	f1 f6       	brne	.-68     	; 0x4c9e <main+0x3d6>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4ce2:	ff ef       	ldi	r31, 0xFF	; 255
    4ce4:	cf 1a       	sub	r12, r31
    4ce6:	df 0a       	sbc	r13, r31
    4ce8:	24 e0       	ldi	r18, 0x04	; 4
    4cea:	a2 0e       	add	r10, r18
    4cec:	b1 1c       	adc	r11, r1
    4cee:	38 e0       	ldi	r19, 0x08	; 8
    4cf0:	c3 16       	cp	r12, r19
    4cf2:	d1 04       	cpc	r13, r1
    4cf4:	09 f0       	breq	.+2      	; 0x4cf8 <main+0x430>
    4cf6:	b0 cf       	rjmp	.-160    	; 0x4c58 <main+0x390>
    4cf8:	0f 2e       	mov	r0, r31
    4cfa:	f0 e0       	ldi	r31, 0x00	; 0
    4cfc:	cf 2e       	mov	r12, r31
    4cfe:	f1 e0       	ldi	r31, 0x01	; 1
    4d00:	df 2e       	mov	r13, r31
    4d02:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4d04:	e1 2c       	mov	r14, r1
    4d06:	f1 2c       	mov	r15, r1
    4d08:	c7 01       	movw	r24, r14
    4d0a:	87 70       	andi	r24, 0x07	; 7
    4d0c:	90 78       	andi	r25, 0x80	; 128
    4d0e:	99 23       	and	r25, r25
    4d10:	24 f4       	brge	.+8      	; 0x4d1a <main+0x452>
    4d12:	01 97       	sbiw	r24, 0x01	; 1
    4d14:	88 6f       	ori	r24, 0xF8	; 248
    4d16:	9f 6f       	ori	r25, 0xFF	; 255
    4d18:	01 96       	adiw	r24, 0x01	; 1
    4d1a:	b1 01       	movw	r22, r2
    4d1c:	68 1b       	sub	r22, r24
    4d1e:	79 0b       	sbc	r23, r25
    4d20:	86 01       	movw	r16, r12
    4d22:	f6 01       	movw	r30, r12
    4d24:	a0 81       	ld	r26, Z
    4d26:	b0 e0       	ldi	r27, 0x00	; 0
    4d28:	a7 01       	movw	r20, r14
    4d2a:	ff 20       	and	r15, r15
    4d2c:	14 f4       	brge	.+4      	; 0x4d32 <main+0x46a>
    4d2e:	49 5f       	subi	r20, 0xF9	; 249
    4d30:	5f 4f       	sbci	r21, 0xFF	; 255
    4d32:	55 95       	asr	r21
    4d34:	47 95       	ror	r20
    4d36:	55 95       	asr	r21
    4d38:	47 95       	ror	r20
    4d3a:	55 95       	asr	r21
    4d3c:	47 95       	ror	r20
    4d3e:	56 95       	lsr	r21
    4d40:	54 2f       	mov	r21, r20
    4d42:	44 27       	eor	r20, r20
    4d44:	57 95       	ror	r21
    4d46:	47 95       	ror	r20
    4d48:	fa 01       	movw	r30, r20
    4d4a:	e5 5b       	subi	r30, 0xB5	; 181
    4d4c:	fb 4f       	sbci	r31, 0xFB	; 251
    4d4e:	20 e0       	ldi	r18, 0x00	; 0
    4d50:	30 e0       	ldi	r19, 0x00	; 0
    4d52:	cd 01       	movw	r24, r26
    4d54:	02 2e       	mov	r0, r18
    4d56:	02 c0       	rjmp	.+4      	; 0x4d5c <main+0x494>
    4d58:	88 0f       	add	r24, r24
    4d5a:	99 1f       	adc	r25, r25
    4d5c:	0a 94       	dec	r0
    4d5e:	e2 f7       	brpl	.-8      	; 0x4d58 <main+0x490>
    4d60:	80 78       	andi	r24, 0x80	; 128
    4d62:	99 27       	eor	r25, r25
    4d64:	06 2e       	mov	r0, r22
    4d66:	02 c0       	rjmp	.+4      	; 0x4d6c <main+0x4a4>
    4d68:	95 95       	asr	r25
    4d6a:	87 95       	ror	r24
    4d6c:	0a 94       	dec	r0
    4d6e:	e2 f7       	brpl	.-8      	; 0x4d68 <main+0x4a0>
    4d70:	90 81       	ld	r25, Z
    4d72:	89 2b       	or	r24, r25
    4d74:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4d76:	2f 5f       	subi	r18, 0xFF	; 255
    4d78:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7a:	28 30       	cpi	r18, 0x08	; 8
    4d7c:	31 05       	cpc	r19, r1
    4d7e:	49 f7       	brne	.-46     	; 0x4d52 <main+0x48a>
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4d80:	d8 01       	movw	r26, r16
    4d82:	11 96       	adiw	r26, 0x01	; 1
    4d84:	ec 91       	ld	r30, X
    4d86:	f0 e0       	ldi	r31, 0x00	; 0
    4d88:	da 01       	movw	r26, r20
    4d8a:	ad 5a       	subi	r26, 0xAD	; 173
    4d8c:	bb 4f       	sbci	r27, 0xFB	; 251
    4d8e:	20 e0       	ldi	r18, 0x00	; 0
    4d90:	30 e0       	ldi	r19, 0x00	; 0
    4d92:	cf 01       	movw	r24, r30
    4d94:	02 2e       	mov	r0, r18
    4d96:	02 c0       	rjmp	.+4      	; 0x4d9c <main+0x4d4>
    4d98:	88 0f       	add	r24, r24
    4d9a:	99 1f       	adc	r25, r25
    4d9c:	0a 94       	dec	r0
    4d9e:	e2 f7       	brpl	.-8      	; 0x4d98 <main+0x4d0>
    4da0:	80 78       	andi	r24, 0x80	; 128
    4da2:	99 27       	eor	r25, r25
    4da4:	06 2e       	mov	r0, r22
    4da6:	02 c0       	rjmp	.+4      	; 0x4dac <main+0x4e4>
    4da8:	95 95       	asr	r25
    4daa:	87 95       	ror	r24
    4dac:	0a 94       	dec	r0
    4dae:	e2 f7       	brpl	.-8      	; 0x4da8 <main+0x4e0>
    4db0:	9c 91       	ld	r25, X
    4db2:	89 2b       	or	r24, r25
    4db4:	8d 93       	st	X+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4db6:	2f 5f       	subi	r18, 0xFF	; 255
    4db8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dba:	28 30       	cpi	r18, 0x08	; 8
    4dbc:	31 05       	cpc	r19, r1
    4dbe:	49 f7       	brne	.-46     	; 0x4d92 <main+0x4ca>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4dc0:	bf ef       	ldi	r27, 0xFF	; 255
    4dc2:	eb 1a       	sub	r14, r27
    4dc4:	fb 0a       	sbc	r15, r27
    4dc6:	e2 e0       	ldi	r30, 0x02	; 2
    4dc8:	ce 0e       	add	r12, r30
    4dca:	d1 1c       	adc	r13, r1
    4dcc:	f8 e0       	ldi	r31, 0x08	; 8
    4dce:	ef 16       	cp	r14, r31
    4dd0:	f1 04       	cpc	r15, r1
    4dd2:	09 f0       	breq	.+2      	; 0x4dd6 <main+0x50e>
    4dd4:	99 cf       	rjmp	.-206    	; 0x4d08 <main+0x440>
    4dd6:	eb ef       	ldi	r30, 0xFB	; 251
    4dd8:	f3 e0       	ldi	r31, 0x03	; 3

void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
			OLED_Data(oled_bufer[i]);
    4dda:	81 91       	ld	r24, Z+
}


void OLED_Data(int data)
{
	TWDR=data;							
    4ddc:	d2 01       	movw	r26, r4
    4dde:	8c 93       	st	X, r24
	TWCR=(1<<TWINT)|(1<<TWEN);				
    4de0:	ac eb       	ldi	r26, 0xBC	; 188
    4de2:	b0 e0       	ldi	r27, 0x00	; 0
    4de4:	9c 92       	st	X, r9
	while(!(TWCR & (1<<TWINT))){};
    4de6:	ac eb       	ldi	r26, 0xBC	; 188
    4de8:	b0 e0       	ldi	r27, 0x00	; 0
    4dea:	8c 91       	ld	r24, X
    4dec:	88 23       	and	r24, r24
    4dee:	dc f7       	brge	.-10     	; 0x4de6 <main+0x51e>
}


void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
    4df0:	e6 15       	cp	r30, r6
    4df2:	f7 05       	cpc	r31, r7
    4df4:	91 f7       	brne	.-28     	; 0x4dda <main+0x512>
	// oled.OLED_Write_To_Bufer(17,1,1,8,nine);
	 oled.OLED_Write_Bufer();
	 //_delay_ms(1000);
	 
	// _delay_ms(100);
     check();
    4df6:	0e 94 9f 08 	call	0x113e	; 0x113e <_Z5checkv>
				oled.writenumber(4-kf);
						oled.writenumber((PINB>>0)&0b00000001);
		oled.writenumber((PINB>>1)&0b00000001);
		oled.writenumber((PINB>>2)&0b00000001);
		oled.writenumber((PINB>>3)&0b00000001);*/
	while(1)
    4dfa:	9d cd       	rjmp	.-1222   	; 0x4936 <main+0x6e>
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
	if((PINB>>2)&0b00000001==1) kf++;
	if((PINB>>3)&0b00000001==1) kf++;
	curlvl=kf;
    4dfc:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <__data_end+0x1>
    4e00:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <__data_end>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
    4e04:	00 97       	sbiw	r24, 0x00	; 0
    4e06:	09 f0       	breq	.+2      	; 0x4e0a <main+0x542>
    4e08:	03 ce       	rjmp	.-1018   	; 0x4a10 <main+0x148>
    4e0a:	a9 cd       	rjmp	.-1198   	; 0x495e <main+0x96>
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
    4e0c:	81 30       	cpi	r24, 0x01	; 1
    4e0e:	91 05       	cpc	r25, r1
    4e10:	09 f0       	breq	.+2      	; 0x4e14 <main+0x54c>
    4e12:	5b ce       	rjmp	.-842    	; 0x4aca <main+0x202>
    4e14:	01 ce       	rjmp	.-1022   	; 0x4a18 <main+0x150>
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
    4e16:	82 30       	cpi	r24, 0x02	; 2
    4e18:	91 05       	cpc	r25, r1
    4e1a:	09 f0       	breq	.+2      	; 0x4e1e <main+0x556>
    4e1c:	b3 ce       	rjmp	.-666    	; 0x4b84 <main+0x2bc>
    4e1e:	59 ce       	rjmp	.-846    	; 0x4ad2 <main+0x20a>
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
    4e20:	83 30       	cpi	r24, 0x03	; 3
    4e22:	91 05       	cpc	r25, r1
    4e24:	09 f0       	breq	.+2      	; 0x4e28 <main+0x560>
    4e26:	0d cf       	rjmp	.-486    	; 0x4c42 <main+0x37a>
    4e28:	b1 ce       	rjmp	.-670    	; 0x4b8c <main+0x2c4>
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
    4e2a:	04 97       	sbiw	r24, 0x04	; 4
    4e2c:	09 f0       	breq	.+2      	; 0x4e30 <main+0x568>
    4e2e:	64 cf       	rjmp	.-312    	; 0x4cf8 <main+0x430>
    4e30:	0b cf       	rjmp	.-490    	; 0x4c48 <main+0x380>

00004e32 <_GLOBAL__sub_I_zero>:
	 //_delay_ms(1000);
	 
	// _delay_ms(100);
     check();
	}
}
    4e32:	8f 92       	push	r8
    4e34:	9f 92       	push	r9
    4e36:	af 92       	push	r10
    4e38:	bf 92       	push	r11
    4e3a:	cf 92       	push	r12
    4e3c:	df 92       	push	r13
    4e3e:	ef 92       	push	r14
    4e40:	ff 92       	push	r15
    4e42:	0f 93       	push	r16
    4e44:	1f 93       	push	r17
    4e46:	cf 93       	push	r28
    4e48:	df 93       	push	r29
};



TWI wire;
OLED oled(wire);
    4e4a:	60 e0       	ldi	r22, 0x00	; 0
    4e4c:	8b ef       	ldi	r24, 0xFB	; 251
    4e4e:	93 e0       	ldi	r25, 0x03	; 3
    4e50:	0e 94 7d 00 	call	0xfa	; 0xfa <_ZN4OLEDC1E3TWI>
	int imgnum=0;
	int xcoord[5]={12,36,60,84,108};
	int ycoord=4;
	public:
	password_scene()
	{
    4e54:	ca ee       	ldi	r28, 0xEA	; 234
    4e56:	d3 e0       	ldi	r29, 0x03	; 3
    4e58:	19 82       	std	Y+1, r1	; 0x01
    4e5a:	18 82       	st	Y, r1
    4e5c:	1b 82       	std	Y+3, r1	; 0x03
    4e5e:	1a 82       	std	Y+2, r1	; 0x02
    4e60:	8a e0       	ldi	r24, 0x0A	; 10
    4e62:	e0 ed       	ldi	r30, 0xD0	; 208
    4e64:	f3 e0       	ldi	r31, 0x03	; 3
    4e66:	ae ee       	ldi	r26, 0xEE	; 238
    4e68:	b3 e0       	ldi	r27, 0x03	; 3
    4e6a:	01 90       	ld	r0, Z+
    4e6c:	0d 92       	st	X+, r0
    4e6e:	8a 95       	dec	r24
    4e70:	e1 f7       	brne	.-8      	; 0x4e6a <_GLOBAL__sub_I_zero+0x38>
    4e72:	84 e0       	ldi	r24, 0x04	; 4
    4e74:	90 e0       	ldi	r25, 0x00	; 0
    4e76:	9f 87       	std	Y+15, r25	; 0x0f
    4e78:	8e 87       	std	Y+14, r24	; 0x0e
		if(pss){
    4e7a:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <pss>
    4e7e:	88 23       	and	r24, r24
    4e80:	09 f4       	brne	.+2      	; 0x4e84 <_GLOBAL__sub_I_zero+0x52>
    4e82:	e9 c1       	rjmp	.+978    	; 0x5256 <_GLOBAL__sub_I_zero+0x424>
    4e84:	c8 e7       	ldi	r28, 0x78	; 120
    4e86:	d3 e0       	ldi	r29, 0x03	; 3
    4e88:	8e 01       	movw	r16, r28
    4e8a:	a0 e0       	ldi	r26, 0x00	; 0
    4e8c:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4e8e:	0f 2e       	mov	r0, r31
    4e90:	f7 e0       	ldi	r31, 0x07	; 7
    4e92:	ef 2e       	mov	r14, r31
    4e94:	f1 2c       	mov	r15, r1
    4e96:	f0 2d       	mov	r31, r0
    4e98:	f8 01       	movw	r30, r16
    4e9a:	41 91       	ld	r20, Z+
    4e9c:	8f 01       	movw	r16, r30
    4e9e:	50 e0       	ldi	r21, 0x00	; 0
    4ea0:	cd 01       	movw	r24, r26
    4ea2:	87 70       	andi	r24, 0x07	; 7
    4ea4:	90 78       	andi	r25, 0x80	; 128
    4ea6:	99 23       	and	r25, r25
    4ea8:	24 f4       	brge	.+8      	; 0x4eb2 <_GLOBAL__sub_I_zero+0x80>
    4eaa:	01 97       	sbiw	r24, 0x01	; 1
    4eac:	88 6f       	ori	r24, 0xF8	; 248
    4eae:	9f 6f       	ori	r25, 0xFF	; 255
    4eb0:	01 96       	adiw	r24, 0x01	; 1
    4eb2:	b7 01       	movw	r22, r14
    4eb4:	68 1b       	sub	r22, r24
    4eb6:	79 0b       	sbc	r23, r25
    4eb8:	fd 01       	movw	r30, r26
    4eba:	bb 23       	and	r27, r27
    4ebc:	0c f4       	brge	.+2      	; 0x4ec0 <_GLOBAL__sub_I_zero+0x8e>
    4ebe:	37 96       	adiw	r30, 0x07	; 7
    4ec0:	f5 95       	asr	r31
    4ec2:	e7 95       	ror	r30
    4ec4:	f5 95       	asr	r31
    4ec6:	e7 95       	ror	r30
    4ec8:	f5 95       	asr	r31
    4eca:	e7 95       	ror	r30
    4ecc:	f6 95       	lsr	r31
    4ece:	fe 2f       	mov	r31, r30
    4ed0:	ee 27       	eor	r30, r30
    4ed2:	f7 95       	ror	r31
    4ed4:	e7 95       	ror	r30
    4ed6:	e9 57       	subi	r30, 0x79	; 121
    4ed8:	f9 4f       	sbci	r31, 0xF9	; 249
    4eda:	20 e0       	ldi	r18, 0x00	; 0
    4edc:	30 e0       	ldi	r19, 0x00	; 0
    4ede:	ca 01       	movw	r24, r20
    4ee0:	02 2e       	mov	r0, r18
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <_GLOBAL__sub_I_zero+0xb6>
    4ee4:	88 0f       	add	r24, r24
    4ee6:	99 1f       	adc	r25, r25
    4ee8:	0a 94       	dec	r0
    4eea:	e2 f7       	brpl	.-8      	; 0x4ee4 <_GLOBAL__sub_I_zero+0xb2>
    4eec:	80 78       	andi	r24, 0x80	; 128
    4eee:	99 27       	eor	r25, r25
    4ef0:	06 2e       	mov	r0, r22
    4ef2:	02 c0       	rjmp	.+4      	; 0x4ef8 <_GLOBAL__sub_I_zero+0xc6>
    4ef4:	95 95       	asr	r25
    4ef6:	87 95       	ror	r24
    4ef8:	0a 94       	dec	r0
    4efa:	e2 f7       	brpl	.-8      	; 0x4ef4 <_GLOBAL__sub_I_zero+0xc2>
    4efc:	90 81       	ld	r25, Z
    4efe:	89 2b       	or	r24, r25
    4f00:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4f02:	2f 5f       	subi	r18, 0xFF	; 255
    4f04:	3f 4f       	sbci	r19, 0xFF	; 255
    4f06:	28 30       	cpi	r18, 0x08	; 8
    4f08:	31 05       	cpc	r19, r1
    4f0a:	49 f7       	brne	.-46     	; 0x4ede <_GLOBAL__sub_I_zero+0xac>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4f0c:	11 96       	adiw	r26, 0x01	; 1
    4f0e:	a8 30       	cpi	r26, 0x08	; 8
    4f10:	b1 05       	cpc	r27, r1
    4f12:	11 f6       	brne	.-124    	; 0x4e98 <_GLOBAL__sub_I_zero+0x66>
    4f14:	08 e7       	ldi	r16, 0x78	; 120
    4f16:	13 e0       	ldi	r17, 0x03	; 3
    4f18:	a0 e0       	ldi	r26, 0x00	; 0
    4f1a:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4f1c:	0f 2e       	mov	r0, r31
    4f1e:	f7 e0       	ldi	r31, 0x07	; 7
    4f20:	ef 2e       	mov	r14, r31
    4f22:	f1 2c       	mov	r15, r1
    4f24:	f0 2d       	mov	r31, r0
    4f26:	f8 01       	movw	r30, r16
    4f28:	41 91       	ld	r20, Z+
    4f2a:	8f 01       	movw	r16, r30
    4f2c:	50 e0       	ldi	r21, 0x00	; 0
    4f2e:	cd 01       	movw	r24, r26
    4f30:	87 70       	andi	r24, 0x07	; 7
    4f32:	90 78       	andi	r25, 0x80	; 128
    4f34:	99 23       	and	r25, r25
    4f36:	24 f4       	brge	.+8      	; 0x4f40 <_GLOBAL__sub_I_zero+0x10e>
    4f38:	01 97       	sbiw	r24, 0x01	; 1
    4f3a:	88 6f       	ori	r24, 0xF8	; 248
    4f3c:	9f 6f       	ori	r25, 0xFF	; 255
    4f3e:	01 96       	adiw	r24, 0x01	; 1
    4f40:	b7 01       	movw	r22, r14
    4f42:	68 1b       	sub	r22, r24
    4f44:	79 0b       	sbc	r23, r25
    4f46:	fd 01       	movw	r30, r26
    4f48:	bb 23       	and	r27, r27
    4f4a:	0c f4       	brge	.+2      	; 0x4f4e <_GLOBAL__sub_I_zero+0x11c>
    4f4c:	37 96       	adiw	r30, 0x07	; 7
    4f4e:	f5 95       	asr	r31
    4f50:	e7 95       	ror	r30
    4f52:	f5 95       	asr	r31
    4f54:	e7 95       	ror	r30
    4f56:	f5 95       	asr	r31
    4f58:	e7 95       	ror	r30
    4f5a:	f6 95       	lsr	r31
    4f5c:	fe 2f       	mov	r31, r30
    4f5e:	ee 27       	eor	r30, r30
    4f60:	f7 95       	ror	r31
    4f62:	e7 95       	ror	r30
    4f64:	e1 56       	subi	r30, 0x61	; 97
    4f66:	f9 4f       	sbci	r31, 0xF9	; 249
    4f68:	20 e0       	ldi	r18, 0x00	; 0
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	ca 01       	movw	r24, r20
    4f6e:	02 2e       	mov	r0, r18
    4f70:	02 c0       	rjmp	.+4      	; 0x4f76 <_GLOBAL__sub_I_zero+0x144>
    4f72:	88 0f       	add	r24, r24
    4f74:	99 1f       	adc	r25, r25
    4f76:	0a 94       	dec	r0
    4f78:	e2 f7       	brpl	.-8      	; 0x4f72 <_GLOBAL__sub_I_zero+0x140>
    4f7a:	80 78       	andi	r24, 0x80	; 128
    4f7c:	99 27       	eor	r25, r25
    4f7e:	06 2e       	mov	r0, r22
    4f80:	02 c0       	rjmp	.+4      	; 0x4f86 <_GLOBAL__sub_I_zero+0x154>
    4f82:	95 95       	asr	r25
    4f84:	87 95       	ror	r24
    4f86:	0a 94       	dec	r0
    4f88:	e2 f7       	brpl	.-8      	; 0x4f82 <_GLOBAL__sub_I_zero+0x150>
    4f8a:	90 81       	ld	r25, Z
    4f8c:	89 2b       	or	r24, r25
    4f8e:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    4f90:	2f 5f       	subi	r18, 0xFF	; 255
    4f92:	3f 4f       	sbci	r19, 0xFF	; 255
    4f94:	28 30       	cpi	r18, 0x08	; 8
    4f96:	31 05       	cpc	r19, r1
    4f98:	49 f7       	brne	.-46     	; 0x4f6c <_GLOBAL__sub_I_zero+0x13a>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    4f9a:	11 96       	adiw	r26, 0x01	; 1
    4f9c:	a8 30       	cpi	r26, 0x08	; 8
    4f9e:	b1 05       	cpc	r27, r1
    4fa0:	11 f6       	brne	.-124    	; 0x4f26 <_GLOBAL__sub_I_zero+0xf4>
    4fa2:	08 e7       	ldi	r16, 0x78	; 120
    4fa4:	13 e0       	ldi	r17, 0x03	; 3
    4fa6:	a0 e0       	ldi	r26, 0x00	; 0
    4fa8:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    4faa:	0f 2e       	mov	r0, r31
    4fac:	f7 e0       	ldi	r31, 0x07	; 7
    4fae:	ef 2e       	mov	r14, r31
    4fb0:	f1 2c       	mov	r15, r1
    4fb2:	f0 2d       	mov	r31, r0
    4fb4:	f8 01       	movw	r30, r16
    4fb6:	41 91       	ld	r20, Z+
    4fb8:	8f 01       	movw	r16, r30
    4fba:	50 e0       	ldi	r21, 0x00	; 0
    4fbc:	cd 01       	movw	r24, r26
    4fbe:	87 70       	andi	r24, 0x07	; 7
    4fc0:	90 78       	andi	r25, 0x80	; 128
    4fc2:	99 23       	and	r25, r25
    4fc4:	24 f4       	brge	.+8      	; 0x4fce <_GLOBAL__sub_I_zero+0x19c>
    4fc6:	01 97       	sbiw	r24, 0x01	; 1
    4fc8:	88 6f       	ori	r24, 0xF8	; 248
    4fca:	9f 6f       	ori	r25, 0xFF	; 255
    4fcc:	01 96       	adiw	r24, 0x01	; 1
    4fce:	b7 01       	movw	r22, r14
    4fd0:	68 1b       	sub	r22, r24
    4fd2:	79 0b       	sbc	r23, r25
    4fd4:	fd 01       	movw	r30, r26
    4fd6:	bb 23       	and	r27, r27
    4fd8:	0c f4       	brge	.+2      	; 0x4fdc <_GLOBAL__sub_I_zero+0x1aa>
    4fda:	37 96       	adiw	r30, 0x07	; 7
    4fdc:	f5 95       	asr	r31
    4fde:	e7 95       	ror	r30
    4fe0:	f5 95       	asr	r31
    4fe2:	e7 95       	ror	r30
    4fe4:	f5 95       	asr	r31
    4fe6:	e7 95       	ror	r30
    4fe8:	f6 95       	lsr	r31
    4fea:	fe 2f       	mov	r31, r30
    4fec:	ee 27       	eor	r30, r30
    4fee:	f7 95       	ror	r31
    4ff0:	e7 95       	ror	r30
    4ff2:	e9 54       	subi	r30, 0x49	; 73
    4ff4:	f9 4f       	sbci	r31, 0xF9	; 249
    4ff6:	20 e0       	ldi	r18, 0x00	; 0
    4ff8:	30 e0       	ldi	r19, 0x00	; 0
    4ffa:	ca 01       	movw	r24, r20
    4ffc:	02 2e       	mov	r0, r18
    4ffe:	02 c0       	rjmp	.+4      	; 0x5004 <_GLOBAL__sub_I_zero+0x1d2>
    5000:	88 0f       	add	r24, r24
    5002:	99 1f       	adc	r25, r25
    5004:	0a 94       	dec	r0
    5006:	e2 f7       	brpl	.-8      	; 0x5000 <_GLOBAL__sub_I_zero+0x1ce>
    5008:	80 78       	andi	r24, 0x80	; 128
    500a:	99 27       	eor	r25, r25
    500c:	06 2e       	mov	r0, r22
    500e:	02 c0       	rjmp	.+4      	; 0x5014 <_GLOBAL__sub_I_zero+0x1e2>
    5010:	95 95       	asr	r25
    5012:	87 95       	ror	r24
    5014:	0a 94       	dec	r0
    5016:	e2 f7       	brpl	.-8      	; 0x5010 <_GLOBAL__sub_I_zero+0x1de>
    5018:	90 81       	ld	r25, Z
    501a:	89 2b       	or	r24, r25
    501c:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    501e:	2f 5f       	subi	r18, 0xFF	; 255
    5020:	3f 4f       	sbci	r19, 0xFF	; 255
    5022:	28 30       	cpi	r18, 0x08	; 8
    5024:	31 05       	cpc	r19, r1
    5026:	49 f7       	brne	.-46     	; 0x4ffa <_GLOBAL__sub_I_zero+0x1c8>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    5028:	11 96       	adiw	r26, 0x01	; 1
    502a:	a8 30       	cpi	r26, 0x08	; 8
    502c:	b1 05       	cpc	r27, r1
    502e:	11 f6       	brne	.-124    	; 0x4fb4 <_GLOBAL__sub_I_zero+0x182>
    5030:	08 e7       	ldi	r16, 0x78	; 120
    5032:	13 e0       	ldi	r17, 0x03	; 3
    5034:	a0 e0       	ldi	r26, 0x00	; 0
    5036:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    5038:	0f 2e       	mov	r0, r31
    503a:	f7 e0       	ldi	r31, 0x07	; 7
    503c:	ef 2e       	mov	r14, r31
    503e:	f1 2c       	mov	r15, r1
    5040:	f0 2d       	mov	r31, r0
    5042:	f8 01       	movw	r30, r16
    5044:	41 91       	ld	r20, Z+
    5046:	8f 01       	movw	r16, r30
    5048:	50 e0       	ldi	r21, 0x00	; 0
    504a:	cd 01       	movw	r24, r26
    504c:	87 70       	andi	r24, 0x07	; 7
    504e:	90 78       	andi	r25, 0x80	; 128
    5050:	99 23       	and	r25, r25
    5052:	24 f4       	brge	.+8      	; 0x505c <_GLOBAL__sub_I_zero+0x22a>
    5054:	01 97       	sbiw	r24, 0x01	; 1
    5056:	88 6f       	ori	r24, 0xF8	; 248
    5058:	9f 6f       	ori	r25, 0xFF	; 255
    505a:	01 96       	adiw	r24, 0x01	; 1
    505c:	b7 01       	movw	r22, r14
    505e:	68 1b       	sub	r22, r24
    5060:	79 0b       	sbc	r23, r25
    5062:	fd 01       	movw	r30, r26
    5064:	bb 23       	and	r27, r27
    5066:	0c f4       	brge	.+2      	; 0x506a <_GLOBAL__sub_I_zero+0x238>
    5068:	37 96       	adiw	r30, 0x07	; 7
    506a:	f5 95       	asr	r31
    506c:	e7 95       	ror	r30
    506e:	f5 95       	asr	r31
    5070:	e7 95       	ror	r30
    5072:	f5 95       	asr	r31
    5074:	e7 95       	ror	r30
    5076:	f6 95       	lsr	r31
    5078:	fe 2f       	mov	r31, r30
    507a:	ee 27       	eor	r30, r30
    507c:	f7 95       	ror	r31
    507e:	e7 95       	ror	r30
    5080:	e1 53       	subi	r30, 0x31	; 49
    5082:	f9 4f       	sbci	r31, 0xF9	; 249
    5084:	20 e0       	ldi	r18, 0x00	; 0
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	ca 01       	movw	r24, r20
    508a:	02 2e       	mov	r0, r18
    508c:	02 c0       	rjmp	.+4      	; 0x5092 <_GLOBAL__sub_I_zero+0x260>
    508e:	88 0f       	add	r24, r24
    5090:	99 1f       	adc	r25, r25
    5092:	0a 94       	dec	r0
    5094:	e2 f7       	brpl	.-8      	; 0x508e <_GLOBAL__sub_I_zero+0x25c>
    5096:	80 78       	andi	r24, 0x80	; 128
    5098:	99 27       	eor	r25, r25
    509a:	06 2e       	mov	r0, r22
    509c:	02 c0       	rjmp	.+4      	; 0x50a2 <_GLOBAL__sub_I_zero+0x270>
    509e:	95 95       	asr	r25
    50a0:	87 95       	ror	r24
    50a2:	0a 94       	dec	r0
    50a4:	e2 f7       	brpl	.-8      	; 0x509e <_GLOBAL__sub_I_zero+0x26c>
    50a6:	90 81       	ld	r25, Z
    50a8:	89 2b       	or	r24, r25
    50aa:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    50ac:	2f 5f       	subi	r18, 0xFF	; 255
    50ae:	3f 4f       	sbci	r19, 0xFF	; 255
    50b0:	28 30       	cpi	r18, 0x08	; 8
    50b2:	31 05       	cpc	r19, r1
    50b4:	49 f7       	brne	.-46     	; 0x5088 <_GLOBAL__sub_I_zero+0x256>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    50b6:	11 96       	adiw	r26, 0x01	; 1
    50b8:	a8 30       	cpi	r26, 0x08	; 8
    50ba:	b1 05       	cpc	r27, r1
    50bc:	11 f6       	brne	.-124    	; 0x5042 <_GLOBAL__sub_I_zero+0x210>
    50be:	a0 e0       	ldi	r26, 0x00	; 0
    50c0:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    50c2:	07 e0       	ldi	r16, 0x07	; 7
    50c4:	10 e0       	ldi	r17, 0x00	; 0
    50c6:	49 91       	ld	r20, Y+
    50c8:	50 e0       	ldi	r21, 0x00	; 0
    50ca:	cd 01       	movw	r24, r26
    50cc:	87 70       	andi	r24, 0x07	; 7
    50ce:	90 78       	andi	r25, 0x80	; 128
    50d0:	99 23       	and	r25, r25
    50d2:	24 f4       	brge	.+8      	; 0x50dc <_GLOBAL__sub_I_zero+0x2aa>
    50d4:	01 97       	sbiw	r24, 0x01	; 1
    50d6:	88 6f       	ori	r24, 0xF8	; 248
    50d8:	9f 6f       	ori	r25, 0xFF	; 255
    50da:	01 96       	adiw	r24, 0x01	; 1
    50dc:	b8 01       	movw	r22, r16
    50de:	68 1b       	sub	r22, r24
    50e0:	79 0b       	sbc	r23, r25
    50e2:	fd 01       	movw	r30, r26
    50e4:	bb 23       	and	r27, r27
    50e6:	0c f4       	brge	.+2      	; 0x50ea <_GLOBAL__sub_I_zero+0x2b8>
    50e8:	37 96       	adiw	r30, 0x07	; 7
    50ea:	f5 95       	asr	r31
    50ec:	e7 95       	ror	r30
    50ee:	f5 95       	asr	r31
    50f0:	e7 95       	ror	r30
    50f2:	f5 95       	asr	r31
    50f4:	e7 95       	ror	r30
    50f6:	f6 95       	lsr	r31
    50f8:	fe 2f       	mov	r31, r30
    50fa:	ee 27       	eor	r30, r30
    50fc:	f7 95       	ror	r31
    50fe:	e7 95       	ror	r30
    5100:	e9 51       	subi	r30, 0x19	; 25
    5102:	f9 4f       	sbci	r31, 0xF9	; 249
    5104:	20 e0       	ldi	r18, 0x00	; 0
    5106:	30 e0       	ldi	r19, 0x00	; 0
    5108:	ca 01       	movw	r24, r20
    510a:	02 2e       	mov	r0, r18
    510c:	02 c0       	rjmp	.+4      	; 0x5112 <_GLOBAL__sub_I_zero+0x2e0>
    510e:	88 0f       	add	r24, r24
    5110:	99 1f       	adc	r25, r25
    5112:	0a 94       	dec	r0
    5114:	e2 f7       	brpl	.-8      	; 0x510e <_GLOBAL__sub_I_zero+0x2dc>
    5116:	80 78       	andi	r24, 0x80	; 128
    5118:	99 27       	eor	r25, r25
    511a:	06 2e       	mov	r0, r22
    511c:	02 c0       	rjmp	.+4      	; 0x5122 <_GLOBAL__sub_I_zero+0x2f0>
    511e:	95 95       	asr	r25
    5120:	87 95       	ror	r24
    5122:	0a 94       	dec	r0
    5124:	e2 f7       	brpl	.-8      	; 0x511e <_GLOBAL__sub_I_zero+0x2ec>
    5126:	90 81       	ld	r25, Z
    5128:	89 2b       	or	r24, r25
    512a:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    512c:	2f 5f       	subi	r18, 0xFF	; 255
    512e:	3f 4f       	sbci	r19, 0xFF	; 255
    5130:	28 30       	cpi	r18, 0x08	; 8
    5132:	31 05       	cpc	r19, r1
    5134:	49 f7       	brne	.-46     	; 0x5108 <_GLOBAL__sub_I_zero+0x2d6>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    5136:	11 96       	adiw	r26, 0x01	; 1
    5138:	a8 30       	cpi	r26, 0x08	; 8
    513a:	b1 05       	cpc	r27, r1
    513c:	21 f6       	brne	.-120    	; 0x50c6 <_GLOBAL__sub_I_zero+0x294>
    513e:	c0 e6       	ldi	r28, 0x60	; 96
    5140:	d3 e0       	ldi	r29, 0x03	; 3
    5142:	a0 e0       	ldi	r26, 0x00	; 0
    5144:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    5146:	07 e0       	ldi	r16, 0x07	; 7
    5148:	10 e0       	ldi	r17, 0x00	; 0
    514a:	49 91       	ld	r20, Y+
    514c:	50 e0       	ldi	r21, 0x00	; 0
    514e:	cd 01       	movw	r24, r26
    5150:	87 70       	andi	r24, 0x07	; 7
    5152:	90 78       	andi	r25, 0x80	; 128
    5154:	99 23       	and	r25, r25
    5156:	24 f4       	brge	.+8      	; 0x5160 <_GLOBAL__sub_I_zero+0x32e>
    5158:	01 97       	sbiw	r24, 0x01	; 1
    515a:	88 6f       	ori	r24, 0xF8	; 248
    515c:	9f 6f       	ori	r25, 0xFF	; 255
    515e:	01 96       	adiw	r24, 0x01	; 1
    5160:	b8 01       	movw	r22, r16
    5162:	68 1b       	sub	r22, r24
    5164:	79 0b       	sbc	r23, r25
    5166:	fd 01       	movw	r30, r26
    5168:	bb 23       	and	r27, r27
    516a:	0c f4       	brge	.+2      	; 0x516e <_GLOBAL__sub_I_zero+0x33c>
    516c:	37 96       	adiw	r30, 0x07	; 7
    516e:	f5 95       	asr	r31
    5170:	e7 95       	ror	r30
    5172:	f5 95       	asr	r31
    5174:	e7 95       	ror	r30
    5176:	f5 95       	asr	r31
    5178:	e7 95       	ror	r30
    517a:	f6 95       	lsr	r31
    517c:	fe 2f       	mov	r31, r30
    517e:	ee 27       	eor	r30, r30
    5180:	f7 95       	ror	r31
    5182:	e7 95       	ror	r30
    5184:	e9 5f       	subi	r30, 0xF9	; 249
    5186:	f8 4f       	sbci	r31, 0xF8	; 248
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	ca 01       	movw	r24, r20
    518e:	02 2e       	mov	r0, r18
    5190:	02 c0       	rjmp	.+4      	; 0x5196 <_GLOBAL__sub_I_zero+0x364>
    5192:	88 0f       	add	r24, r24
    5194:	99 1f       	adc	r25, r25
    5196:	0a 94       	dec	r0
    5198:	e2 f7       	brpl	.-8      	; 0x5192 <_GLOBAL__sub_I_zero+0x360>
    519a:	80 78       	andi	r24, 0x80	; 128
    519c:	99 27       	eor	r25, r25
    519e:	06 2e       	mov	r0, r22
    51a0:	02 c0       	rjmp	.+4      	; 0x51a6 <_GLOBAL__sub_I_zero+0x374>
    51a2:	95 95       	asr	r25
    51a4:	87 95       	ror	r24
    51a6:	0a 94       	dec	r0
    51a8:	e2 f7       	brpl	.-8      	; 0x51a2 <_GLOBAL__sub_I_zero+0x370>
    51aa:	90 81       	ld	r25, Z
    51ac:	89 2b       	or	r24, r25
    51ae:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    51b0:	2f 5f       	subi	r18, 0xFF	; 255
    51b2:	3f 4f       	sbci	r19, 0xFF	; 255
    51b4:	28 30       	cpi	r18, 0x08	; 8
    51b6:	31 05       	cpc	r19, r1
    51b8:	49 f7       	brne	.-46     	; 0x518c <_GLOBAL__sub_I_zero+0x35a>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    51ba:	11 96       	adiw	r26, 0x01	; 1
    51bc:	a8 30       	cpi	r26, 0x08	; 8
    51be:	b1 05       	cpc	r27, r1
    51c0:	21 f6       	brne	.-120    	; 0x514a <_GLOBAL__sub_I_zero+0x318>
    51c2:	c8 e6       	ldi	r28, 0x68	; 104
    51c4:	d3 e0       	ldi	r29, 0x03	; 3
    51c6:	a0 e0       	ldi	r26, 0x00	; 0
    51c8:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    51ca:	07 e0       	ldi	r16, 0x07	; 7
    51cc:	10 e0       	ldi	r17, 0x00	; 0
    51ce:	49 91       	ld	r20, Y+
    51d0:	50 e0       	ldi	r21, 0x00	; 0
    51d2:	cd 01       	movw	r24, r26
    51d4:	87 70       	andi	r24, 0x07	; 7
    51d6:	90 78       	andi	r25, 0x80	; 128
    51d8:	99 23       	and	r25, r25
    51da:	24 f4       	brge	.+8      	; 0x51e4 <_GLOBAL__sub_I_zero+0x3b2>
    51dc:	01 97       	sbiw	r24, 0x01	; 1
    51de:	88 6f       	ori	r24, 0xF8	; 248
    51e0:	9f 6f       	ori	r25, 0xFF	; 255
    51e2:	01 96       	adiw	r24, 0x01	; 1
    51e4:	b8 01       	movw	r22, r16
    51e6:	68 1b       	sub	r22, r24
    51e8:	79 0b       	sbc	r23, r25
    51ea:	fd 01       	movw	r30, r26
    51ec:	bb 23       	and	r27, r27
    51ee:	0c f4       	brge	.+2      	; 0x51f2 <_GLOBAL__sub_I_zero+0x3c0>
    51f0:	37 96       	adiw	r30, 0x07	; 7
    51f2:	f5 95       	asr	r31
    51f4:	e7 95       	ror	r30
    51f6:	f5 95       	asr	r31
    51f8:	e7 95       	ror	r30
    51fa:	f5 95       	asr	r31
    51fc:	e7 95       	ror	r30
    51fe:	f6 95       	lsr	r31
    5200:	fe 2f       	mov	r31, r30
    5202:	ee 27       	eor	r30, r30
    5204:	f7 95       	ror	r31
    5206:	e7 95       	ror	r30
    5208:	e9 57       	subi	r30, 0x79	; 121
    520a:	fa 4f       	sbci	r31, 0xFA	; 250
    520c:	20 e0       	ldi	r18, 0x00	; 0
    520e:	30 e0       	ldi	r19, 0x00	; 0
    5210:	ca 01       	movw	r24, r20
    5212:	02 2e       	mov	r0, r18
    5214:	02 c0       	rjmp	.+4      	; 0x521a <_GLOBAL__sub_I_zero+0x3e8>
    5216:	88 0f       	add	r24, r24
    5218:	99 1f       	adc	r25, r25
    521a:	0a 94       	dec	r0
    521c:	e2 f7       	brpl	.-8      	; 0x5216 <_GLOBAL__sub_I_zero+0x3e4>
    521e:	80 78       	andi	r24, 0x80	; 128
    5220:	99 27       	eor	r25, r25
    5222:	06 2e       	mov	r0, r22
    5224:	02 c0       	rjmp	.+4      	; 0x522a <_GLOBAL__sub_I_zero+0x3f8>
    5226:	95 95       	asr	r25
    5228:	87 95       	ror	r24
    522a:	0a 94       	dec	r0
    522c:	e2 f7       	brpl	.-8      	; 0x5226 <_GLOBAL__sub_I_zero+0x3f4>
    522e:	90 81       	ld	r25, Z
    5230:	89 2b       	or	r24, r25
    5232:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    5234:	2f 5f       	subi	r18, 0xFF	; 255
    5236:	3f 4f       	sbci	r19, 0xFF	; 255
    5238:	28 30       	cpi	r18, 0x08	; 8
    523a:	31 05       	cpc	r19, r1
    523c:	49 f7       	brne	.-46     	; 0x5210 <_GLOBAL__sub_I_zero+0x3de>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    523e:	11 96       	adiw	r26, 0x01	; 1
    5240:	a8 30       	cpi	r26, 0x08	; 8
    5242:	b1 05       	cpc	r27, r1
    5244:	21 f6       	brne	.-120    	; 0x51ce <_GLOBAL__sub_I_zero+0x39c>
	public:
	password_scene()
	{
		if(pss){
		write_default();
		variants(xcoord[pointer],ycoord);
    5246:	44 e0       	ldi	r20, 0x04	; 4
    5248:	50 e0       	ldi	r21, 0x00	; 0
    524a:	6c e0       	ldi	r22, 0x0C	; 12
    524c:	70 e0       	ldi	r23, 0x00	; 0
    524e:	8a ee       	ldi	r24, 0xEA	; 234
    5250:	93 e0       	ldi	r25, 0x03	; 3
    5252:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_ZN14password_scene8variantsEii>
	int imgnum=0;
	int xcoord=49;
	int ycoord=2;
	public:
	main_menu_scene()
	{
    5256:	e2 ee       	ldi	r30, 0xE2	; 226
    5258:	f3 e0       	ldi	r31, 0x03	; 3
    525a:	11 82       	std	Z+1, r1	; 0x01
    525c:	10 82       	st	Z, r1
    525e:	13 82       	std	Z+3, r1	; 0x03
    5260:	12 82       	std	Z+2, r1	; 0x02
    5262:	81 e3       	ldi	r24, 0x31	; 49
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	95 83       	std	Z+5, r25	; 0x05
    5268:	84 83       	std	Z+4, r24	; 0x04
    526a:	82 e0       	ldi	r24, 0x02	; 2
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	97 83       	std	Z+7, r25	; 0x07
    5270:	86 83       	std	Z+6, r24	; 0x06
    5272:	c0 eb       	ldi	r28, 0xB0	; 176
    5274:	d1 e0       	ldi	r29, 0x01	; 1
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    5276:	a0 e0       	ldi	r26, 0x00	; 0
    5278:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    527a:	07 e0       	ldi	r16, 0x07	; 7
    527c:	10 e0       	ldi	r17, 0x00	; 0
    527e:	49 91       	ld	r20, Y+
    5280:	50 e0       	ldi	r21, 0x00	; 0
    5282:	cd 01       	movw	r24, r26
    5284:	87 70       	andi	r24, 0x07	; 7
    5286:	90 78       	andi	r25, 0x80	; 128
    5288:	99 23       	and	r25, r25
    528a:	24 f4       	brge	.+8      	; 0x5294 <_GLOBAL__sub_I_zero+0x462>
    528c:	01 97       	sbiw	r24, 0x01	; 1
    528e:	88 6f       	ori	r24, 0xF8	; 248
    5290:	9f 6f       	ori	r25, 0xFF	; 255
    5292:	01 96       	adiw	r24, 0x01	; 1
    5294:	b8 01       	movw	r22, r16
    5296:	68 1b       	sub	r22, r24
    5298:	79 0b       	sbc	r23, r25
    529a:	fd 01       	movw	r30, r26
    529c:	bb 23       	and	r27, r27
    529e:	0c f4       	brge	.+2      	; 0x52a2 <_GLOBAL__sub_I_zero+0x470>
    52a0:	37 96       	adiw	r30, 0x07	; 7
    52a2:	f5 95       	asr	r31
    52a4:	e7 95       	ror	r30
    52a6:	f5 95       	asr	r31
    52a8:	e7 95       	ror	r30
    52aa:	f5 95       	asr	r31
    52ac:	e7 95       	ror	r30
    52ae:	f6 95       	lsr	r31
    52b0:	fe 2f       	mov	r31, r30
    52b2:	ee 27       	eor	r30, r30
    52b4:	f7 95       	ror	r31
    52b6:	e7 95       	ror	r30
    52b8:	e8 56       	subi	r30, 0x68	; 104
    52ba:	fa 4f       	sbci	r31, 0xFA	; 250
    52bc:	20 e0       	ldi	r18, 0x00	; 0
    52be:	30 e0       	ldi	r19, 0x00	; 0
    52c0:	ca 01       	movw	r24, r20
    52c2:	02 2e       	mov	r0, r18
    52c4:	02 c0       	rjmp	.+4      	; 0x52ca <_GLOBAL__sub_I_zero+0x498>
    52c6:	88 0f       	add	r24, r24
    52c8:	99 1f       	adc	r25, r25
    52ca:	0a 94       	dec	r0
    52cc:	e2 f7       	brpl	.-8      	; 0x52c6 <_GLOBAL__sub_I_zero+0x494>
    52ce:	80 78       	andi	r24, 0x80	; 128
    52d0:	99 27       	eor	r25, r25
    52d2:	06 2e       	mov	r0, r22
    52d4:	02 c0       	rjmp	.+4      	; 0x52da <_GLOBAL__sub_I_zero+0x4a8>
    52d6:	95 95       	asr	r25
    52d8:	87 95       	ror	r24
    52da:	0a 94       	dec	r0
    52dc:	e2 f7       	brpl	.-8      	; 0x52d6 <_GLOBAL__sub_I_zero+0x4a4>
    52de:	90 81       	ld	r25, Z
    52e0:	89 2b       	or	r24, r25
    52e2:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    52e4:	2f 5f       	subi	r18, 0xFF	; 255
    52e6:	3f 4f       	sbci	r19, 0xFF	; 255
    52e8:	28 30       	cpi	r18, 0x08	; 8
    52ea:	31 05       	cpc	r19, r1
    52ec:	49 f7       	brne	.-46     	; 0x52c0 <_GLOBAL__sub_I_zero+0x48e>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    52ee:	11 96       	adiw	r26, 0x01	; 1
    52f0:	a0 31       	cpi	r26, 0x10	; 16
    52f2:	b1 05       	cpc	r27, r1
    52f4:	21 f6       	brne	.-120    	; 0x527e <_GLOBAL__sub_I_zero+0x44c>
    52f6:	c0 e4       	ldi	r28, 0x40	; 64
    52f8:	d2 e0       	ldi	r29, 0x02	; 2
    52fa:	a0 e0       	ldi	r26, 0x00	; 0
    52fc:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    52fe:	07 e0       	ldi	r16, 0x07	; 7
    5300:	10 e0       	ldi	r17, 0x00	; 0
    5302:	49 91       	ld	r20, Y+
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	cd 01       	movw	r24, r26
    5308:	87 70       	andi	r24, 0x07	; 7
    530a:	90 78       	andi	r25, 0x80	; 128
    530c:	99 23       	and	r25, r25
    530e:	24 f4       	brge	.+8      	; 0x5318 <_GLOBAL__sub_I_zero+0x4e6>
    5310:	01 97       	sbiw	r24, 0x01	; 1
    5312:	88 6f       	ori	r24, 0xF8	; 248
    5314:	9f 6f       	ori	r25, 0xFF	; 255
    5316:	01 96       	adiw	r24, 0x01	; 1
    5318:	b8 01       	movw	r22, r16
    531a:	68 1b       	sub	r22, r24
    531c:	79 0b       	sbc	r23, r25
    531e:	fd 01       	movw	r30, r26
    5320:	bb 23       	and	r27, r27
    5322:	0c f4       	brge	.+2      	; 0x5326 <_GLOBAL__sub_I_zero+0x4f4>
    5324:	37 96       	adiw	r30, 0x07	; 7
    5326:	f5 95       	asr	r31
    5328:	e7 95       	ror	r30
    532a:	f5 95       	asr	r31
    532c:	e7 95       	ror	r30
    532e:	f5 95       	asr	r31
    5330:	e7 95       	ror	r30
    5332:	f6 95       	lsr	r31
    5334:	fe 2f       	mov	r31, r30
    5336:	ee 27       	eor	r30, r30
    5338:	f7 95       	ror	r31
    533a:	e7 95       	ror	r30
    533c:	e0 52       	subi	r30, 0x20	; 32
    533e:	fa 4f       	sbci	r31, 0xFA	; 250
    5340:	20 e0       	ldi	r18, 0x00	; 0
    5342:	30 e0       	ldi	r19, 0x00	; 0
    5344:	ca 01       	movw	r24, r20
    5346:	02 2e       	mov	r0, r18
    5348:	02 c0       	rjmp	.+4      	; 0x534e <_GLOBAL__sub_I_zero+0x51c>
    534a:	88 0f       	add	r24, r24
    534c:	99 1f       	adc	r25, r25
    534e:	0a 94       	dec	r0
    5350:	e2 f7       	brpl	.-8      	; 0x534a <_GLOBAL__sub_I_zero+0x518>
    5352:	80 78       	andi	r24, 0x80	; 128
    5354:	99 27       	eor	r25, r25
    5356:	06 2e       	mov	r0, r22
    5358:	02 c0       	rjmp	.+4      	; 0x535e <_GLOBAL__sub_I_zero+0x52c>
    535a:	95 95       	asr	r25
    535c:	87 95       	ror	r24
    535e:	0a 94       	dec	r0
    5360:	e2 f7       	brpl	.-8      	; 0x535a <_GLOBAL__sub_I_zero+0x528>
    5362:	90 81       	ld	r25, Z
    5364:	89 2b       	or	r24, r25
    5366:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    5368:	2f 5f       	subi	r18, 0xFF	; 255
    536a:	3f 4f       	sbci	r19, 0xFF	; 255
    536c:	28 30       	cpi	r18, 0x08	; 8
    536e:	31 05       	cpc	r19, r1
    5370:	49 f7       	brne	.-46     	; 0x5344 <_GLOBAL__sub_I_zero+0x512>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    5372:	11 96       	adiw	r26, 0x01	; 1
    5374:	a0 31       	cpi	r26, 0x10	; 16
    5376:	b1 05       	cpc	r27, r1
    5378:	21 f6       	brne	.-120    	; 0x5302 <_GLOBAL__sub_I_zero+0x4d0>
    537a:	40 e0       	ldi	r20, 0x00	; 0
    537c:	50 e0       	ldi	r21, 0x00	; 0
    537e:	9a 01       	movw	r18, r20
    5380:	55 23       	and	r21, r21
    5382:	14 f4       	brge	.+4      	; 0x5388 <_GLOBAL__sub_I_zero+0x556>
    5384:	29 5f       	subi	r18, 0xF9	; 249
    5386:	3f 4f       	sbci	r19, 0xFF	; 255
    5388:	35 95       	asr	r19
    538a:	27 95       	ror	r18
    538c:	35 95       	asr	r19
    538e:	27 95       	ror	r18
    5390:	35 95       	asr	r19
    5392:	27 95       	ror	r18
    5394:	2e 5f       	subi	r18, 0xFE	; 254
    5396:	3f 4f       	sbci	r19, 0xFF	; 255
    5398:	36 95       	lsr	r19
    539a:	32 2f       	mov	r19, r18
    539c:	22 27       	eor	r18, r18
    539e:	37 95       	ror	r19
    53a0:	27 95       	ror	r18
    53a2:	f9 01       	movw	r30, r18
    53a4:	e4 5d       	subi	r30, 0xD4	; 212
    53a6:	fb 4f       	sbci	r31, 0xFB	; 251
    53a8:	24 5b       	subi	r18, 0xB4	; 180
    53aa:	3b 4f       	sbci	r19, 0xFB	; 251
    53ac:	cf 01       	movw	r24, r30
    53ae:	08 96       	adiw	r24, 0x08	; 8
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
    53b0:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
    53b2:	8e 17       	cp	r24, r30
    53b4:	9f 07       	cpc	r25, r31
    53b6:	e1 f7       	brne	.-8      	; 0x53b0 <_GLOBAL__sub_I_zero+0x57e>
    53b8:	fc 01       	movw	r30, r24
void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
    53ba:	82 17       	cp	r24, r18
    53bc:	93 07       	cpc	r25, r19
    53be:	b1 f7       	brne	.-20     	; 0x53ac <_GLOBAL__sub_I_zero+0x57a>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
    53c0:	4f 5f       	subi	r20, 0xFF	; 255
    53c2:	5f 4f       	sbci	r21, 0xFF	; 255
    53c4:	40 32       	cpi	r20, 0x20	; 32
    53c6:	51 05       	cpc	r21, r1
    53c8:	d1 f6       	brne	.-76     	; 0x537e <_GLOBAL__sub_I_zero+0x54c>
    53ca:	0f 2e       	mov	r0, r31
    53cc:	f0 ed       	ldi	r31, 0xD0	; 208
    53ce:	af 2e       	mov	r10, r31
    53d0:	f2 e0       	ldi	r31, 0x02	; 2
    53d2:	bf 2e       	mov	r11, r31
    53d4:	f0 2d       	mov	r31, r0
    53d6:	e1 2c       	mov	r14, r1
    53d8:	f1 2c       	mov	r15, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    53da:	0f 2e       	mov	r0, r31
    53dc:	f7 e0       	ldi	r31, 0x07	; 7
    53de:	cf 2e       	mov	r12, r31
    53e0:	d1 2c       	mov	r13, r1
    53e2:	f0 2d       	mov	r31, r0
    53e4:	c7 01       	movw	r24, r14
    53e6:	87 70       	andi	r24, 0x07	; 7
    53e8:	90 78       	andi	r25, 0x80	; 128
    53ea:	99 23       	and	r25, r25
    53ec:	24 f4       	brge	.+8      	; 0x53f6 <_GLOBAL__sub_I_zero+0x5c4>
    53ee:	01 97       	sbiw	r24, 0x01	; 1
    53f0:	88 6f       	ori	r24, 0xF8	; 248
    53f2:	9f 6f       	ori	r25, 0xFF	; 255
    53f4:	01 96       	adiw	r24, 0x01	; 1
    53f6:	b6 01       	movw	r22, r12
    53f8:	68 1b       	sub	r22, r24
    53fa:	79 0b       	sbc	r23, r25
    53fc:	c7 01       	movw	r24, r14
    53fe:	ff 20       	and	r15, r15
    5400:	0c f4       	brge	.+2      	; 0x5404 <_GLOBAL__sub_I_zero+0x5d2>
    5402:	07 96       	adiw	r24, 0x07	; 7
    5404:	8c 01       	movw	r16, r24
    5406:	15 95       	asr	r17
    5408:	07 95       	ror	r16
    540a:	15 95       	asr	r17
    540c:	07 95       	ror	r16
    540e:	15 95       	asr	r17
    5410:	07 95       	ror	r16
    5412:	0e 5f       	subi	r16, 0xFE	; 254
    5414:	1f 4f       	sbci	r17, 0xFF	; 255
    5416:	16 95       	lsr	r17
    5418:	10 2f       	mov	r17, r16
    541a:	00 27       	eor	r16, r16
    541c:	17 95       	ror	r17
    541e:	07 95       	ror	r16
    5420:	d8 01       	movw	r26, r16
    5422:	a4 5d       	subi	r26, 0xD4	; 212
    5424:	bb 4f       	sbci	r27, 0xFB	; 251
    5426:	04 5b       	subi	r16, 0xB4	; 180
    5428:	1b 4f       	sbci	r17, 0xFB	; 251
    542a:	e5 01       	movw	r28, r10
    542c:	49 91       	ld	r20, Y+
    542e:	50 e0       	ldi	r21, 0x00	; 0
    5430:	fd 01       	movw	r30, r26
    5432:	20 e0       	ldi	r18, 0x00	; 0
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	ca 01       	movw	r24, r20
    5438:	02 2e       	mov	r0, r18
    543a:	02 c0       	rjmp	.+4      	; 0x5440 <_GLOBAL__sub_I_zero+0x60e>
    543c:	88 0f       	add	r24, r24
    543e:	99 1f       	adc	r25, r25
    5440:	0a 94       	dec	r0
    5442:	e2 f7       	brpl	.-8      	; 0x543c <_GLOBAL__sub_I_zero+0x60a>
    5444:	80 78       	andi	r24, 0x80	; 128
    5446:	99 27       	eor	r25, r25
    5448:	06 2e       	mov	r0, r22
    544a:	02 c0       	rjmp	.+4      	; 0x5450 <_GLOBAL__sub_I_zero+0x61e>
    544c:	95 95       	asr	r25
    544e:	87 95       	ror	r24
    5450:	0a 94       	dec	r0
    5452:	e2 f7       	brpl	.-8      	; 0x544c <_GLOBAL__sub_I_zero+0x61a>
    5454:	90 81       	ld	r25, Z
    5456:	89 2b       	or	r24, r25
    5458:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    545a:	2f 5f       	subi	r18, 0xFF	; 255
    545c:	3f 4f       	sbci	r19, 0xFF	; 255
    545e:	28 30       	cpi	r18, 0x08	; 8
    5460:	31 05       	cpc	r19, r1
    5462:	49 f7       	brne	.-46     	; 0x5436 <_GLOBAL__sub_I_zero+0x604>
    5464:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    5466:	a0 17       	cp	r26, r16
    5468:	b1 07       	cpc	r27, r17
    546a:	01 f7       	brne	.-64     	; 0x542c <_GLOBAL__sub_I_zero+0x5fa>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    546c:	ff ef       	ldi	r31, 0xFF	; 255
    546e:	ef 1a       	sub	r14, r31
    5470:	ff 0a       	sbc	r15, r31
    5472:	84 e0       	ldi	r24, 0x04	; 4
    5474:	a8 0e       	add	r10, r24
    5476:	b1 1c       	adc	r11, r1
    5478:	e0 e2       	ldi	r30, 0x20	; 32
    547a:	ee 16       	cp	r14, r30
    547c:	f1 04       	cpc	r15, r1
    547e:	09 f0       	breq	.+2      	; 0x5482 <_GLOBAL__sub_I_zero+0x650>
    5480:	b1 cf       	rjmp	.-158    	; 0x53e4 <_GLOBAL__sub_I_zero+0x5b2>
private:
int curlvl;
public:
Batary()
{
	DDRB=0x00;
    5482:	14 b8       	out	0x04, r1	; 4
	PORTB=0x0F;	
    5484:	8f e0       	ldi	r24, 0x0F	; 15
    5486:	85 b9       	out	0x05, r24	; 5
}

void refreshlvl()
{
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
    5488:	83 b1       	in	r24, 0x03	; 3
	printlvltoOLEDbufer();
}

void refreshlvl()
{
	int kf=0;
    548a:	80 fb       	bst	r24, 0
    548c:	88 24       	eor	r8, r8
    548e:	80 f8       	bld	r8, 0
    5490:	91 2c       	mov	r9, r1
    5492:	c4 01       	movw	r24, r8
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
    5494:	19 99       	sbic	0x03, 1	; 3
    5496:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>2)&0b00000001==1) kf++;
    5498:	1a 99       	sbic	0x03, 2	; 3
    549a:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>3)&0b00000001==1) kf++;
    549c:	1b 99       	sbic	0x03, 3	; 3
    549e:	01 96       	adiw	r24, 0x01	; 1
	curlvl=kf;
    54a0:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <__data_end+0x1>
    54a4:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <__data_end>
Batary()
{
	DDRB=0x00;
	PORTB=0x0F;	
	refreshlvl();
	printlvltoOLEDbufer();
    54a8:	8a ed       	ldi	r24, 0xDA	; 218
    54aa:	93 e0       	ldi	r25, 0x03	; 3
    54ac:	00 d8       	rcall	.-4096   	; 0x44ae <_ZN6Batary19printlvltoOLEDbuferEv>
	 //_delay_ms(1000);
	 
	// _delay_ms(100);
     check();
	}
}
    54ae:	df 91       	pop	r29
    54b0:	cf 91       	pop	r28
    54b2:	1f 91       	pop	r17
    54b4:	0f 91       	pop	r16
    54b6:	ff 90       	pop	r15
    54b8:	ef 90       	pop	r14
    54ba:	df 90       	pop	r13
    54bc:	cf 90       	pop	r12
    54be:	bf 90       	pop	r11
    54c0:	af 90       	pop	r10
    54c2:	9f 90       	pop	r9
    54c4:	8f 90       	pop	r8
    54c6:	08 95       	ret

000054c8 <__tablejump2__>:
    54c8:	ee 0f       	add	r30, r30
    54ca:	ff 1f       	adc	r31, r31
    54cc:	00 24       	eor	r0, r0
    54ce:	00 1c       	adc	r0, r0
    54d0:	0b be       	out	0x3b, r0	; 59
    54d2:	07 90       	elpm	r0, Z+
    54d4:	f6 91       	elpm	r31, Z
    54d6:	e0 2d       	mov	r30, r0
    54d8:	09 94       	ijmp

000054da <_exit>:
    54da:	f8 94       	cli

000054dc <__stop_program>:
    54dc:	ff cf       	rjmp	.-2      	; 0x54dc <__stop_program>
