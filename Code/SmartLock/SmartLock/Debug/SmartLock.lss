
SmartLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800100  0000130c  000013a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000130c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000403  008001a2  008001a2  00001442  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021cd  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4e  00000000  00000000  000036c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d2e  00000000  00000000  0000410f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00004e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007dc  00000000  00000000  00004f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001387  00000000  00000000  000056f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000318  00000000  00000000  00006a7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	e3 c2       	rjmp	.+1478   	; 0x5d8 <__vector_4>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
	...

0000008c <__ctors_start>:
      8c:	5b 09       	sbc	r21, r11

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d0 e4       	ldi	r29, 0x40	; 64
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	11 e0       	ldi	r17, 0x01	; 1
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	ec e0       	ldi	r30, 0x0C	; 12
      a2:	f3 e1       	ldi	r31, 0x13	; 19
      a4:	00 e0       	ldi	r16, 0x00	; 0
      a6:	0b bf       	out	0x3b, r16	; 59
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
      aa:	07 90       	elpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a2 3a       	cpi	r26, 0xA2	; 162
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
      b4:	25 e0       	ldi	r18, 0x05	; 5
      b6:	a2 ea       	ldi	r26, 0xA2	; 162
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a5 3a       	cpi	r26, 0xA5	; 165
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
      c4:	10 e0       	ldi	r17, 0x00	; 0
      c6:	c7 e4       	ldi	r28, 0x47	; 71
      c8:	d0 e0       	ldi	r29, 0x00	; 0
      ca:	04 c0       	rjmp	.+8      	; 0xd4 <__do_global_ctors+0x10>
      cc:	21 97       	sbiw	r28, 0x01	; 1
      ce:	fe 01       	movw	r30, r28
      d0:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__tablejump2__>
      d4:	c6 34       	cpi	r28, 0x46	; 70
      d6:	d1 07       	cpc	r29, r17
      d8:	c9 f7       	brne	.-14     	; 0xcc <__do_global_ctors+0x8>
      da:	ce d6       	rcall	.+3484   	; 0xe78 <main>
      dc:	0c 94 84 09 	jmp	0x1308	; 0x1308 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <_ZN4OLEDC1E3TWI>:
{
private:
uint8_t  oled_bufer[(OLED_HEIGHT/8)*OLED_WIDTH];
TWI wire;
public:
OLED(TWI _wire)
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
	public:
	TWI(){}

	void twi_Init(void)
	{
		TWBR=(((CPU_F)/(SCL_F)-16)/2);
      e6:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
		TWSR=0;
      ea:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		while(!(TWCR & (1<<TWINT))){};
	}

	void twi_Start(void)
	{
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
      ee:	24 ea       	ldi	r18, 0xA4	; 164
      f0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
      f4:	ec eb       	ldi	r30, 0xBC	; 188
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	20 81       	ld	r18, Z
      fa:	22 23       	and	r18, r18
      fc:	ec f7       	brge	.-6      	; 0xf8 <_ZN4OLEDC1E3TWI+0x16>
		TWSR=0;
	}

	void twi_SendAdress(void) 
	{
		TWDR=(Dev_Adr<<1)|0;
      fe:	28 e7       	ldi	r18, 0x78	; 120
     100:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR=(1<<TWINT)|(1<<TWEN);
     104:	24 e8       	ldi	r18, 0x84	; 132
     106:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
     10a:	ec eb       	ldi	r30, 0xBC	; 188
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	20 81       	ld	r18, Z
     110:	22 23       	and	r18, r18
     112:	ec f7       	brge	.-6      	; 0x10e <_ZN4OLEDC1E3TWI+0x2c>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     114:	20 e8       	ldi	r18, 0x80	; 128
     116:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     11a:	24 e8       	ldi	r18, 0x84	; 132
     11c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     120:	ec eb       	ldi	r30, 0xBC	; 188
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	20 81       	ld	r18, Z
     126:	22 23       	and	r18, r18
     128:	ec f7       	brge	.-6      	; 0x124 <_ZN4OLEDC1E3TWI+0x42>

	TWDR=command;							
     12a:	28 ea       	ldi	r18, 0xA8	; 168
     12c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     130:	24 e8       	ldi	r18, 0x84	; 132
     132:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     136:	ec eb       	ldi	r30, 0xBC	; 188
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	20 81       	ld	r18, Z
     13c:	22 23       	and	r18, r18
     13e:	ec f7       	brge	.-6      	; 0x13a <_ZN4OLEDC1E3TWI+0x58>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     140:	20 e8       	ldi	r18, 0x80	; 128
     142:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     146:	24 e8       	ldi	r18, 0x84	; 132
     148:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     14c:	ec eb       	ldi	r30, 0xBC	; 188
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	20 81       	ld	r18, Z
     152:	22 23       	and	r18, r18
     154:	ec f7       	brge	.-6      	; 0x150 <_ZN4OLEDC1E3TWI+0x6e>

	TWDR=command;							
     156:	2f e3       	ldi	r18, 0x3F	; 63
     158:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     15c:	24 e8       	ldi	r18, 0x84	; 132
     15e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     162:	ec eb       	ldi	r30, 0xBC	; 188
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	20 81       	ld	r18, Z
     168:	22 23       	and	r18, r18
     16a:	ec f7       	brge	.-6      	; 0x166 <_ZN4OLEDC1E3TWI+0x84>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     16c:	20 e8       	ldi	r18, 0x80	; 128
     16e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     172:	24 e8       	ldi	r18, 0x84	; 132
     174:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     178:	ec eb       	ldi	r30, 0xBC	; 188
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	20 81       	ld	r18, Z
     17e:	22 23       	and	r18, r18
     180:	ec f7       	brge	.-6      	; 0x17c <_ZN4OLEDC1E3TWI+0x9a>

	TWDR=command;							
     182:	23 ed       	ldi	r18, 0xD3	; 211
     184:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     188:	24 e8       	ldi	r18, 0x84	; 132
     18a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     18e:	ec eb       	ldi	r30, 0xBC	; 188
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	20 81       	ld	r18, Z
     194:	22 23       	and	r18, r18
     196:	ec f7       	brge	.-6      	; 0x192 <_ZN4OLEDC1E3TWI+0xb0>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     198:	20 e8       	ldi	r18, 0x80	; 128
     19a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     19e:	24 e8       	ldi	r18, 0x84	; 132
     1a0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1a4:	ec eb       	ldi	r30, 0xBC	; 188
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	20 81       	ld	r18, Z
     1aa:	22 23       	and	r18, r18
     1ac:	ec f7       	brge	.-6      	; 0x1a8 <_ZN4OLEDC1E3TWI+0xc6>

	TWDR=command;							
     1ae:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1b2:	24 e8       	ldi	r18, 0x84	; 132
     1b4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1b8:	ec eb       	ldi	r30, 0xBC	; 188
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	20 81       	ld	r18, Z
     1be:	22 23       	and	r18, r18
     1c0:	ec f7       	brge	.-6      	; 0x1bc <_ZN4OLEDC1E3TWI+0xda>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     1c2:	20 e8       	ldi	r18, 0x80	; 128
     1c4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1c8:	24 e8       	ldi	r18, 0x84	; 132
     1ca:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1ce:	ec eb       	ldi	r30, 0xBC	; 188
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	20 81       	ld	r18, Z
     1d4:	22 23       	and	r18, r18
     1d6:	ec f7       	brge	.-6      	; 0x1d2 <_ZN4OLEDC1E3TWI+0xf0>

	TWDR=command;							
     1d8:	20 e4       	ldi	r18, 0x40	; 64
     1da:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1de:	24 e8       	ldi	r18, 0x84	; 132
     1e0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1e4:	ec eb       	ldi	r30, 0xBC	; 188
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	20 81       	ld	r18, Z
     1ea:	22 23       	and	r18, r18
     1ec:	ec f7       	brge	.-6      	; 0x1e8 <_ZN4OLEDC1E3TWI+0x106>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     1ee:	20 e8       	ldi	r18, 0x80	; 128
     1f0:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1f4:	24 e8       	ldi	r18, 0x84	; 132
     1f6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1fa:	ec eb       	ldi	r30, 0xBC	; 188
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	20 81       	ld	r18, Z
     200:	22 23       	and	r18, r18
     202:	ec f7       	brge	.-6      	; 0x1fe <_ZN4OLEDC1E3TWI+0x11c>

	TWDR=command;							
     204:	21 ea       	ldi	r18, 0xA1	; 161
     206:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     20a:	24 e8       	ldi	r18, 0x84	; 132
     20c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     210:	ec eb       	ldi	r30, 0xBC	; 188
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	20 81       	ld	r18, Z
     216:	22 23       	and	r18, r18
     218:	ec f7       	brge	.-6      	; 0x214 <_ZN4OLEDC1E3TWI+0x132>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     21a:	20 e8       	ldi	r18, 0x80	; 128
     21c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     220:	24 e8       	ldi	r18, 0x84	; 132
     222:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     226:	ec eb       	ldi	r30, 0xBC	; 188
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	20 81       	ld	r18, Z
     22c:	22 23       	and	r18, r18
     22e:	ec f7       	brge	.-6      	; 0x22a <_ZN4OLEDC1E3TWI+0x148>

	TWDR=command;							
     230:	28 ec       	ldi	r18, 0xC8	; 200
     232:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     236:	24 e8       	ldi	r18, 0x84	; 132
     238:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     23c:	ec eb       	ldi	r30, 0xBC	; 188
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	20 81       	ld	r18, Z
     242:	22 23       	and	r18, r18
     244:	ec f7       	brge	.-6      	; 0x240 <_ZN4OLEDC1E3TWI+0x15e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     246:	20 e8       	ldi	r18, 0x80	; 128
     248:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     24c:	24 e8       	ldi	r18, 0x84	; 132
     24e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     252:	ec eb       	ldi	r30, 0xBC	; 188
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	20 81       	ld	r18, Z
     258:	22 23       	and	r18, r18
     25a:	ec f7       	brge	.-6      	; 0x256 <_ZN4OLEDC1E3TWI+0x174>

	TWDR=command;							
     25c:	2a ed       	ldi	r18, 0xDA	; 218
     25e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     262:	24 e8       	ldi	r18, 0x84	; 132
     264:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     268:	ec eb       	ldi	r30, 0xBC	; 188
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	20 81       	ld	r18, Z
     26e:	22 23       	and	r18, r18
     270:	ec f7       	brge	.-6      	; 0x26c <_ZN4OLEDC1E3TWI+0x18a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     272:	20 e8       	ldi	r18, 0x80	; 128
     274:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     278:	24 e8       	ldi	r18, 0x84	; 132
     27a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     27e:	ec eb       	ldi	r30, 0xBC	; 188
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	20 81       	ld	r18, Z
     284:	22 23       	and	r18, r18
     286:	ec f7       	brge	.-6      	; 0x282 <_ZN4OLEDC1E3TWI+0x1a0>

	TWDR=command;							
     288:	22 e1       	ldi	r18, 0x12	; 18
     28a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     28e:	24 e8       	ldi	r18, 0x84	; 132
     290:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     294:	ec eb       	ldi	r30, 0xBC	; 188
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	20 81       	ld	r18, Z
     29a:	22 23       	and	r18, r18
     29c:	ec f7       	brge	.-6      	; 0x298 <_ZN4OLEDC1E3TWI+0x1b6>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     29e:	20 e8       	ldi	r18, 0x80	; 128
     2a0:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2a4:	24 e8       	ldi	r18, 0x84	; 132
     2a6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2aa:	ec eb       	ldi	r30, 0xBC	; 188
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	20 81       	ld	r18, Z
     2b0:	22 23       	and	r18, r18
     2b2:	ec f7       	brge	.-6      	; 0x2ae <_ZN4OLEDC1E3TWI+0x1cc>

	TWDR=command;							
     2b4:	21 e8       	ldi	r18, 0x81	; 129
     2b6:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2ba:	24 e8       	ldi	r18, 0x84	; 132
     2bc:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2c0:	ec eb       	ldi	r30, 0xBC	; 188
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	20 81       	ld	r18, Z
     2c6:	22 23       	and	r18, r18
     2c8:	ec f7       	brge	.-6      	; 0x2c4 <_ZN4OLEDC1E3TWI+0x1e2>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     2ca:	20 e8       	ldi	r18, 0x80	; 128
     2cc:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2d0:	24 e8       	ldi	r18, 0x84	; 132
     2d2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2d6:	ec eb       	ldi	r30, 0xBC	; 188
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	20 81       	ld	r18, Z
     2dc:	22 23       	and	r18, r18
     2de:	ec f7       	brge	.-6      	; 0x2da <_ZN4OLEDC1E3TWI+0x1f8>

	TWDR=command;							
     2e0:	2f ef       	ldi	r18, 0xFF	; 255
     2e2:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2e6:	24 e8       	ldi	r18, 0x84	; 132
     2e8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2ec:	ec eb       	ldi	r30, 0xBC	; 188
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	20 81       	ld	r18, Z
     2f2:	22 23       	and	r18, r18
     2f4:	ec f7       	brge	.-6      	; 0x2f0 <_ZN4OLEDC1E3TWI+0x20e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     2f6:	20 e8       	ldi	r18, 0x80	; 128
     2f8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2fc:	24 e8       	ldi	r18, 0x84	; 132
     2fe:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     302:	ec eb       	ldi	r30, 0xBC	; 188
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	20 81       	ld	r18, Z
     308:	22 23       	and	r18, r18
     30a:	ec f7       	brge	.-6      	; 0x306 <_ZN4OLEDC1E3TWI+0x224>

	TWDR=command;							
     30c:	24 ea       	ldi	r18, 0xA4	; 164
     30e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     312:	24 e8       	ldi	r18, 0x84	; 132
     314:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     318:	ec eb       	ldi	r30, 0xBC	; 188
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	20 81       	ld	r18, Z
     31e:	22 23       	and	r18, r18
     320:	ec f7       	brge	.-6      	; 0x31c <_ZN4OLEDC1E3TWI+0x23a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     322:	20 e8       	ldi	r18, 0x80	; 128
     324:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     328:	24 e8       	ldi	r18, 0x84	; 132
     32a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     32e:	ec eb       	ldi	r30, 0xBC	; 188
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	20 81       	ld	r18, Z
     334:	22 23       	and	r18, r18
     336:	ec f7       	brge	.-6      	; 0x332 <_ZN4OLEDC1E3TWI+0x250>

	TWDR=command;							
     338:	26 ea       	ldi	r18, 0xA6	; 166
     33a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     33e:	24 e8       	ldi	r18, 0x84	; 132
     340:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     344:	ec eb       	ldi	r30, 0xBC	; 188
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	20 81       	ld	r18, Z
     34a:	22 23       	and	r18, r18
     34c:	ec f7       	brge	.-6      	; 0x348 <_ZN4OLEDC1E3TWI+0x266>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     34e:	20 e8       	ldi	r18, 0x80	; 128
     350:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     354:	24 e8       	ldi	r18, 0x84	; 132
     356:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     35a:	ec eb       	ldi	r30, 0xBC	; 188
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	20 81       	ld	r18, Z
     360:	22 23       	and	r18, r18
     362:	ec f7       	brge	.-6      	; 0x35e <_ZN4OLEDC1E3TWI+0x27c>

	TWDR=command;							
     364:	25 ed       	ldi	r18, 0xD5	; 213
     366:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     36a:	24 e8       	ldi	r18, 0x84	; 132
     36c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     370:	ec eb       	ldi	r30, 0xBC	; 188
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	20 81       	ld	r18, Z
     376:	22 23       	and	r18, r18
     378:	ec f7       	brge	.-6      	; 0x374 <_ZN4OLEDC1E3TWI+0x292>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     37a:	20 e8       	ldi	r18, 0x80	; 128
     37c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     380:	24 e8       	ldi	r18, 0x84	; 132
     382:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     386:	ec eb       	ldi	r30, 0xBC	; 188
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	20 81       	ld	r18, Z
     38c:	22 23       	and	r18, r18
     38e:	ec f7       	brge	.-6      	; 0x38a <_ZN4OLEDC1E3TWI+0x2a8>

	TWDR=command;							
     390:	20 e8       	ldi	r18, 0x80	; 128
     392:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     396:	24 e8       	ldi	r18, 0x84	; 132
     398:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     39c:	ec eb       	ldi	r30, 0xBC	; 188
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	20 81       	ld	r18, Z
     3a2:	22 23       	and	r18, r18
     3a4:	ec f7       	brge	.-6      	; 0x3a0 <_ZN4OLEDC1E3TWI+0x2be>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     3a6:	20 e8       	ldi	r18, 0x80	; 128
     3a8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3ac:	24 e8       	ldi	r18, 0x84	; 132
     3ae:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3b2:	ec eb       	ldi	r30, 0xBC	; 188
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	20 81       	ld	r18, Z
     3b8:	22 23       	and	r18, r18
     3ba:	ec f7       	brge	.-6      	; 0x3b6 <_ZN4OLEDC1E3TWI+0x2d4>

	TWDR=command;							
     3bc:	2d e8       	ldi	r18, 0x8D	; 141
     3be:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3c2:	24 e8       	ldi	r18, 0x84	; 132
     3c4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3c8:	ec eb       	ldi	r30, 0xBC	; 188
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	20 81       	ld	r18, Z
     3ce:	22 23       	and	r18, r18
     3d0:	ec f7       	brge	.-6      	; 0x3cc <_ZN4OLEDC1E3TWI+0x2ea>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     3d2:	20 e8       	ldi	r18, 0x80	; 128
     3d4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3d8:	24 e8       	ldi	r18, 0x84	; 132
     3da:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3de:	ec eb       	ldi	r30, 0xBC	; 188
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	20 81       	ld	r18, Z
     3e4:	22 23       	and	r18, r18
     3e6:	ec f7       	brge	.-6      	; 0x3e2 <_ZN4OLEDC1E3TWI+0x300>

	TWDR=command;							
     3e8:	24 e1       	ldi	r18, 0x14	; 20
     3ea:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3ee:	24 e8       	ldi	r18, 0x84	; 132
     3f0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3f4:	ec eb       	ldi	r30, 0xBC	; 188
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	20 81       	ld	r18, Z
     3fa:	22 23       	and	r18, r18
     3fc:	ec f7       	brge	.-6      	; 0x3f8 <_ZN4OLEDC1E3TWI+0x316>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     3fe:	20 e8       	ldi	r18, 0x80	; 128
     400:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     404:	24 e8       	ldi	r18, 0x84	; 132
     406:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     40a:	ec eb       	ldi	r30, 0xBC	; 188
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	20 81       	ld	r18, Z
     410:	22 23       	and	r18, r18
     412:	ec f7       	brge	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

	TWDR=command;							
     414:	2f ea       	ldi	r18, 0xAF	; 175
     416:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     41a:	24 e8       	ldi	r18, 0x84	; 132
     41c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     420:	ec eb       	ldi	r30, 0xBC	; 188
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	20 81       	ld	r18, Z
     426:	22 23       	and	r18, r18
     428:	ec f7       	brge	.-6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     42a:	20 e8       	ldi	r18, 0x80	; 128
     42c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     430:	24 e8       	ldi	r18, 0x84	; 132
     432:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     436:	ec eb       	ldi	r30, 0xBC	; 188
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	20 81       	ld	r18, Z
     43c:	22 23       	and	r18, r18
     43e:	ec f7       	brge	.-6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

	TWDR=command;							
     440:	20 e2       	ldi	r18, 0x20	; 32
     442:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     446:	24 e8       	ldi	r18, 0x84	; 132
     448:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     44c:	ec eb       	ldi	r30, 0xBC	; 188
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	20 81       	ld	r18, Z
     452:	22 23       	and	r18, r18
     454:	ec f7       	brge	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     456:	20 e8       	ldi	r18, 0x80	; 128
     458:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     45c:	24 e8       	ldi	r18, 0x84	; 132
     45e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     462:	ec eb       	ldi	r30, 0xBC	; 188
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	20 81       	ld	r18, Z
     468:	22 23       	and	r18, r18
     46a:	ec f7       	brge	.-6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>

	TWDR=command;							
     46c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     470:	24 e8       	ldi	r18, 0x84	; 132
     472:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     476:	ec eb       	ldi	r30, 0xBC	; 188
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	20 81       	ld	r18, Z
     47c:	22 23       	and	r18, r18
     47e:	ec f7       	brge	.-6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     480:	20 e8       	ldi	r18, 0x80	; 128
     482:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     486:	24 e8       	ldi	r18, 0x84	; 132
     488:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     48c:	ec eb       	ldi	r30, 0xBC	; 188
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	20 81       	ld	r18, Z
     492:	22 23       	and	r18, r18
     494:	ec f7       	brge	.-6      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>

	TWDR=command;							
     496:	21 e2       	ldi	r18, 0x21	; 33
     498:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     49c:	24 e8       	ldi	r18, 0x84	; 132
     49e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4a2:	ec eb       	ldi	r30, 0xBC	; 188
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	20 81       	ld	r18, Z
     4a8:	22 23       	and	r18, r18
     4aa:	ec f7       	brge	.-6      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     4ac:	20 e8       	ldi	r18, 0x80	; 128
     4ae:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4b2:	24 e8       	ldi	r18, 0x84	; 132
     4b4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4b8:	ec eb       	ldi	r30, 0xBC	; 188
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	20 81       	ld	r18, Z
     4be:	22 23       	and	r18, r18
     4c0:	ec f7       	brge	.-6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>

	TWDR=command;							
     4c2:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4c6:	24 e8       	ldi	r18, 0x84	; 132
     4c8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4cc:	ec eb       	ldi	r30, 0xBC	; 188
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	20 81       	ld	r18, Z
     4d2:	22 23       	and	r18, r18
     4d4:	ec f7       	brge	.-6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     4d6:	20 e8       	ldi	r18, 0x80	; 128
     4d8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4dc:	24 e8       	ldi	r18, 0x84	; 132
     4de:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4e2:	ec eb       	ldi	r30, 0xBC	; 188
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	20 81       	ld	r18, Z
     4e8:	22 23       	and	r18, r18
     4ea:	ec f7       	brge	.-6      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>

	TWDR=command;							
     4ec:	2f e7       	ldi	r18, 0x7F	; 127
     4ee:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4f2:	24 e8       	ldi	r18, 0x84	; 132
     4f4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4f8:	ec eb       	ldi	r30, 0xBC	; 188
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	20 81       	ld	r18, Z
     4fe:	22 23       	and	r18, r18
     500:	ec f7       	brge	.-6      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     502:	20 e8       	ldi	r18, 0x80	; 128
     504:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     508:	24 e8       	ldi	r18, 0x84	; 132
     50a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     50e:	ec eb       	ldi	r30, 0xBC	; 188
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	20 81       	ld	r18, Z
     514:	22 23       	and	r18, r18
     516:	ec f7       	brge	.-6      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>

	TWDR=command;							
     518:	22 e2       	ldi	r18, 0x22	; 34
     51a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     51e:	24 e8       	ldi	r18, 0x84	; 132
     520:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     524:	ec eb       	ldi	r30, 0xBC	; 188
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	20 81       	ld	r18, Z
     52a:	22 23       	and	r18, r18
     52c:	ec f7       	brge	.-6      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     52e:	20 e8       	ldi	r18, 0x80	; 128
     530:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     534:	24 e8       	ldi	r18, 0x84	; 132
     536:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     53a:	ec eb       	ldi	r30, 0xBC	; 188
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	20 81       	ld	r18, Z
     540:	22 23       	and	r18, r18
     542:	ec f7       	brge	.-6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>

	TWDR=command;							
     544:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     548:	24 e8       	ldi	r18, 0x84	; 132
     54a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     54e:	ec eb       	ldi	r30, 0xBC	; 188
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	20 81       	ld	r18, Z
     554:	22 23       	and	r18, r18
     556:	ec f7       	brge	.-6      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     558:	20 e8       	ldi	r18, 0x80	; 128
     55a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     55e:	24 e8       	ldi	r18, 0x84	; 132
     560:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     564:	ec eb       	ldi	r30, 0xBC	; 188
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	20 81       	ld	r18, Z
     56a:	22 23       	and	r18, r18
     56c:	ec f7       	brge	.-6      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>

	TWDR=command;							
     56e:	27 e0       	ldi	r18, 0x07	; 7
     570:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     574:	24 e8       	ldi	r18, 0x84	; 132
     576:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     57a:	ec eb       	ldi	r30, 0xBC	; 188
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	20 81       	ld	r18, Z
     580:	22 23       	and	r18, r18
     582:	ec f7       	brge	.-6      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     584:	dc 01       	movw	r26, r24
     586:	9c 01       	movw	r18, r24
     588:	3c 5f       	subi	r19, 0xFC	; 252
     58a:	fc 01       	movw	r30, r24
	OLED_Command(0);
	OLED_Command(7);
	
	for(int i=0;i<1024;i++)
	{
		oled_bufer[i]=0b00000000;
     58c:	11 92       	st	Z+, r1
	OLED_Command(127);
	OLED_Command(0x22);
	OLED_Command(0);
	OLED_Command(7);
	
	for(int i=0;i<1024;i++)
     58e:	2e 17       	cp	r18, r30
     590:	3f 07       	cpc	r19, r31
     592:	e1 f7       	brne	.-8      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
}


void OLED_Write_Bufer()
{
	TWDR=0x40;
     594:	80 e4       	ldi	r24, 0x40	; 64
     596:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
     59a:	84 e8       	ldi	r24, 0x84	; 132
     59c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}


void OLED_Data(int data)
{
	TWDR=data;							
     5a0:	cb eb       	ldi	r28, 0xBB	; 187
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);				
     5a4:	ec eb       	ldi	r30, 0xBC	; 188
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	94 e8       	ldi	r25, 0x84	; 132
{
	TWDR=0x40;
	TWCR=(1<<TWINT)|(1<<TWEN);
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
			OLED_Data(oled_bufer[i]);
     5aa:	8d 91       	ld	r24, X+
}


void OLED_Data(int data)
{
	TWDR=data;							
     5ac:	88 83       	st	Y, r24
	TWCR=(1<<TWINT)|(1<<TWEN);				
     5ae:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))){};
     5b0:	80 81       	ld	r24, Z
     5b2:	88 23       	and	r24, r24
     5b4:	ec f7       	brge	.-6      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>

void OLED_Write_Bufer()
{
	TWDR=0x40;
	TWCR=(1<<TWINT)|(1<<TWEN);
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
     5b6:	a2 17       	cp	r26, r18
     5b8:	b3 07       	cpc	r27, r19
     5ba:	b9 f7       	brne	.-18     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
}


void OLED_Data(int data)
{
	TWDR=data;							
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     5c2:	84 e8       	ldi	r24, 0x84	; 132
     5c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     5c8:	ec eb       	ldi	r30, 0xBC	; 188
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	88 23       	and	r24, r24
     5d0:	ec f7       	brge	.-6      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
	{
		oled_bufer[i]=0b00000000;
	}
	OLED_Write_Bufer();
	OLED_Data(0b11111111);
}
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <__vector_4>:
bool button2=false;
bool button3=false;
bool butonpressed=false;

ISR(PCINT0_vect)
{
     5d8:	1f 92       	push	r1
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	0f 92       	push	r0
     5e0:	11 24       	eor	r1, r1
     5e2:	0b b6       	in	r0, 0x3b	; 59
     5e4:	0f 92       	push	r0
     5e6:	8f 93       	push	r24
     5e8:	9f 93       	push	r25
     5ea:	ef 93       	push	r30
     5ec:	ff 93       	push	r31
    cli();
     5ee:	f8 94       	cli
	if (num == 1)
     5f0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <num>
     5f4:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <num+0x1>
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	29 f4       	brne	.+10     	; 0x606 <__vector_4+0x2e>
	num = 0;
     5fc:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <num+0x1>
     600:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <num>
     604:	06 c0       	rjmp	.+12     	; 0x612 <__vector_4+0x3a>
	else
    num = 1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <num+0x1>
     60e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <num>
//sleep_disable();
	if(PINA==0b00000100 )
     612:	80 b1       	in	r24, 0x00	; 0
     614:	84 30       	cpi	r24, 0x04	; 4
     616:	09 f0       	breq	.+2      	; 0x61a <__vector_4+0x42>
     618:	56 c0       	rjmp	.+172    	; 0x6c6 <__vector_4+0xee>
}


void OLED_Data(int data)
{
	TWDR=data;							
     61a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     61e:	84 e8       	ldi	r24, 0x84	; 132
     620:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     624:	ec eb       	ldi	r30, 0xBC	; 188
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	88 23       	and	r24, r24
     62c:	ec f7       	brge	.-6      	; 0x628 <__vector_4+0x50>
}


void OLED_Data(int data)
{
	TWDR=data;							
     62e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     632:	84 e8       	ldi	r24, 0x84	; 132
     634:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     638:	ec eb       	ldi	r30, 0xBC	; 188
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	88 23       	and	r24, r24
     640:	ec f7       	brge	.-6      	; 0x63c <__vector_4+0x64>
}


void OLED_Data(int data)
{
	TWDR=data;							
     642:	8e e7       	ldi	r24, 0x7E	; 126
     644:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     648:	84 e8       	ldi	r24, 0x84	; 132
     64a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     64e:	ec eb       	ldi	r30, 0xBC	; 188
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	88 23       	and	r24, r24
     656:	ec f7       	brge	.-6      	; 0x652 <__vector_4+0x7a>
}


void OLED_Data(int data)
{
	TWDR=data;							
     658:	82 e4       	ldi	r24, 0x42	; 66
     65a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     65e:	84 e8       	ldi	r24, 0x84	; 132
     660:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     664:	ec eb       	ldi	r30, 0xBC	; 188
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	88 23       	and	r24, r24
     66c:	ec f7       	brge	.-6      	; 0x668 <__vector_4+0x90>
}


void OLED_Data(int data)
{
	TWDR=data;							
     66e:	82 e4       	ldi	r24, 0x42	; 66
     670:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     674:	84 e8       	ldi	r24, 0x84	; 132
     676:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     67a:	ec eb       	ldi	r30, 0xBC	; 188
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	88 23       	and	r24, r24
     682:	ec f7       	brge	.-6      	; 0x67e <__vector_4+0xa6>
}


void OLED_Data(int data)
{
	TWDR=data;							
     684:	8e e7       	ldi	r24, 0x7E	; 126
     686:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     68a:	84 e8       	ldi	r24, 0x84	; 132
     68c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     690:	ec eb       	ldi	r30, 0xBC	; 188
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	88 23       	and	r24, r24
     698:	ec f7       	brge	.-6      	; 0x694 <__vector_4+0xbc>
}


void OLED_Data(int data)
{
	TWDR=data;							
     69a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     69e:	84 e8       	ldi	r24, 0x84	; 132
     6a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     6a4:	ec eb       	ldi	r30, 0xBC	; 188
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	88 23       	and	r24, r24
     6ac:	ec f7       	brge	.-6      	; 0x6a8 <__vector_4+0xd0>
}


void OLED_Data(int data)
{
	TWDR=data;							
     6ae:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     6b2:	84 e8       	ldi	r24, 0x84	; 132
     6b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     6b8:	ec eb       	ldi	r30, 0xBC	; 188
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	80 81       	ld	r24, Z
     6be:	88 23       	and	r24, r24
     6c0:	ec f7       	brge	.-6      	; 0x6bc <__vector_4+0xe4>
    num = 1;
//sleep_disable();
	if(PINA==0b00000100 )
	{
		oled.writenumber(0);
		SMCR|=0b00000000;
     6c2:	83 b7       	in	r24, 0x33	; 51
     6c4:	83 bf       	out	0x33, r24	; 51
	}
	if(PINA==0b00001000)
     6c6:	80 b1       	in	r24, 0x00	; 0
     6c8:	88 30       	cpi	r24, 0x08	; 8
     6ca:	09 f0       	breq	.+2      	; 0x6ce <__vector_4+0xf6>
     6cc:	56 c0       	rjmp	.+172    	; 0x77a <__vector_4+0x1a2>
}


void OLED_Data(int data)
{
	TWDR=data;							
     6ce:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     6d2:	84 e8       	ldi	r24, 0x84	; 132
     6d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     6d8:	ec eb       	ldi	r30, 0xBC	; 188
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	80 81       	ld	r24, Z
     6de:	88 23       	and	r24, r24
     6e0:	ec f7       	brge	.-6      	; 0x6dc <__vector_4+0x104>
}


void OLED_Data(int data)
{
	TWDR=data;							
     6e2:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     6e6:	84 e8       	ldi	r24, 0x84	; 132
     6e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     6ec:	ec eb       	ldi	r30, 0xBC	; 188
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	88 23       	and	r24, r24
     6f4:	ec f7       	brge	.-6      	; 0x6f0 <__vector_4+0x118>
}


void OLED_Data(int data)
{
	TWDR=data;							
     6f6:	88 e0       	ldi	r24, 0x08	; 8
     6f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     6fc:	84 e8       	ldi	r24, 0x84	; 132
     6fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     702:	ec eb       	ldi	r30, 0xBC	; 188
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	88 23       	and	r24, r24
     70a:	ec f7       	brge	.-6      	; 0x706 <__vector_4+0x12e>
}


void OLED_Data(int data)
{
	TWDR=data;							
     70c:	86 e4       	ldi	r24, 0x46	; 70
     70e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     712:	84 e8       	ldi	r24, 0x84	; 132
     714:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     718:	ec eb       	ldi	r30, 0xBC	; 188
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	88 23       	and	r24, r24
     720:	ec f7       	brge	.-6      	; 0x71c <__vector_4+0x144>
}


void OLED_Data(int data)
{
	TWDR=data;							
     722:	8e e7       	ldi	r24, 0x7E	; 126
     724:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     728:	84 e8       	ldi	r24, 0x84	; 132
     72a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     72e:	ec eb       	ldi	r30, 0xBC	; 188
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	80 81       	ld	r24, Z
     734:	88 23       	and	r24, r24
     736:	ec f7       	brge	.-6      	; 0x732 <__vector_4+0x15a>
}


void OLED_Data(int data)
{
	TWDR=data;							
     738:	80 e4       	ldi	r24, 0x40	; 64
     73a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     73e:	84 e8       	ldi	r24, 0x84	; 132
     740:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     744:	ec eb       	ldi	r30, 0xBC	; 188
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	88 23       	and	r24, r24
     74c:	ec f7       	brge	.-6      	; 0x748 <__vector_4+0x170>
}


void OLED_Data(int data)
{
	TWDR=data;							
     74e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     752:	84 e8       	ldi	r24, 0x84	; 132
     754:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     758:	ec eb       	ldi	r30, 0xBC	; 188
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	80 81       	ld	r24, Z
     75e:	88 23       	and	r24, r24
     760:	ec f7       	brge	.-6      	; 0x75c <__vector_4+0x184>
}


void OLED_Data(int data)
{
	TWDR=data;							
     762:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     766:	84 e8       	ldi	r24, 0x84	; 132
     768:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     76c:	ec eb       	ldi	r30, 0xBC	; 188
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	88 23       	and	r24, r24
     774:	ec f7       	brge	.-6      	; 0x770 <__vector_4+0x198>
		SMCR|=0b00000000;
	}
	if(PINA==0b00001000)
	{
		oled.writenumber(1);
		SMCR|=0b00000000;
     776:	83 b7       	in	r24, 0x33	; 51
     778:	83 bf       	out	0x33, r24	; 51
		
	}
	if(PINA==0b00010000)
     77a:	80 b1       	in	r24, 0x00	; 0
     77c:	80 31       	cpi	r24, 0x10	; 16
     77e:	09 f0       	breq	.+2      	; 0x782 <__vector_4+0x1aa>
     780:	57 c0       	rjmp	.+174    	; 0x830 <__vector_4+0x258>
}


void OLED_Data(int data)
{
	TWDR=data;							
     782:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     786:	84 e8       	ldi	r24, 0x84	; 132
     788:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     78c:	ec eb       	ldi	r30, 0xBC	; 188
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	88 23       	and	r24, r24
     794:	ec f7       	brge	.-6      	; 0x790 <__vector_4+0x1b8>
}


void OLED_Data(int data)
{
	TWDR=data;							
     796:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     79a:	84 e8       	ldi	r24, 0x84	; 132
     79c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     7a0:	ec eb       	ldi	r30, 0xBC	; 188
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	88 23       	and	r24, r24
     7a8:	ec f7       	brge	.-6      	; 0x7a4 <__vector_4+0x1cc>
}


void OLED_Data(int data)
{
	TWDR=data;							
     7aa:	82 e7       	ldi	r24, 0x72	; 114
     7ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     7b0:	84 e8       	ldi	r24, 0x84	; 132
     7b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     7b6:	ec eb       	ldi	r30, 0xBC	; 188
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	88 23       	and	r24, r24
     7be:	ec f7       	brge	.-6      	; 0x7ba <__vector_4+0x1e2>
}


void OLED_Data(int data)
{
	TWDR=data;							
     7c0:	82 e5       	ldi	r24, 0x52	; 82
     7c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     7c6:	84 e8       	ldi	r24, 0x84	; 132
     7c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     7cc:	ec eb       	ldi	r30, 0xBC	; 188
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	88 23       	and	r24, r24
     7d4:	ec f7       	brge	.-6      	; 0x7d0 <__vector_4+0x1f8>
}


void OLED_Data(int data)
{
	TWDR=data;							
     7d6:	8a e4       	ldi	r24, 0x4A	; 74
     7d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     7dc:	84 e8       	ldi	r24, 0x84	; 132
     7de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     7e2:	ec eb       	ldi	r30, 0xBC	; 188
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	88 23       	and	r24, r24
     7ea:	ec f7       	brge	.-6      	; 0x7e6 <__vector_4+0x20e>
}


void OLED_Data(int data)
{
	TWDR=data;							
     7ec:	8e e4       	ldi	r24, 0x4E	; 78
     7ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     7f2:	84 e8       	ldi	r24, 0x84	; 132
     7f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     7f8:	ec eb       	ldi	r30, 0xBC	; 188
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	88 23       	and	r24, r24
     800:	ec f7       	brge	.-6      	; 0x7fc <__vector_4+0x224>
}


void OLED_Data(int data)
{
	TWDR=data;							
     802:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     806:	84 e8       	ldi	r24, 0x84	; 132
     808:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     80c:	ec eb       	ldi	r30, 0xBC	; 188
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	88 23       	and	r24, r24
     814:	ec f7       	brge	.-6      	; 0x810 <__vector_4+0x238>
}


void OLED_Data(int data)
{
	TWDR=data;							
     816:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     81a:	84 e8       	ldi	r24, 0x84	; 132
     81c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     820:	ec eb       	ldi	r30, 0xBC	; 188
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	88 23       	and	r24, r24
     828:	ec f7       	brge	.-6      	; 0x824 <__vector_4+0x24c>
	}
	if(PINA==0b00010000)
	{
		oled.writenumber(2);
		
		SMCR|=0b00000001;
     82a:	83 b7       	in	r24, 0x33	; 51
     82c:	81 60       	ori	r24, 0x01	; 1
     82e:	83 bf       	out	0x33, r24	; 51
	}
	if(PINA==0b00100000)
     830:	80 b1       	in	r24, 0x00	; 0
     832:	80 32       	cpi	r24, 0x20	; 32
     834:	09 f0       	breq	.+2      	; 0x838 <__vector_4+0x260>
     836:	57 c0       	rjmp	.+174    	; 0x8e6 <__vector_4+0x30e>
}


void OLED_Data(int data)
{
	TWDR=data;							
     838:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     83c:	84 e8       	ldi	r24, 0x84	; 132
     83e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     842:	ec eb       	ldi	r30, 0xBC	; 188
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	80 81       	ld	r24, Z
     848:	88 23       	and	r24, r24
     84a:	ec f7       	brge	.-6      	; 0x846 <__vector_4+0x26e>
}


void OLED_Data(int data)
{
	TWDR=data;							
     84c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     850:	84 e8       	ldi	r24, 0x84	; 132
     852:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     856:	ec eb       	ldi	r30, 0xBC	; 188
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	88 23       	and	r24, r24
     85e:	ec f7       	brge	.-6      	; 0x85a <__vector_4+0x282>
}


void OLED_Data(int data)
{
	TWDR=data;							
     860:	8a e4       	ldi	r24, 0x4A	; 74
     862:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     866:	84 e8       	ldi	r24, 0x84	; 132
     868:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     86c:	ec eb       	ldi	r30, 0xBC	; 188
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	88 23       	and	r24, r24
     874:	ec f7       	brge	.-6      	; 0x870 <__vector_4+0x298>
}


void OLED_Data(int data)
{
	TWDR=data;							
     876:	8a e4       	ldi	r24, 0x4A	; 74
     878:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     87c:	84 e8       	ldi	r24, 0x84	; 132
     87e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     882:	ec eb       	ldi	r30, 0xBC	; 188
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	88 23       	and	r24, r24
     88a:	ec f7       	brge	.-6      	; 0x886 <__vector_4+0x2ae>
}


void OLED_Data(int data)
{
	TWDR=data;							
     88c:	8a e4       	ldi	r24, 0x4A	; 74
     88e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     892:	84 e8       	ldi	r24, 0x84	; 132
     894:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     898:	ec eb       	ldi	r30, 0xBC	; 188
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	88 23       	and	r24, r24
     8a0:	ec f7       	brge	.-6      	; 0x89c <__vector_4+0x2c4>
}


void OLED_Data(int data)
{
	TWDR=data;							
     8a2:	8e e7       	ldi	r24, 0x7E	; 126
     8a4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     8a8:	84 e8       	ldi	r24, 0x84	; 132
     8aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     8ae:	ec eb       	ldi	r30, 0xBC	; 188
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	88 23       	and	r24, r24
     8b6:	ec f7       	brge	.-6      	; 0x8b2 <__vector_4+0x2da>
}


void OLED_Data(int data)
{
	TWDR=data;							
     8b8:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     8bc:	84 e8       	ldi	r24, 0x84	; 132
     8be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     8c2:	ec eb       	ldi	r30, 0xBC	; 188
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	88 23       	and	r24, r24
     8ca:	ec f7       	brge	.-6      	; 0x8c6 <__vector_4+0x2ee>
}


void OLED_Data(int data)
{
	TWDR=data;							
     8cc:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     8d0:	84 e8       	ldi	r24, 0x84	; 132
     8d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     8d6:	ec eb       	ldi	r30, 0xBC	; 188
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	88 23       	and	r24, r24
     8de:	ec f7       	brge	.-6      	; 0x8da <__vector_4+0x302>
	}
	if(PINA==0b00100000)
	{
		oled.writenumber(3);
		
		SMCR|=0b00000001;
     8e0:	83 b7       	in	r24, 0x33	; 51
     8e2:	81 60       	ori	r24, 0x01	; 1
     8e4:	83 bf       	out	0x33, r24	; 51
	}
		if(PINA==0b00011000)
     8e6:	80 b1       	in	r24, 0x00	; 0
     8e8:	88 31       	cpi	r24, 0x18	; 24
     8ea:	09 f0       	breq	.+2      	; 0x8ee <__vector_4+0x316>
     8ec:	54 c0       	rjmp	.+168    	; 0x996 <__vector_4+0x3be>
}


void OLED_Data(int data)
{
	TWDR=data;							
     8ee:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     8f2:	84 e8       	ldi	r24, 0x84	; 132
     8f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     8f8:	ec eb       	ldi	r30, 0xBC	; 188
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	88 23       	and	r24, r24
     900:	ec f7       	brge	.-6      	; 0x8fc <__vector_4+0x324>
}


void OLED_Data(int data)
{
	TWDR=data;							
     902:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     906:	84 e8       	ldi	r24, 0x84	; 132
     908:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     90c:	ec eb       	ldi	r30, 0xBC	; 188
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	88 23       	and	r24, r24
     914:	ec f7       	brge	.-6      	; 0x910 <__vector_4+0x338>
}


void OLED_Data(int data)
{
	TWDR=data;							
     916:	8c e1       	ldi	r24, 0x1C	; 28
     918:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     91c:	84 e8       	ldi	r24, 0x84	; 132
     91e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     922:	ec eb       	ldi	r30, 0xBC	; 188
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	88 23       	and	r24, r24
     92a:	ec f7       	brge	.-6      	; 0x926 <__vector_4+0x34e>
}


void OLED_Data(int data)
{
	TWDR=data;							
     92c:	80 e1       	ldi	r24, 0x10	; 16
     92e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     932:	84 e8       	ldi	r24, 0x84	; 132
     934:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     938:	ec eb       	ldi	r30, 0xBC	; 188
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	88 23       	and	r24, r24
     940:	ec f7       	brge	.-6      	; 0x93c <__vector_4+0x364>
}


void OLED_Data(int data)
{
	TWDR=data;							
     942:	80 e1       	ldi	r24, 0x10	; 16
     944:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     948:	84 e8       	ldi	r24, 0x84	; 132
     94a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     94e:	ec eb       	ldi	r30, 0xBC	; 188
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	80 81       	ld	r24, Z
     954:	88 23       	and	r24, r24
     956:	ec f7       	brge	.-6      	; 0x952 <__vector_4+0x37a>
}


void OLED_Data(int data)
{
	TWDR=data;							
     958:	8e e7       	ldi	r24, 0x7E	; 126
     95a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     95e:	84 e8       	ldi	r24, 0x84	; 132
     960:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     964:	ec eb       	ldi	r30, 0xBC	; 188
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	88 23       	and	r24, r24
     96c:	ec f7       	brge	.-6      	; 0x968 <__vector_4+0x390>
}


void OLED_Data(int data)
{
	TWDR=data;							
     96e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     972:	84 e8       	ldi	r24, 0x84	; 132
     974:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     978:	ec eb       	ldi	r30, 0xBC	; 188
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	88 23       	and	r24, r24
     980:	ec f7       	brge	.-6      	; 0x97c <__vector_4+0x3a4>
}


void OLED_Data(int data)
{
	TWDR=data;							
     982:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     986:	84 e8       	ldi	r24, 0x84	; 132
     988:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     98c:	ec eb       	ldi	r30, 0xBC	; 188
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	88 23       	and	r24, r24
     994:	ec f7       	brge	.-6      	; 0x990 <__vector_4+0x3b8>
	}
		if(PINA==0b00011000)
		{
		oled.writenumber(4);	
		}
		if(PINA==0b00100100)
     996:	80 b1       	in	r24, 0x00	; 0
     998:	84 32       	cpi	r24, 0x24	; 36
     99a:	09 f0       	breq	.+2      	; 0x99e <__vector_4+0x3c6>
     99c:	54 c0       	rjmp	.+168    	; 0xa46 <__vector_4+0x46e>
}


void OLED_Data(int data)
{
	TWDR=data;							
     99e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     9a2:	84 e8       	ldi	r24, 0x84	; 132
     9a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     9a8:	ec eb       	ldi	r30, 0xBC	; 188
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	80 81       	ld	r24, Z
     9ae:	88 23       	and	r24, r24
     9b0:	ec f7       	brge	.-6      	; 0x9ac <__vector_4+0x3d4>
}


void OLED_Data(int data)
{
	TWDR=data;							
     9b2:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     9b6:	84 e8       	ldi	r24, 0x84	; 132
     9b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     9bc:	ec eb       	ldi	r30, 0xBC	; 188
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	80 81       	ld	r24, Z
     9c2:	88 23       	and	r24, r24
     9c4:	ec f7       	brge	.-6      	; 0x9c0 <__vector_4+0x3e8>
}


void OLED_Data(int data)
{
	TWDR=data;							
     9c6:	86 e4       	ldi	r24, 0x46	; 70
     9c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     9cc:	84 e8       	ldi	r24, 0x84	; 132
     9ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     9d2:	ec eb       	ldi	r30, 0xBC	; 188
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	88 23       	and	r24, r24
     9da:	ec f7       	brge	.-6      	; 0x9d6 <__vector_4+0x3fe>
}


void OLED_Data(int data)
{
	TWDR=data;							
     9dc:	8a e4       	ldi	r24, 0x4A	; 74
     9de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     9e2:	84 e8       	ldi	r24, 0x84	; 132
     9e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     9e8:	ec eb       	ldi	r30, 0xBC	; 188
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	88 23       	and	r24, r24
     9f0:	ec f7       	brge	.-6      	; 0x9ec <__vector_4+0x414>
}


void OLED_Data(int data)
{
	TWDR=data;							
     9f2:	8a e4       	ldi	r24, 0x4A	; 74
     9f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     9f8:	84 e8       	ldi	r24, 0x84	; 132
     9fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     9fe:	ec eb       	ldi	r30, 0xBC	; 188
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	88 23       	and	r24, r24
     a06:	ec f7       	brge	.-6      	; 0xa02 <__vector_4+0x42a>
}


void OLED_Data(int data)
{
	TWDR=data;							
     a08:	82 e7       	ldi	r24, 0x72	; 114
     a0a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     a0e:	84 e8       	ldi	r24, 0x84	; 132
     a10:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     a14:	ec eb       	ldi	r30, 0xBC	; 188
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	88 23       	and	r24, r24
     a1c:	ec f7       	brge	.-6      	; 0xa18 <__vector_4+0x440>
}


void OLED_Data(int data)
{
	TWDR=data;							
     a1e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     a22:	84 e8       	ldi	r24, 0x84	; 132
     a24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     a28:	ec eb       	ldi	r30, 0xBC	; 188
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	88 23       	and	r24, r24
     a30:	ec f7       	brge	.-6      	; 0xa2c <__vector_4+0x454>
}


void OLED_Data(int data)
{
	TWDR=data;							
     a32:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     a36:	84 e8       	ldi	r24, 0x84	; 132
     a38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     a3c:	ec eb       	ldi	r30, 0xBC	; 188
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	88 23       	and	r24, r24
     a44:	ec f7       	brge	.-6      	; 0xa40 <__vector_4+0x468>
		}
		if(PINA==0b00100100)
		{
			oled.writenumber(5);
		}
	sei();
     a46:	78 94       	sei

}
     a48:	ff 91       	pop	r31
     a4a:	ef 91       	pop	r30
     a4c:	9f 91       	pop	r25
     a4e:	8f 91       	pop	r24
     a50:	0f 90       	pop	r0
     a52:	0b be       	out	0x3b, r0	; 59
     a54:	0f 90       	pop	r0
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	0f 90       	pop	r0
     a5a:	1f 90       	pop	r1
     a5c:	18 95       	reti

00000a5e <_ZN6Batary19printlvltoOLEDbuferEv>:
	if((PINB>>2)&0b00000001==1) kf++;
	if((PINB>>3)&0b00000001==1) kf++;
	curlvl=kf;
}

void printlvltoOLEDbufer()
     a5e:	8f 92       	push	r8
     a60:	9f 92       	push	r9
     a62:	af 92       	push	r10
     a64:	bf 92       	push	r11
     a66:	cf 92       	push	r12
     a68:	df 92       	push	r13
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	4c 01       	movw	r8, r24
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
     a78:	fc 01       	movw	r30, r24
     a7a:	80 81       	ld	r24, Z
     a7c:	91 81       	ldd	r25, Z+1	; 0x01
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	09 f0       	breq	.+2      	; 0xa84 <_ZN6Batary19printlvltoOLEDbuferEv+0x26>
     a82:	de c1       	rjmp	.+956    	; 0xe40 <_ZN6Batary19printlvltoOLEDbuferEv+0x3e2>
     a84:	0f 2e       	mov	r0, r31
     a86:	f0 e8       	ldi	r31, 0x80	; 128
     a88:	af 2e       	mov	r10, r31
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	bf 2e       	mov	r11, r31
     a8e:	f0 2d       	mov	r31, r0
     a90:	e1 2c       	mov	r14, r1
     a92:	f1 2c       	mov	r15, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     a94:	0f 2e       	mov	r0, r31
     a96:	f7 e0       	ldi	r31, 0x07	; 7
     a98:	cf 2e       	mov	r12, r31
     a9a:	d1 2c       	mov	r13, r1
     a9c:	f0 2d       	mov	r31, r0
     a9e:	c7 01       	movw	r24, r14
     aa0:	87 70       	andi	r24, 0x07	; 7
     aa2:	90 78       	andi	r25, 0x80	; 128
     aa4:	99 23       	and	r25, r25
     aa6:	24 f4       	brge	.+8      	; 0xab0 <_ZN6Batary19printlvltoOLEDbuferEv+0x52>
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	88 6f       	ori	r24, 0xF8	; 248
     aac:	9f 6f       	ori	r25, 0xFF	; 255
     aae:	01 96       	adiw	r24, 0x01	; 1
     ab0:	b6 01       	movw	r22, r12
     ab2:	68 1b       	sub	r22, r24
     ab4:	79 0b       	sbc	r23, r25
     ab6:	87 01       	movw	r16, r14
     ab8:	ff 20       	and	r15, r15
     aba:	14 f4       	brge	.+4      	; 0xac0 <_ZN6Batary19printlvltoOLEDbuferEv+0x62>
     abc:	09 5f       	subi	r16, 0xF9	; 249
     abe:	1f 4f       	sbci	r17, 0xFF	; 255
     ac0:	15 95       	asr	r17
     ac2:	07 95       	ror	r16
     ac4:	15 95       	asr	r17
     ac6:	07 95       	ror	r16
     ac8:	15 95       	asr	r17
     aca:	07 95       	ror	r16
     acc:	16 95       	lsr	r17
     ace:	10 2f       	mov	r17, r16
     ad0:	00 27       	eor	r16, r16
     ad2:	17 95       	ror	r17
     ad4:	07 95       	ror	r16
     ad6:	d8 01       	movw	r26, r16
     ad8:	ac 5f       	subi	r26, 0xFC	; 252
     ada:	bd 4f       	sbci	r27, 0xFD	; 253
     adc:	0c 5d       	subi	r16, 0xDC	; 220
     ade:	1d 4f       	sbci	r17, 0xFD	; 253
     ae0:	e5 01       	movw	r28, r10
     ae2:	49 91       	ld	r20, Y+
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	fd 01       	movw	r30, r26
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	ca 01       	movw	r24, r20
     aee:	02 2e       	mov	r0, r18
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <_ZN6Batary19printlvltoOLEDbuferEv+0x98>
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	0a 94       	dec	r0
     af8:	e2 f7       	brpl	.-8      	; 0xaf2 <_ZN6Batary19printlvltoOLEDbuferEv+0x94>
     afa:	80 78       	andi	r24, 0x80	; 128
     afc:	99 27       	eor	r25, r25
     afe:	06 2e       	mov	r0, r22
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <_ZN6Batary19printlvltoOLEDbuferEv+0xa8>
     b02:	95 95       	asr	r25
     b04:	87 95       	ror	r24
     b06:	0a 94       	dec	r0
     b08:	e2 f7       	brpl	.-8      	; 0xb02 <_ZN6Batary19printlvltoOLEDbuferEv+0xa4>
     b0a:	90 81       	ld	r25, Z
     b0c:	89 2b       	or	r24, r25
     b0e:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     b10:	2f 5f       	subi	r18, 0xFF	; 255
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	28 30       	cpi	r18, 0x08	; 8
     b16:	31 05       	cpc	r19, r1
     b18:	49 f7       	brne	.-46     	; 0xaec <_ZN6Batary19printlvltoOLEDbuferEv+0x8e>
     b1a:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     b1c:	a0 17       	cp	r26, r16
     b1e:	b1 07       	cpc	r27, r17
     b20:	01 f7       	brne	.-64     	; 0xae2 <_ZN6Batary19printlvltoOLEDbuferEv+0x84>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     b22:	ff ef       	ldi	r31, 0xFF	; 255
     b24:	ef 1a       	sub	r14, r31
     b26:	ff 0a       	sbc	r15, r31
     b28:	84 e0       	ldi	r24, 0x04	; 4
     b2a:	a8 0e       	add	r10, r24
     b2c:	b1 1c       	adc	r11, r1
     b2e:	e8 e0       	ldi	r30, 0x08	; 8
     b30:	ee 16       	cp	r14, r30
     b32:	f1 04       	cpc	r15, r1
     b34:	09 f0       	breq	.+2      	; 0xb38 <_ZN6Batary19printlvltoOLEDbuferEv+0xda>
     b36:	b3 cf       	rjmp	.-154    	; 0xa9e <_ZN6Batary19printlvltoOLEDbuferEv+0x40>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
     b38:	f4 01       	movw	r30, r8
     b3a:	80 81       	ld	r24, Z
     b3c:	91 81       	ldd	r25, Z+1	; 0x01
     b3e:	81 30       	cpi	r24, 0x01	; 1
     b40:	91 05       	cpc	r25, r1
     b42:	09 f0       	breq	.+2      	; 0xb46 <_ZN6Batary19printlvltoOLEDbuferEv+0xe8>
     b44:	81 c1       	rjmp	.+770    	; 0xe48 <_ZN6Batary19printlvltoOLEDbuferEv+0x3ea>
     b46:	0f 2e       	mov	r0, r31
     b48:	f0 e6       	ldi	r31, 0x60	; 96
     b4a:	af 2e       	mov	r10, r31
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	bf 2e       	mov	r11, r31
     b50:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     b52:	e1 2c       	mov	r14, r1
     b54:	f1 2c       	mov	r15, r1
     b56:	0f 2e       	mov	r0, r31
     b58:	f7 e0       	ldi	r31, 0x07	; 7
     b5a:	cf 2e       	mov	r12, r31
     b5c:	d1 2c       	mov	r13, r1
     b5e:	f0 2d       	mov	r31, r0
     b60:	c7 01       	movw	r24, r14
     b62:	87 70       	andi	r24, 0x07	; 7
     b64:	90 78       	andi	r25, 0x80	; 128
     b66:	99 23       	and	r25, r25
     b68:	24 f4       	brge	.+8      	; 0xb72 <_ZN6Batary19printlvltoOLEDbuferEv+0x114>
     b6a:	01 97       	sbiw	r24, 0x01	; 1
     b6c:	88 6f       	ori	r24, 0xF8	; 248
     b6e:	9f 6f       	ori	r25, 0xFF	; 255
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	b6 01       	movw	r22, r12
     b74:	68 1b       	sub	r22, r24
     b76:	79 0b       	sbc	r23, r25
     b78:	87 01       	movw	r16, r14
     b7a:	ff 20       	and	r15, r15
     b7c:	14 f4       	brge	.+4      	; 0xb82 <_ZN6Batary19printlvltoOLEDbuferEv+0x124>
     b7e:	09 5f       	subi	r16, 0xF9	; 249
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	15 95       	asr	r17
     b84:	07 95       	ror	r16
     b86:	15 95       	asr	r17
     b88:	07 95       	ror	r16
     b8a:	15 95       	asr	r17
     b8c:	07 95       	ror	r16
     b8e:	16 95       	lsr	r17
     b90:	10 2f       	mov	r17, r16
     b92:	00 27       	eor	r16, r16
     b94:	17 95       	ror	r17
     b96:	07 95       	ror	r16
     b98:	d8 01       	movw	r26, r16
     b9a:	ac 5f       	subi	r26, 0xFC	; 252
     b9c:	bd 4f       	sbci	r27, 0xFD	; 253
     b9e:	0c 5d       	subi	r16, 0xDC	; 220
     ba0:	1d 4f       	sbci	r17, 0xFD	; 253
     ba2:	e5 01       	movw	r28, r10
     ba4:	49 91       	ld	r20, Y+
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	fd 01       	movw	r30, r26
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	ca 01       	movw	r24, r20
     bb0:	02 2e       	mov	r0, r18
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <_ZN6Batary19printlvltoOLEDbuferEv+0x15a>
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	0a 94       	dec	r0
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <_ZN6Batary19printlvltoOLEDbuferEv+0x156>
     bbc:	80 78       	andi	r24, 0x80	; 128
     bbe:	99 27       	eor	r25, r25
     bc0:	06 2e       	mov	r0, r22
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <_ZN6Batary19printlvltoOLEDbuferEv+0x16a>
     bc4:	95 95       	asr	r25
     bc6:	87 95       	ror	r24
     bc8:	0a 94       	dec	r0
     bca:	e2 f7       	brpl	.-8      	; 0xbc4 <_ZN6Batary19printlvltoOLEDbuferEv+0x166>
     bcc:	90 81       	ld	r25, Z
     bce:	89 2b       	or	r24, r25
     bd0:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     bd2:	2f 5f       	subi	r18, 0xFF	; 255
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	28 30       	cpi	r18, 0x08	; 8
     bd8:	31 05       	cpc	r19, r1
     bda:	49 f7       	brne	.-46     	; 0xbae <_ZN6Batary19printlvltoOLEDbuferEv+0x150>
     bdc:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     bde:	a0 17       	cp	r26, r16
     be0:	b1 07       	cpc	r27, r17
     be2:	01 f7       	brne	.-64     	; 0xba4 <_ZN6Batary19printlvltoOLEDbuferEv+0x146>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     be4:	ff ef       	ldi	r31, 0xFF	; 255
     be6:	ef 1a       	sub	r14, r31
     be8:	ff 0a       	sbc	r15, r31
     bea:	84 e0       	ldi	r24, 0x04	; 4
     bec:	a8 0e       	add	r10, r24
     bee:	b1 1c       	adc	r11, r1
     bf0:	e8 e0       	ldi	r30, 0x08	; 8
     bf2:	ee 16       	cp	r14, r30
     bf4:	f1 04       	cpc	r15, r1
     bf6:	09 f0       	breq	.+2      	; 0xbfa <_ZN6Batary19printlvltoOLEDbuferEv+0x19c>
     bf8:	b3 cf       	rjmp	.-154    	; 0xb60 <_ZN6Batary19printlvltoOLEDbuferEv+0x102>

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
     bfa:	f4 01       	movw	r30, r8
     bfc:	80 81       	ld	r24, Z
     bfe:	91 81       	ldd	r25, Z+1	; 0x01
     c00:	82 30       	cpi	r24, 0x02	; 2
     c02:	91 05       	cpc	r25, r1
     c04:	09 f0       	breq	.+2      	; 0xc08 <_ZN6Batary19printlvltoOLEDbuferEv+0x1aa>
     c06:	24 c1       	rjmp	.+584    	; 0xe50 <_ZN6Batary19printlvltoOLEDbuferEv+0x3f2>
     c08:	0f 2e       	mov	r0, r31
     c0a:	f0 e4       	ldi	r31, 0x40	; 64
     c0c:	af 2e       	mov	r10, r31
     c0e:	f1 e0       	ldi	r31, 0x01	; 1
     c10:	bf 2e       	mov	r11, r31
     c12:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     c14:	e1 2c       	mov	r14, r1
     c16:	f1 2c       	mov	r15, r1
     c18:	0f 2e       	mov	r0, r31
     c1a:	f7 e0       	ldi	r31, 0x07	; 7
     c1c:	cf 2e       	mov	r12, r31
     c1e:	d1 2c       	mov	r13, r1
     c20:	f0 2d       	mov	r31, r0
     c22:	c7 01       	movw	r24, r14
     c24:	87 70       	andi	r24, 0x07	; 7
     c26:	90 78       	andi	r25, 0x80	; 128
     c28:	99 23       	and	r25, r25
     c2a:	24 f4       	brge	.+8      	; 0xc34 <_ZN6Batary19printlvltoOLEDbuferEv+0x1d6>
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	88 6f       	ori	r24, 0xF8	; 248
     c30:	9f 6f       	ori	r25, 0xFF	; 255
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	b6 01       	movw	r22, r12
     c36:	68 1b       	sub	r22, r24
     c38:	79 0b       	sbc	r23, r25
     c3a:	87 01       	movw	r16, r14
     c3c:	ff 20       	and	r15, r15
     c3e:	14 f4       	brge	.+4      	; 0xc44 <_ZN6Batary19printlvltoOLEDbuferEv+0x1e6>
     c40:	09 5f       	subi	r16, 0xF9	; 249
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	15 95       	asr	r17
     c46:	07 95       	ror	r16
     c48:	15 95       	asr	r17
     c4a:	07 95       	ror	r16
     c4c:	15 95       	asr	r17
     c4e:	07 95       	ror	r16
     c50:	16 95       	lsr	r17
     c52:	10 2f       	mov	r17, r16
     c54:	00 27       	eor	r16, r16
     c56:	17 95       	ror	r17
     c58:	07 95       	ror	r16
     c5a:	d8 01       	movw	r26, r16
     c5c:	ac 5f       	subi	r26, 0xFC	; 252
     c5e:	bd 4f       	sbci	r27, 0xFD	; 253
     c60:	0c 5d       	subi	r16, 0xDC	; 220
     c62:	1d 4f       	sbci	r17, 0xFD	; 253
     c64:	e5 01       	movw	r28, r10
     c66:	49 91       	ld	r20, Y+
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	fd 01       	movw	r30, r26
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	ca 01       	movw	r24, r20
     c72:	02 2e       	mov	r0, r18
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <_ZN6Batary19printlvltoOLEDbuferEv+0x21c>
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	0a 94       	dec	r0
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <_ZN6Batary19printlvltoOLEDbuferEv+0x218>
     c7e:	80 78       	andi	r24, 0x80	; 128
     c80:	99 27       	eor	r25, r25
     c82:	06 2e       	mov	r0, r22
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <_ZN6Batary19printlvltoOLEDbuferEv+0x22c>
     c86:	95 95       	asr	r25
     c88:	87 95       	ror	r24
     c8a:	0a 94       	dec	r0
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <_ZN6Batary19printlvltoOLEDbuferEv+0x228>
     c8e:	90 81       	ld	r25, Z
     c90:	89 2b       	or	r24, r25
     c92:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     c94:	2f 5f       	subi	r18, 0xFF	; 255
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	28 30       	cpi	r18, 0x08	; 8
     c9a:	31 05       	cpc	r19, r1
     c9c:	49 f7       	brne	.-46     	; 0xc70 <_ZN6Batary19printlvltoOLEDbuferEv+0x212>
     c9e:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     ca0:	a0 17       	cp	r26, r16
     ca2:	b1 07       	cpc	r27, r17
     ca4:	01 f7       	brne	.-64     	; 0xc66 <_ZN6Batary19printlvltoOLEDbuferEv+0x208>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     ca6:	ff ef       	ldi	r31, 0xFF	; 255
     ca8:	ef 1a       	sub	r14, r31
     caa:	ff 0a       	sbc	r15, r31
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	a8 0e       	add	r10, r24
     cb0:	b1 1c       	adc	r11, r1
     cb2:	e8 e0       	ldi	r30, 0x08	; 8
     cb4:	ee 16       	cp	r14, r30
     cb6:	f1 04       	cpc	r15, r1
     cb8:	09 f0       	breq	.+2      	; 0xcbc <_ZN6Batary19printlvltoOLEDbuferEv+0x25e>
     cba:	b3 cf       	rjmp	.-154    	; 0xc22 <_ZN6Batary19printlvltoOLEDbuferEv+0x1c4>
void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
     cbc:	f4 01       	movw	r30, r8
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	91 05       	cpc	r25, r1
     cc6:	09 f0       	breq	.+2      	; 0xcca <_ZN6Batary19printlvltoOLEDbuferEv+0x26c>
     cc8:	c7 c0       	rjmp	.+398    	; 0xe58 <_ZN6Batary19printlvltoOLEDbuferEv+0x3fa>
     cca:	0f 2e       	mov	r0, r31
     ccc:	f0 e2       	ldi	r31, 0x20	; 32
     cce:	af 2e       	mov	r10, r31
     cd0:	f1 e0       	ldi	r31, 0x01	; 1
     cd2:	bf 2e       	mov	r11, r31
     cd4:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     cd6:	e1 2c       	mov	r14, r1
     cd8:	f1 2c       	mov	r15, r1
     cda:	0f 2e       	mov	r0, r31
     cdc:	f7 e0       	ldi	r31, 0x07	; 7
     cde:	cf 2e       	mov	r12, r31
     ce0:	d1 2c       	mov	r13, r1
     ce2:	f0 2d       	mov	r31, r0
     ce4:	c7 01       	movw	r24, r14
     ce6:	87 70       	andi	r24, 0x07	; 7
     ce8:	90 78       	andi	r25, 0x80	; 128
     cea:	99 23       	and	r25, r25
     cec:	24 f4       	brge	.+8      	; 0xcf6 <_ZN6Batary19printlvltoOLEDbuferEv+0x298>
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	88 6f       	ori	r24, 0xF8	; 248
     cf2:	9f 6f       	ori	r25, 0xFF	; 255
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	b6 01       	movw	r22, r12
     cf8:	68 1b       	sub	r22, r24
     cfa:	79 0b       	sbc	r23, r25
     cfc:	87 01       	movw	r16, r14
     cfe:	ff 20       	and	r15, r15
     d00:	14 f4       	brge	.+4      	; 0xd06 <_ZN6Batary19printlvltoOLEDbuferEv+0x2a8>
     d02:	09 5f       	subi	r16, 0xF9	; 249
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	15 95       	asr	r17
     d08:	07 95       	ror	r16
     d0a:	15 95       	asr	r17
     d0c:	07 95       	ror	r16
     d0e:	15 95       	asr	r17
     d10:	07 95       	ror	r16
     d12:	16 95       	lsr	r17
     d14:	10 2f       	mov	r17, r16
     d16:	00 27       	eor	r16, r16
     d18:	17 95       	ror	r17
     d1a:	07 95       	ror	r16
     d1c:	d8 01       	movw	r26, r16
     d1e:	ac 5f       	subi	r26, 0xFC	; 252
     d20:	bd 4f       	sbci	r27, 0xFD	; 253
     d22:	0c 5d       	subi	r16, 0xDC	; 220
     d24:	1d 4f       	sbci	r17, 0xFD	; 253
     d26:	e5 01       	movw	r28, r10
     d28:	49 91       	ld	r20, Y+
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	fd 01       	movw	r30, r26
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	ca 01       	movw	r24, r20
     d34:	02 2e       	mov	r0, r18
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <_ZN6Batary19printlvltoOLEDbuferEv+0x2de>
     d38:	88 0f       	add	r24, r24
     d3a:	99 1f       	adc	r25, r25
     d3c:	0a 94       	dec	r0
     d3e:	e2 f7       	brpl	.-8      	; 0xd38 <_ZN6Batary19printlvltoOLEDbuferEv+0x2da>
     d40:	80 78       	andi	r24, 0x80	; 128
     d42:	99 27       	eor	r25, r25
     d44:	06 2e       	mov	r0, r22
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <_ZN6Batary19printlvltoOLEDbuferEv+0x2ee>
     d48:	95 95       	asr	r25
     d4a:	87 95       	ror	r24
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <_ZN6Batary19printlvltoOLEDbuferEv+0x2ea>
     d50:	90 81       	ld	r25, Z
     d52:	89 2b       	or	r24, r25
     d54:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     d56:	2f 5f       	subi	r18, 0xFF	; 255
     d58:	3f 4f       	sbci	r19, 0xFF	; 255
     d5a:	28 30       	cpi	r18, 0x08	; 8
     d5c:	31 05       	cpc	r19, r1
     d5e:	49 f7       	brne	.-46     	; 0xd32 <_ZN6Batary19printlvltoOLEDbuferEv+0x2d4>
     d60:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     d62:	0a 17       	cp	r16, r26
     d64:	1b 07       	cpc	r17, r27
     d66:	01 f7       	brne	.-64     	; 0xd28 <_ZN6Batary19printlvltoOLEDbuferEv+0x2ca>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     d68:	ff ef       	ldi	r31, 0xFF	; 255
     d6a:	ef 1a       	sub	r14, r31
     d6c:	ff 0a       	sbc	r15, r31
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	a8 0e       	add	r10, r24
     d72:	b1 1c       	adc	r11, r1
     d74:	e8 e0       	ldi	r30, 0x08	; 8
     d76:	ee 16       	cp	r14, r30
     d78:	f1 04       	cpc	r15, r1
     d7a:	09 f0       	breq	.+2      	; 0xd7e <_ZN6Batary19printlvltoOLEDbuferEv+0x320>
     d7c:	b3 cf       	rjmp	.-154    	; 0xce4 <_ZN6Batary19printlvltoOLEDbuferEv+0x286>
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
     d7e:	f4 01       	movw	r30, r8
     d80:	80 81       	ld	r24, Z
     d82:	91 81       	ldd	r25, Z+1	; 0x01
     d84:	04 97       	sbiw	r24, 0x04	; 4
     d86:	09 f0       	breq	.+2      	; 0xd8a <_ZN6Batary19printlvltoOLEDbuferEv+0x32c>
     d88:	6a c0       	rjmp	.+212    	; 0xe5e <_ZN6Batary19printlvltoOLEDbuferEv+0x400>
     d8a:	0f 2e       	mov	r0, r31
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	af 2e       	mov	r10, r31
     d90:	f1 e0       	ldi	r31, 0x01	; 1
     d92:	bf 2e       	mov	r11, r31
     d94:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     d96:	e1 2c       	mov	r14, r1
     d98:	f1 2c       	mov	r15, r1
     d9a:	0f 2e       	mov	r0, r31
     d9c:	f7 e0       	ldi	r31, 0x07	; 7
     d9e:	cf 2e       	mov	r12, r31
     da0:	d1 2c       	mov	r13, r1
     da2:	f0 2d       	mov	r31, r0
     da4:	c7 01       	movw	r24, r14
     da6:	87 70       	andi	r24, 0x07	; 7
     da8:	90 78       	andi	r25, 0x80	; 128
     daa:	99 23       	and	r25, r25
     dac:	24 f4       	brge	.+8      	; 0xdb6 <_ZN6Batary19printlvltoOLEDbuferEv+0x358>
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	88 6f       	ori	r24, 0xF8	; 248
     db2:	9f 6f       	ori	r25, 0xFF	; 255
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	b6 01       	movw	r22, r12
     db8:	68 1b       	sub	r22, r24
     dba:	79 0b       	sbc	r23, r25
     dbc:	87 01       	movw	r16, r14
     dbe:	ff 20       	and	r15, r15
     dc0:	14 f4       	brge	.+4      	; 0xdc6 <_ZN6Batary19printlvltoOLEDbuferEv+0x368>
     dc2:	09 5f       	subi	r16, 0xF9	; 249
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
     dc6:	15 95       	asr	r17
     dc8:	07 95       	ror	r16
     dca:	15 95       	asr	r17
     dcc:	07 95       	ror	r16
     dce:	15 95       	asr	r17
     dd0:	07 95       	ror	r16
     dd2:	16 95       	lsr	r17
     dd4:	10 2f       	mov	r17, r16
     dd6:	00 27       	eor	r16, r16
     dd8:	17 95       	ror	r17
     dda:	07 95       	ror	r16
     ddc:	d8 01       	movw	r26, r16
     dde:	ac 5f       	subi	r26, 0xFC	; 252
     de0:	bd 4f       	sbci	r27, 0xFD	; 253
     de2:	0c 5d       	subi	r16, 0xDC	; 220
     de4:	1d 4f       	sbci	r17, 0xFD	; 253
     de6:	e5 01       	movw	r28, r10
     de8:	49 91       	ld	r20, Y+
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	fd 01       	movw	r30, r26
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	ca 01       	movw	r24, r20
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <_ZN6Batary19printlvltoOLEDbuferEv+0x39e>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <_ZN6Batary19printlvltoOLEDbuferEv+0x39a>
     e00:	80 78       	andi	r24, 0x80	; 128
     e02:	99 27       	eor	r25, r25
     e04:	06 2e       	mov	r0, r22
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <_ZN6Batary19printlvltoOLEDbuferEv+0x3ae>
     e08:	95 95       	asr	r25
     e0a:	87 95       	ror	r24
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <_ZN6Batary19printlvltoOLEDbuferEv+0x3aa>
     e10:	90 81       	ld	r25, Z
     e12:	89 2b       	or	r24, r25
     e14:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     e16:	2f 5f       	subi	r18, 0xFF	; 255
     e18:	3f 4f       	sbci	r19, 0xFF	; 255
     e1a:	28 30       	cpi	r18, 0x08	; 8
     e1c:	31 05       	cpc	r19, r1
     e1e:	49 f7       	brne	.-46     	; 0xdf2 <_ZN6Batary19printlvltoOLEDbuferEv+0x394>
     e20:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     e22:	a0 17       	cp	r26, r16
     e24:	b1 07       	cpc	r27, r17
     e26:	01 f7       	brne	.-64     	; 0xde8 <_ZN6Batary19printlvltoOLEDbuferEv+0x38a>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     e28:	ff ef       	ldi	r31, 0xFF	; 255
     e2a:	ef 1a       	sub	r14, r31
     e2c:	ff 0a       	sbc	r15, r31
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	a8 0e       	add	r10, r24
     e32:	b1 1c       	adc	r11, r1
     e34:	e8 e0       	ldi	r30, 0x08	; 8
     e36:	ee 16       	cp	r14, r30
     e38:	f1 04       	cpc	r15, r1
     e3a:	09 f0       	breq	.+2      	; 0xe3e <_ZN6Batary19printlvltoOLEDbuferEv+0x3e0>
     e3c:	b3 cf       	rjmp	.-154    	; 0xda4 <_ZN6Batary19printlvltoOLEDbuferEv+0x346>
     e3e:	0f c0       	rjmp	.+30     	; 0xe5e <_ZN6Batary19printlvltoOLEDbuferEv+0x400>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
     e40:	01 97       	sbiw	r24, 0x01	; 1
     e42:	09 f0       	breq	.+2      	; 0xe46 <_ZN6Batary19printlvltoOLEDbuferEv+0x3e8>
     e44:	da ce       	rjmp	.-588    	; 0xbfa <_ZN6Batary19printlvltoOLEDbuferEv+0x19c>
     e46:	7f ce       	rjmp	.-770    	; 0xb46 <_ZN6Batary19printlvltoOLEDbuferEv+0xe8>
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
     e48:	02 97       	sbiw	r24, 0x02	; 2
     e4a:	09 f0       	breq	.+2      	; 0xe4e <_ZN6Batary19printlvltoOLEDbuferEv+0x3f0>
     e4c:	37 cf       	rjmp	.-402    	; 0xcbc <_ZN6Batary19printlvltoOLEDbuferEv+0x25e>
     e4e:	dc ce       	rjmp	.-584    	; 0xc08 <_ZN6Batary19printlvltoOLEDbuferEv+0x1aa>
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
     e50:	03 97       	sbiw	r24, 0x03	; 3
     e52:	09 f0       	breq	.+2      	; 0xe56 <_ZN6Batary19printlvltoOLEDbuferEv+0x3f8>
     e54:	94 cf       	rjmp	.-216    	; 0xd7e <_ZN6Batary19printlvltoOLEDbuferEv+0x320>
     e56:	39 cf       	rjmp	.-398    	; 0xcca <_ZN6Batary19printlvltoOLEDbuferEv+0x26c>
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
     e58:	04 97       	sbiw	r24, 0x04	; 4
     e5a:	09 f4       	brne	.+2      	; 0xe5e <_ZN6Batary19printlvltoOLEDbuferEv+0x400>
     e5c:	96 cf       	rjmp	.-212    	; 0xd8a <_ZN6Batary19printlvltoOLEDbuferEv+0x32c>
}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	9f 90       	pop	r9
     e74:	8f 90       	pop	r8
     e76:	08 95       	ret

00000e78 <main>:
}


void OLED_Write_Bufer()
{
	TWDR=0x40;
     e78:	80 e4       	ldi	r24, 0x40	; 64
     e7a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
     e7e:	84 e8       	ldi	r24, 0x84	; 132
     e80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e84:	e4 ea       	ldi	r30, 0xA4	; 164
     e86:	f1 e0       	ldi	r31, 0x01	; 1
     e88:	24 ea       	ldi	r18, 0xA4	; 164
     e8a:	35 e0       	ldi	r19, 0x05	; 5
}


void OLED_Data(int data)
{
	TWDR=data;							
     e8c:	cb eb       	ldi	r28, 0xBB	; 187
     e8e:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);				
     e90:	ac eb       	ldi	r26, 0xBC	; 188
     e92:	b0 e0       	ldi	r27, 0x00	; 0
{
	TWDR=0x40;
	TWCR=(1<<TWINT)|(1<<TWEN);
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
			OLED_Data(oled_bufer[i]);
     e94:	91 91       	ld	r25, Z+
}


void OLED_Data(int data)
{
	TWDR=data;							
     e96:	98 83       	st	Y, r25
	TWCR=(1<<TWINT)|(1<<TWEN);				
     e98:	8c 93       	st	X, r24
	while(!(TWCR & (1<<TWINT))){};
     e9a:	9c 91       	ld	r25, X
     e9c:	99 23       	and	r25, r25
     e9e:	ec f7       	brge	.-6      	; 0xe9a <main+0x22>

void OLED_Write_Bufer()
{
	TWDR=0x40;
	TWCR=(1<<TWINT)|(1<<TWEN);
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
     ea0:	2e 17       	cp	r18, r30
     ea2:	3f 07       	cpc	r19, r31
     ea4:	b9 f7       	brne	.-18     	; 0xe94 <main+0x1c>
		//oled.OLED_Write_Bufer();
		//oled.oled_bufer[1]=0b11111111;
		oled.OLED_Write_Bufer();
		//Interupts

		DDRA = 0x00;
     ea6:	11 b8       	out	0x01, r1	; 1
		PORTA=0x00;
     ea8:	12 b8       	out	0x02, r1	; 2
		PCMSK0=0b00111100;
     eaa:	8c e3       	ldi	r24, 0x3C	; 60
     eac:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
		PCICR|=0b00000001;
     eb0:	e8 e6       	ldi	r30, 0x68	; 104
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	81 60       	ori	r24, 0x01	; 1
     eb8:	80 83       	st	Z, r24
		sei();
     eba:	78 94       	sei
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     ebc:	0f 2e       	mov	r0, r31
     ebe:	f7 e0       	ldi	r31, 0x07	; 7
     ec0:	cf 2e       	mov	r12, r31
     ec2:	d1 2c       	mov	r13, r1
     ec4:	f0 2d       	mov	r31, r0
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     ec6:	61 2c       	mov	r6, r1
     ec8:	71 2c       	mov	r7, r1
}

void refreshlvl()
{
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
     eca:	83 b1       	in	r24, 0x03	; 3
	printlvltoOLEDbufer();
}

void refreshlvl()
{
	int kf=0;
     ecc:	80 fb       	bst	r24, 0
     ece:	88 24       	eor	r8, r8
     ed0:	80 f8       	bld	r8, 0
     ed2:	91 2c       	mov	r9, r1
     ed4:	c4 01       	movw	r24, r8
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
     ed6:	19 99       	sbic	0x03, 1	; 3
     ed8:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>2)&0b00000001==1) kf++;
     eda:	1a 99       	sbic	0x03, 2	; 3
     edc:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>3)&0b00000001==1) kf++;
     ede:	1b 9b       	sbis	0x03, 3	; 3
     ee0:	d0 c1       	rjmp	.+928    	; 0x1282 <main+0x40a>
     ee2:	01 96       	adiw	r24, 0x01	; 1
	curlvl=kf;
     ee4:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__data_end+0x1>
     ee8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	09 f0       	breq	.+2      	; 0xef2 <main+0x7a>
     ef0:	d0 c1       	rjmp	.+928    	; 0x1292 <main+0x41a>
     ef2:	0f 2e       	mov	r0, r31
     ef4:	f0 e8       	ldi	r31, 0x80	; 128
     ef6:	af 2e       	mov	r10, r31
     ef8:	f1 e0       	ldi	r31, 0x01	; 1
     efa:	bf 2e       	mov	r11, r31
     efc:	f0 2d       	mov	r31, r0
	
};

Batary batary;

int main(void){
     efe:	e1 2c       	mov	r14, r1
     f00:	f1 2c       	mov	r15, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     f02:	c7 01       	movw	r24, r14
     f04:	87 70       	andi	r24, 0x07	; 7
     f06:	90 78       	andi	r25, 0x80	; 128
     f08:	99 23       	and	r25, r25
     f0a:	24 f4       	brge	.+8      	; 0xf14 <main+0x9c>
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	88 6f       	ori	r24, 0xF8	; 248
     f10:	9f 6f       	ori	r25, 0xFF	; 255
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	b6 01       	movw	r22, r12
     f16:	68 1b       	sub	r22, r24
     f18:	79 0b       	sbc	r23, r25
     f1a:	87 01       	movw	r16, r14
     f1c:	ff 20       	and	r15, r15
     f1e:	14 f4       	brge	.+4      	; 0xf24 <main+0xac>
     f20:	09 5f       	subi	r16, 0xF9	; 249
     f22:	1f 4f       	sbci	r17, 0xFF	; 255
     f24:	15 95       	asr	r17
     f26:	07 95       	ror	r16
     f28:	15 95       	asr	r17
     f2a:	07 95       	ror	r16
     f2c:	15 95       	asr	r17
     f2e:	07 95       	ror	r16
     f30:	16 95       	lsr	r17
     f32:	10 2f       	mov	r17, r16
     f34:	00 27       	eor	r16, r16
     f36:	17 95       	ror	r17
     f38:	07 95       	ror	r16
     f3a:	d8 01       	movw	r26, r16
     f3c:	ac 5f       	subi	r26, 0xFC	; 252
     f3e:	bd 4f       	sbci	r27, 0xFD	; 253
     f40:	0c 5d       	subi	r16, 0xDC	; 220
     f42:	1d 4f       	sbci	r17, 0xFD	; 253
     f44:	e5 01       	movw	r28, r10
     f46:	49 91       	ld	r20, Y+
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	fd 01       	movw	r30, r26
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	ca 01       	movw	r24, r20
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <main+0xe2>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <main+0xde>
     f5e:	80 78       	andi	r24, 0x80	; 128
     f60:	99 27       	eor	r25, r25
     f62:	06 2e       	mov	r0, r22
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <main+0xf2>
     f66:	95 95       	asr	r25
     f68:	87 95       	ror	r24
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <main+0xee>
     f6e:	90 81       	ld	r25, Z
     f70:	89 2b       	or	r24, r25
     f72:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	28 30       	cpi	r18, 0x08	; 8
     f7a:	31 05       	cpc	r19, r1
     f7c:	49 f7       	brne	.-46     	; 0xf50 <main+0xd8>
     f7e:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     f80:	a0 17       	cp	r26, r16
     f82:	b1 07       	cpc	r27, r17
     f84:	01 f7       	brne	.-64     	; 0xf46 <main+0xce>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     f86:	2f ef       	ldi	r18, 0xFF	; 255
     f88:	e2 1a       	sub	r14, r18
     f8a:	f2 0a       	sbc	r15, r18
     f8c:	84 e0       	ldi	r24, 0x04	; 4
     f8e:	a8 0e       	add	r10, r24
     f90:	b1 1c       	adc	r11, r1
     f92:	98 e0       	ldi	r25, 0x08	; 8
     f94:	e9 16       	cp	r14, r25
     f96:	f1 04       	cpc	r15, r1
     f98:	09 f0       	breq	.+2      	; 0xf9c <main+0x124>
     f9a:	b3 cf       	rjmp	.-154    	; 0xf02 <main+0x8a>
     f9c:	0e c1       	rjmp	.+540    	; 0x11ba <main+0x342>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <main+0x12e>
     fa4:	7b c1       	rjmp	.+758    	; 0x129c <main+0x424>
     fa6:	0f 2e       	mov	r0, r31
     fa8:	f0 e6       	ldi	r31, 0x60	; 96
     faa:	af 2e       	mov	r10, r31
     fac:	f1 e0       	ldi	r31, 0x01	; 1
     fae:	bf 2e       	mov	r11, r31
     fb0:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     fb2:	e1 2c       	mov	r14, r1
     fb4:	f1 2c       	mov	r15, r1
     fb6:	c7 01       	movw	r24, r14
     fb8:	87 70       	andi	r24, 0x07	; 7
     fba:	90 78       	andi	r25, 0x80	; 128
     fbc:	99 23       	and	r25, r25
     fbe:	24 f4       	brge	.+8      	; 0xfc8 <main+0x150>
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	88 6f       	ori	r24, 0xF8	; 248
     fc4:	9f 6f       	ori	r25, 0xFF	; 255
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	b6 01       	movw	r22, r12
     fca:	68 1b       	sub	r22, r24
     fcc:	79 0b       	sbc	r23, r25
     fce:	87 01       	movw	r16, r14
     fd0:	ff 20       	and	r15, r15
     fd2:	14 f4       	brge	.+4      	; 0xfd8 <main+0x160>
     fd4:	09 5f       	subi	r16, 0xF9	; 249
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
     fd8:	15 95       	asr	r17
     fda:	07 95       	ror	r16
     fdc:	15 95       	asr	r17
     fde:	07 95       	ror	r16
     fe0:	15 95       	asr	r17
     fe2:	07 95       	ror	r16
     fe4:	16 95       	lsr	r17
     fe6:	10 2f       	mov	r17, r16
     fe8:	00 27       	eor	r16, r16
     fea:	17 95       	ror	r17
     fec:	07 95       	ror	r16
     fee:	d8 01       	movw	r26, r16
     ff0:	ac 5f       	subi	r26, 0xFC	; 252
     ff2:	bd 4f       	sbci	r27, 0xFD	; 253
     ff4:	0c 5d       	subi	r16, 0xDC	; 220
     ff6:	1d 4f       	sbci	r17, 0xFD	; 253
     ff8:	e5 01       	movw	r28, r10
     ffa:	49 91       	ld	r20, Y+
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	fd 01       	movw	r30, r26
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	ca 01       	movw	r24, r20
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <main+0x196>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <main+0x192>
    1012:	80 78       	andi	r24, 0x80	; 128
    1014:	99 27       	eor	r25, r25
    1016:	06 2e       	mov	r0, r22
    1018:	02 c0       	rjmp	.+4      	; 0x101e <main+0x1a6>
    101a:	95 95       	asr	r25
    101c:	87 95       	ror	r24
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <main+0x1a2>
    1022:	90 81       	ld	r25, Z
    1024:	89 2b       	or	r24, r25
    1026:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1028:	2f 5f       	subi	r18, 0xFF	; 255
    102a:	3f 4f       	sbci	r19, 0xFF	; 255
    102c:	28 30       	cpi	r18, 0x08	; 8
    102e:	31 05       	cpc	r19, r1
    1030:	49 f7       	brne	.-46     	; 0x1004 <main+0x18c>
    1032:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    1034:	0a 17       	cp	r16, r26
    1036:	1b 07       	cpc	r17, r27
    1038:	01 f7       	brne	.-64     	; 0xffa <main+0x182>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    103a:	2f ef       	ldi	r18, 0xFF	; 255
    103c:	e2 1a       	sub	r14, r18
    103e:	f2 0a       	sbc	r15, r18
    1040:	84 e0       	ldi	r24, 0x04	; 4
    1042:	a8 0e       	add	r10, r24
    1044:	b1 1c       	adc	r11, r1
    1046:	98 e0       	ldi	r25, 0x08	; 8
    1048:	e9 16       	cp	r14, r25
    104a:	f1 04       	cpc	r15, r1
    104c:	09 f0       	breq	.+2      	; 0x1050 <main+0x1d8>
    104e:	b3 cf       	rjmp	.-154    	; 0xfb6 <main+0x13e>
    1050:	0e c1       	rjmp	.+540    	; 0x126e <main+0x3f6>

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	91 05       	cpc	r25, r1
    1056:	09 f0       	breq	.+2      	; 0x105a <main+0x1e2>
    1058:	26 c1       	rjmp	.+588    	; 0x12a6 <main+0x42e>
    105a:	0f 2e       	mov	r0, r31
    105c:	f0 e4       	ldi	r31, 0x40	; 64
    105e:	af 2e       	mov	r10, r31
    1060:	f1 e0       	ldi	r31, 0x01	; 1
    1062:	bf 2e       	mov	r11, r31
    1064:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1066:	e1 2c       	mov	r14, r1
    1068:	f1 2c       	mov	r15, r1
    106a:	c7 01       	movw	r24, r14
    106c:	87 70       	andi	r24, 0x07	; 7
    106e:	90 78       	andi	r25, 0x80	; 128
    1070:	99 23       	and	r25, r25
    1072:	24 f4       	brge	.+8      	; 0x107c <main+0x204>
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	88 6f       	ori	r24, 0xF8	; 248
    1078:	9f 6f       	ori	r25, 0xFF	; 255
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	b6 01       	movw	r22, r12
    107e:	68 1b       	sub	r22, r24
    1080:	79 0b       	sbc	r23, r25
    1082:	87 01       	movw	r16, r14
    1084:	ff 20       	and	r15, r15
    1086:	14 f4       	brge	.+4      	; 0x108c <main+0x214>
    1088:	09 5f       	subi	r16, 0xF9	; 249
    108a:	1f 4f       	sbci	r17, 0xFF	; 255
    108c:	15 95       	asr	r17
    108e:	07 95       	ror	r16
    1090:	15 95       	asr	r17
    1092:	07 95       	ror	r16
    1094:	15 95       	asr	r17
    1096:	07 95       	ror	r16
    1098:	16 95       	lsr	r17
    109a:	10 2f       	mov	r17, r16
    109c:	00 27       	eor	r16, r16
    109e:	17 95       	ror	r17
    10a0:	07 95       	ror	r16
    10a2:	d8 01       	movw	r26, r16
    10a4:	ac 5f       	subi	r26, 0xFC	; 252
    10a6:	bd 4f       	sbci	r27, 0xFD	; 253
    10a8:	0c 5d       	subi	r16, 0xDC	; 220
    10aa:	1d 4f       	sbci	r17, 0xFD	; 253
    10ac:	e5 01       	movw	r28, r10
    10ae:	49 91       	ld	r20, Y+
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	fd 01       	movw	r30, r26
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	ca 01       	movw	r24, r20
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <main+0x24a>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <main+0x246>
    10c6:	80 78       	andi	r24, 0x80	; 128
    10c8:	99 27       	eor	r25, r25
    10ca:	06 2e       	mov	r0, r22
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <main+0x25a>
    10ce:	95 95       	asr	r25
    10d0:	87 95       	ror	r24
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <main+0x256>
    10d6:	90 81       	ld	r25, Z
    10d8:	89 2b       	or	r24, r25
    10da:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	28 30       	cpi	r18, 0x08	; 8
    10e2:	31 05       	cpc	r19, r1
    10e4:	49 f7       	brne	.-46     	; 0x10b8 <main+0x240>
    10e6:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    10e8:	a0 17       	cp	r26, r16
    10ea:	b1 07       	cpc	r27, r17
    10ec:	01 f7       	brne	.-64     	; 0x10ae <main+0x236>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    10ee:	2f ef       	ldi	r18, 0xFF	; 255
    10f0:	e2 1a       	sub	r14, r18
    10f2:	f2 0a       	sbc	r15, r18
    10f4:	84 e0       	ldi	r24, 0x04	; 4
    10f6:	a8 0e       	add	r10, r24
    10f8:	b1 1c       	adc	r11, r1
    10fa:	98 e0       	ldi	r25, 0x08	; 8
    10fc:	e9 16       	cp	r14, r25
    10fe:	f1 04       	cpc	r15, r1
    1100:	09 f0       	breq	.+2      	; 0x1104 <main+0x28c>
    1102:	b3 cf       	rjmp	.-154    	; 0x106a <main+0x1f2>
    1104:	b4 c0       	rjmp	.+360    	; 0x126e <main+0x3f6>
void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	91 05       	cpc	r25, r1
    110a:	09 f0       	breq	.+2      	; 0x110e <main+0x296>
    110c:	d1 c0       	rjmp	.+418    	; 0x12b0 <main+0x438>
    110e:	0f 2e       	mov	r0, r31
    1110:	f0 e2       	ldi	r31, 0x20	; 32
    1112:	af 2e       	mov	r10, r31
    1114:	f1 e0       	ldi	r31, 0x01	; 1
    1116:	bf 2e       	mov	r11, r31
    1118:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    111a:	e1 2c       	mov	r14, r1
    111c:	f1 2c       	mov	r15, r1
    111e:	c7 01       	movw	r24, r14
    1120:	87 70       	andi	r24, 0x07	; 7
    1122:	90 78       	andi	r25, 0x80	; 128
    1124:	99 23       	and	r25, r25
    1126:	24 f4       	brge	.+8      	; 0x1130 <main+0x2b8>
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	88 6f       	ori	r24, 0xF8	; 248
    112c:	9f 6f       	ori	r25, 0xFF	; 255
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	b6 01       	movw	r22, r12
    1132:	68 1b       	sub	r22, r24
    1134:	79 0b       	sbc	r23, r25
    1136:	87 01       	movw	r16, r14
    1138:	ff 20       	and	r15, r15
    113a:	14 f4       	brge	.+4      	; 0x1140 <main+0x2c8>
    113c:	09 5f       	subi	r16, 0xF9	; 249
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	15 95       	asr	r17
    1142:	07 95       	ror	r16
    1144:	15 95       	asr	r17
    1146:	07 95       	ror	r16
    1148:	15 95       	asr	r17
    114a:	07 95       	ror	r16
    114c:	16 95       	lsr	r17
    114e:	10 2f       	mov	r17, r16
    1150:	00 27       	eor	r16, r16
    1152:	17 95       	ror	r17
    1154:	07 95       	ror	r16
    1156:	d8 01       	movw	r26, r16
    1158:	ac 5f       	subi	r26, 0xFC	; 252
    115a:	bd 4f       	sbci	r27, 0xFD	; 253
    115c:	0c 5d       	subi	r16, 0xDC	; 220
    115e:	1d 4f       	sbci	r17, 0xFD	; 253
    1160:	e5 01       	movw	r28, r10
    1162:	49 91       	ld	r20, Y+
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	fd 01       	movw	r30, r26
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	ca 01       	movw	r24, r20
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <main+0x2fe>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <main+0x2fa>
    117a:	80 78       	andi	r24, 0x80	; 128
    117c:	99 27       	eor	r25, r25
    117e:	06 2e       	mov	r0, r22
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <main+0x30e>
    1182:	95 95       	asr	r25
    1184:	87 95       	ror	r24
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <main+0x30a>
    118a:	90 81       	ld	r25, Z
    118c:	89 2b       	or	r24, r25
    118e:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	28 30       	cpi	r18, 0x08	; 8
    1196:	31 05       	cpc	r19, r1
    1198:	49 f7       	brne	.-46     	; 0x116c <main+0x2f4>
    119a:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    119c:	a0 17       	cp	r26, r16
    119e:	b1 07       	cpc	r27, r17
    11a0:	01 f7       	brne	.-64     	; 0x1162 <main+0x2ea>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    11a2:	2f ef       	ldi	r18, 0xFF	; 255
    11a4:	e2 1a       	sub	r14, r18
    11a6:	f2 0a       	sbc	r15, r18
    11a8:	84 e0       	ldi	r24, 0x04	; 4
    11aa:	a8 0e       	add	r10, r24
    11ac:	b1 1c       	adc	r11, r1
    11ae:	98 e0       	ldi	r25, 0x08	; 8
    11b0:	e9 16       	cp	r14, r25
    11b2:	f1 04       	cpc	r15, r1
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <main+0x340>
    11b6:	b3 cf       	rjmp	.-154    	; 0x111e <main+0x2a6>
    11b8:	5a c0       	rjmp	.+180    	; 0x126e <main+0x3f6>
    11ba:	86 2d       	mov	r24, r6
    11bc:	97 2d       	mov	r25, r7
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
    11be:	04 97       	sbiw	r24, 0x04	; 4
    11c0:	09 f0       	breq	.+2      	; 0x11c4 <main+0x34c>
    11c2:	55 c0       	rjmp	.+170    	; 0x126e <main+0x3f6>
    11c4:	0f 2e       	mov	r0, r31
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	af 2e       	mov	r10, r31
    11ca:	f1 e0       	ldi	r31, 0x01	; 1
    11cc:	bf 2e       	mov	r11, r31
    11ce:	f0 2d       	mov	r31, r0
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    11d0:	e1 2c       	mov	r14, r1
    11d2:	f1 2c       	mov	r15, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    11d4:	c7 01       	movw	r24, r14
    11d6:	87 70       	andi	r24, 0x07	; 7
    11d8:	90 78       	andi	r25, 0x80	; 128
    11da:	99 23       	and	r25, r25
    11dc:	24 f4       	brge	.+8      	; 0x11e6 <main+0x36e>
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	88 6f       	ori	r24, 0xF8	; 248
    11e2:	9f 6f       	ori	r25, 0xFF	; 255
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	b6 01       	movw	r22, r12
    11e8:	68 1b       	sub	r22, r24
    11ea:	79 0b       	sbc	r23, r25
    11ec:	87 01       	movw	r16, r14
    11ee:	ff 20       	and	r15, r15
    11f0:	14 f4       	brge	.+4      	; 0x11f6 <main+0x37e>
    11f2:	09 5f       	subi	r16, 0xF9	; 249
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	15 95       	asr	r17
    11f8:	07 95       	ror	r16
    11fa:	15 95       	asr	r17
    11fc:	07 95       	ror	r16
    11fe:	15 95       	asr	r17
    1200:	07 95       	ror	r16
    1202:	16 95       	lsr	r17
    1204:	10 2f       	mov	r17, r16
    1206:	00 27       	eor	r16, r16
    1208:	17 95       	ror	r17
    120a:	07 95       	ror	r16
    120c:	d8 01       	movw	r26, r16
    120e:	ac 5f       	subi	r26, 0xFC	; 252
    1210:	bd 4f       	sbci	r27, 0xFD	; 253
    1212:	0c 5d       	subi	r16, 0xDC	; 220
    1214:	1d 4f       	sbci	r17, 0xFD	; 253
    1216:	e5 01       	movw	r28, r10
    1218:	49 91       	ld	r20, Y+
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	fd 01       	movw	r30, r26
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	ca 01       	movw	r24, r20
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <main+0x3b4>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <main+0x3b0>
    1230:	80 78       	andi	r24, 0x80	; 128
    1232:	99 27       	eor	r25, r25
    1234:	06 2e       	mov	r0, r22
    1236:	02 c0       	rjmp	.+4      	; 0x123c <main+0x3c4>
    1238:	95 95       	asr	r25
    123a:	87 95       	ror	r24
    123c:	0a 94       	dec	r0
    123e:	e2 f7       	brpl	.-8      	; 0x1238 <main+0x3c0>
    1240:	90 81       	ld	r25, Z
    1242:	89 2b       	or	r24, r25
    1244:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1246:	2f 5f       	subi	r18, 0xFF	; 255
    1248:	3f 4f       	sbci	r19, 0xFF	; 255
    124a:	28 30       	cpi	r18, 0x08	; 8
    124c:	31 05       	cpc	r19, r1
    124e:	49 f7       	brne	.-46     	; 0x1222 <main+0x3aa>
    1250:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    1252:	0a 17       	cp	r16, r26
    1254:	1b 07       	cpc	r17, r27
    1256:	01 f7       	brne	.-64     	; 0x1218 <main+0x3a0>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1258:	2f ef       	ldi	r18, 0xFF	; 255
    125a:	e2 1a       	sub	r14, r18
    125c:	f2 0a       	sbc	r15, r18
    125e:	84 e0       	ldi	r24, 0x04	; 4
    1260:	a8 0e       	add	r10, r24
    1262:	b1 1c       	adc	r11, r1
    1264:	98 e0       	ldi	r25, 0x08	; 8
    1266:	e9 16       	cp	r14, r25
    1268:	f1 04       	cpc	r15, r1
    126a:	09 f0       	breq	.+2      	; 0x126e <main+0x3f6>
    126c:	b3 cf       	rjmp	.-154    	; 0x11d4 <main+0x35c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    126e:	2f e3       	ldi	r18, 0x3F	; 63
    1270:	8d e0       	ldi	r24, 0x0D	; 13
    1272:	93 e0       	ldi	r25, 0x03	; 3
    1274:	21 50       	subi	r18, 0x01	; 1
    1276:	80 40       	sbci	r24, 0x00	; 0
    1278:	90 40       	sbci	r25, 0x00	; 0
    127a:	e1 f7       	brne	.-8      	; 0x1274 <main+0x3fc>
    127c:	00 c0       	rjmp	.+0      	; 0x127e <main+0x406>
    127e:	00 00       	nop
    1280:	24 ce       	rjmp	.-952    	; 0xeca <main+0x52>
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
	if((PINB>>2)&0b00000001==1) kf++;
	if((PINB>>3)&0b00000001==1) kf++;
	curlvl=kf;
    1282:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__data_end+0x1>
    1286:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	09 f0       	breq	.+2      	; 0x1290 <main+0x418>
    128e:	87 ce       	rjmp	.-754    	; 0xf9e <main+0x126>
    1290:	30 ce       	rjmp	.-928    	; 0xef2 <main+0x7a>
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
    1292:	81 30       	cpi	r24, 0x01	; 1
    1294:	91 05       	cpc	r25, r1
    1296:	09 f0       	breq	.+2      	; 0x129a <main+0x422>
    1298:	dc ce       	rjmp	.-584    	; 0x1052 <main+0x1da>
    129a:	85 ce       	rjmp	.-758    	; 0xfa6 <main+0x12e>
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
    129c:	82 30       	cpi	r24, 0x02	; 2
    129e:	91 05       	cpc	r25, r1
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <main+0x42c>
    12a2:	31 cf       	rjmp	.-414    	; 0x1106 <main+0x28e>
    12a4:	da ce       	rjmp	.-588    	; 0x105a <main+0x1e2>
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
    12a6:	83 30       	cpi	r24, 0x03	; 3
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f0       	breq	.+2      	; 0x12ae <main+0x436>
    12ac:	88 cf       	rjmp	.-240    	; 0x11be <main+0x346>
    12ae:	2f cf       	rjmp	.-418    	; 0x110e <main+0x296>
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
    12b0:	04 97       	sbiw	r24, 0x04	; 4
    12b2:	e9 f6       	brne	.-70     	; 0x126e <main+0x3f6>
    12b4:	87 cf       	rjmp	.-242    	; 0x11c4 <main+0x34c>

000012b6 <_GLOBAL__sub_I_wire>:
	while(1)
	{
	 batary.refresh();
	 _delay_ms(1000);
	}
}
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29


};

TWI wire;
OLED oled(wire);
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	84 ea       	ldi	r24, 0xA4	; 164
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN4OLEDC1E3TWI>
private:
int curlvl;
public:
Batary()
{
	DDRB=0x00;
    12c4:	14 b8       	out	0x04, r1	; 4
	PORTB=0x0F;	
    12c6:	8f e0       	ldi	r24, 0x0F	; 15
    12c8:	85 b9       	out	0x05, r24	; 5
}

void refreshlvl()
{
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
    12ca:	83 b1       	in	r24, 0x03	; 3
	printlvltoOLEDbufer();
}

void refreshlvl()
{
	int kf=0;
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	c8 2f       	mov	r28, r24
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	d8 2f       	mov	r29, r24
    12d4:	ce 01       	movw	r24, r28
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
    12d6:	19 99       	sbic	0x03, 1	; 3
    12d8:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>2)&0b00000001==1) kf++;
    12da:	1a 99       	sbic	0x03, 2	; 3
    12dc:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>3)&0b00000001==1) kf++;
    12de:	1b 99       	sbic	0x03, 3	; 3
    12e0:	01 96       	adiw	r24, 0x01	; 1
	curlvl=kf;
    12e2:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__data_end+0x1>
    12e6:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
Batary()
{
	DDRB=0x00;
	PORTB=0x0F;	
	refreshlvl();
	printlvltoOLEDbufer();
    12ea:	82 ea       	ldi	r24, 0xA2	; 162
    12ec:	91 e0       	ldi	r25, 0x01	; 1
    12ee:	b7 db       	rcall	.-2194   	; 0xa5e <_ZN6Batary19printlvltoOLEDbuferEv>
	while(1)
	{
	 batary.refresh();
	 _delay_ms(1000);
	}
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <__tablejump2__>:
    12f6:	ee 0f       	add	r30, r30
    12f8:	ff 1f       	adc	r31, r31
    12fa:	00 24       	eor	r0, r0
    12fc:	00 1c       	adc	r0, r0
    12fe:	0b be       	out	0x3b, r0	; 59
    1300:	07 90       	elpm	r0, Z+
    1302:	f6 91       	elpm	r31, Z
    1304:	e0 2d       	mov	r30, r0
    1306:	09 94       	ijmp

00001308 <_exit>:
    1308:	f8 94       	cli

0000130a <__stop_program>:
    130a:	ff cf       	rjmp	.-2      	; 0x130a <__stop_program>
