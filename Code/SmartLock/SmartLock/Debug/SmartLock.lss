
SmartLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f2  00800100  00000cf6  00000d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000401  008002f2  008002f2  00000f7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dde  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0b  00000000  00000000  00002e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b28  00000000  00000000  00003815  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00004340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f6  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e13  00000000  00000000  00004b26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00005939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	8e c3       	rjmp	.+1820   	; 0x72e <__vector_4>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	6b 06       	cpc	r6, r27

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e4       	ldi	r29, 0x40	; 64
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	12 e0       	ldi	r17, 0x02	; 2
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	e6 ef       	ldi	r30, 0xF6	; 246
  a2:	fc e0       	ldi	r31, 0x0C	; 12
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	a2 3f       	cpi	r26, 0xF2	; 242
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	26 e0       	ldi	r18, 0x06	; 6
  b6:	a2 ef       	ldi	r26, 0xF2	; 242
  b8:	b2 e0       	ldi	r27, 0x02	; 2
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a3 3f       	cpi	r26, 0xF3	; 243
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c7 e4       	ldi	r28, 0x47	; 71
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <__do_global_ctors+0xe>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	07 d6       	rcall	.+3086   	; 0xce0 <__tablejump2__>
  d2:	c6 34       	cpi	r28, 0x46	; 70
  d4:	d1 07       	cpc	r29, r17
  d6:	d1 f7       	brne	.-12     	; 0xcc <__do_global_ctors+0x8>
  d8:	6d d5       	rcall	.+2778   	; 0xbb4 <main>
  da:	0b c6       	rjmp	.+3094   	; 0xcf2 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <_ZN4OLEDC1E3TWI>:
{
private:
uint8_t  oled_bufer[(OLED_HEIGHT/8)*OLED_WIDTH];
TWI wire;
public:
OLED(TWI _wire)
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
	public:
	TWI(){}

	void twi_Init(void)
	{
		TWBR=(((CPU_F)/(SCL_F)-16)/2);
  e2:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
		TWSR=0;
  e6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		while(!(TWCR & (1<<TWINT))){};
	}

	void twi_Start(void)
	{
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  ea:	24 ea       	ldi	r18, 0xA4	; 164
  ec:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
  f0:	ec eb       	ldi	r30, 0xBC	; 188
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	20 81       	ld	r18, Z
  f6:	22 23       	and	r18, r18
  f8:	ec f7       	brge	.-6      	; 0xf4 <_ZN4OLEDC1E3TWI+0x16>
		TWSR=0;
	}

	void twi_SendAdress(void) 
	{
		TWDR=(Dev_Adr<<1)|0;
  fa:	28 e7       	ldi	r18, 0x78	; 120
  fc:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR=(1<<TWINT)|(1<<TWEN);
 100:	24 e8       	ldi	r18, 0x84	; 132
 102:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	20 81       	ld	r18, Z
 10c:	22 23       	and	r18, r18
 10e:	ec f7       	brge	.-6      	; 0x10a <_ZN4OLEDC1E3TWI+0x2c>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 110:	20 e8       	ldi	r18, 0x80	; 128
 112:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 116:	24 e8       	ldi	r18, 0x84	; 132
 118:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 11c:	ec eb       	ldi	r30, 0xBC	; 188
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	20 81       	ld	r18, Z
 122:	22 23       	and	r18, r18
 124:	ec f7       	brge	.-6      	; 0x120 <_ZN4OLEDC1E3TWI+0x42>

	TWDR=command;							
 126:	28 ea       	ldi	r18, 0xA8	; 168
 128:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 12c:	24 e8       	ldi	r18, 0x84	; 132
 12e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 132:	ec eb       	ldi	r30, 0xBC	; 188
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	20 81       	ld	r18, Z
 138:	22 23       	and	r18, r18
 13a:	ec f7       	brge	.-6      	; 0x136 <_ZN4OLEDC1E3TWI+0x58>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 13c:	20 e8       	ldi	r18, 0x80	; 128
 13e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 142:	24 e8       	ldi	r18, 0x84	; 132
 144:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 148:	ec eb       	ldi	r30, 0xBC	; 188
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	20 81       	ld	r18, Z
 14e:	22 23       	and	r18, r18
 150:	ec f7       	brge	.-6      	; 0x14c <_ZN4OLEDC1E3TWI+0x6e>

	TWDR=command;							
 152:	2f e3       	ldi	r18, 0x3F	; 63
 154:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 158:	24 e8       	ldi	r18, 0x84	; 132
 15a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 15e:	ec eb       	ldi	r30, 0xBC	; 188
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	20 81       	ld	r18, Z
 164:	22 23       	and	r18, r18
 166:	ec f7       	brge	.-6      	; 0x162 <_ZN4OLEDC1E3TWI+0x84>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 168:	20 e8       	ldi	r18, 0x80	; 128
 16a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 16e:	24 e8       	ldi	r18, 0x84	; 132
 170:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 174:	ec eb       	ldi	r30, 0xBC	; 188
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	20 81       	ld	r18, Z
 17a:	22 23       	and	r18, r18
 17c:	ec f7       	brge	.-6      	; 0x178 <_ZN4OLEDC1E3TWI+0x9a>

	TWDR=command;							
 17e:	23 ed       	ldi	r18, 0xD3	; 211
 180:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 184:	24 e8       	ldi	r18, 0x84	; 132
 186:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 18a:	ec eb       	ldi	r30, 0xBC	; 188
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	20 81       	ld	r18, Z
 190:	22 23       	and	r18, r18
 192:	ec f7       	brge	.-6      	; 0x18e <_ZN4OLEDC1E3TWI+0xb0>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 194:	20 e8       	ldi	r18, 0x80	; 128
 196:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 19a:	24 e8       	ldi	r18, 0x84	; 132
 19c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 1a0:	ec eb       	ldi	r30, 0xBC	; 188
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	20 81       	ld	r18, Z
 1a6:	22 23       	and	r18, r18
 1a8:	ec f7       	brge	.-6      	; 0x1a4 <_ZN4OLEDC1E3TWI+0xc6>

	TWDR=command;							
 1aa:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 1ae:	24 e8       	ldi	r18, 0x84	; 132
 1b0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 1b4:	ec eb       	ldi	r30, 0xBC	; 188
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	20 81       	ld	r18, Z
 1ba:	22 23       	and	r18, r18
 1bc:	ec f7       	brge	.-6      	; 0x1b8 <_ZN4OLEDC1E3TWI+0xda>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 1be:	20 e8       	ldi	r18, 0x80	; 128
 1c0:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 1c4:	24 e8       	ldi	r18, 0x84	; 132
 1c6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 1ca:	ec eb       	ldi	r30, 0xBC	; 188
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	20 81       	ld	r18, Z
 1d0:	22 23       	and	r18, r18
 1d2:	ec f7       	brge	.-6      	; 0x1ce <_ZN4OLEDC1E3TWI+0xf0>

	TWDR=command;							
 1d4:	20 e4       	ldi	r18, 0x40	; 64
 1d6:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 1da:	24 e8       	ldi	r18, 0x84	; 132
 1dc:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 1e0:	ec eb       	ldi	r30, 0xBC	; 188
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	20 81       	ld	r18, Z
 1e6:	22 23       	and	r18, r18
 1e8:	ec f7       	brge	.-6      	; 0x1e4 <_ZN4OLEDC1E3TWI+0x106>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 1ea:	20 e8       	ldi	r18, 0x80	; 128
 1ec:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 1f0:	24 e8       	ldi	r18, 0x84	; 132
 1f2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 1f6:	ec eb       	ldi	r30, 0xBC	; 188
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	20 81       	ld	r18, Z
 1fc:	22 23       	and	r18, r18
 1fe:	ec f7       	brge	.-6      	; 0x1fa <_ZN4OLEDC1E3TWI+0x11c>

	TWDR=command;							
 200:	21 ea       	ldi	r18, 0xA1	; 161
 202:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 206:	24 e8       	ldi	r18, 0x84	; 132
 208:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 20c:	ec eb       	ldi	r30, 0xBC	; 188
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	20 81       	ld	r18, Z
 212:	22 23       	and	r18, r18
 214:	ec f7       	brge	.-6      	; 0x210 <_ZN4OLEDC1E3TWI+0x132>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 216:	20 e8       	ldi	r18, 0x80	; 128
 218:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 21c:	24 e8       	ldi	r18, 0x84	; 132
 21e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 222:	ec eb       	ldi	r30, 0xBC	; 188
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	20 81       	ld	r18, Z
 228:	22 23       	and	r18, r18
 22a:	ec f7       	brge	.-6      	; 0x226 <_ZN4OLEDC1E3TWI+0x148>

	TWDR=command;							
 22c:	28 ec       	ldi	r18, 0xC8	; 200
 22e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 232:	24 e8       	ldi	r18, 0x84	; 132
 234:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 238:	ec eb       	ldi	r30, 0xBC	; 188
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	20 81       	ld	r18, Z
 23e:	22 23       	and	r18, r18
 240:	ec f7       	brge	.-6      	; 0x23c <_ZN4OLEDC1E3TWI+0x15e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 242:	20 e8       	ldi	r18, 0x80	; 128
 244:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 248:	24 e8       	ldi	r18, 0x84	; 132
 24a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 24e:	ec eb       	ldi	r30, 0xBC	; 188
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	20 81       	ld	r18, Z
 254:	22 23       	and	r18, r18
 256:	ec f7       	brge	.-6      	; 0x252 <_ZN4OLEDC1E3TWI+0x174>

	TWDR=command;							
 258:	2a ed       	ldi	r18, 0xDA	; 218
 25a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 25e:	24 e8       	ldi	r18, 0x84	; 132
 260:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 264:	ec eb       	ldi	r30, 0xBC	; 188
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	20 81       	ld	r18, Z
 26a:	22 23       	and	r18, r18
 26c:	ec f7       	brge	.-6      	; 0x268 <_ZN4OLEDC1E3TWI+0x18a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 26e:	20 e8       	ldi	r18, 0x80	; 128
 270:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 274:	24 e8       	ldi	r18, 0x84	; 132
 276:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 27a:	ec eb       	ldi	r30, 0xBC	; 188
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	20 81       	ld	r18, Z
 280:	22 23       	and	r18, r18
 282:	ec f7       	brge	.-6      	; 0x27e <_ZN4OLEDC1E3TWI+0x1a0>

	TWDR=command;							
 284:	22 e1       	ldi	r18, 0x12	; 18
 286:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 28a:	24 e8       	ldi	r18, 0x84	; 132
 28c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 290:	ec eb       	ldi	r30, 0xBC	; 188
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	20 81       	ld	r18, Z
 296:	22 23       	and	r18, r18
 298:	ec f7       	brge	.-6      	; 0x294 <_ZN4OLEDC1E3TWI+0x1b6>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 29a:	20 e8       	ldi	r18, 0x80	; 128
 29c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 2a0:	24 e8       	ldi	r18, 0x84	; 132
 2a2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2a6:	ec eb       	ldi	r30, 0xBC	; 188
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	20 81       	ld	r18, Z
 2ac:	22 23       	and	r18, r18
 2ae:	ec f7       	brge	.-6      	; 0x2aa <_ZN4OLEDC1E3TWI+0x1cc>

	TWDR=command;							
 2b0:	21 e8       	ldi	r18, 0x81	; 129
 2b2:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 2b6:	24 e8       	ldi	r18, 0x84	; 132
 2b8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2bc:	ec eb       	ldi	r30, 0xBC	; 188
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	20 81       	ld	r18, Z
 2c2:	22 23       	and	r18, r18
 2c4:	ec f7       	brge	.-6      	; 0x2c0 <_ZN4OLEDC1E3TWI+0x1e2>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 2c6:	20 e8       	ldi	r18, 0x80	; 128
 2c8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 2cc:	24 e8       	ldi	r18, 0x84	; 132
 2ce:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2d2:	ec eb       	ldi	r30, 0xBC	; 188
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	20 81       	ld	r18, Z
 2d8:	22 23       	and	r18, r18
 2da:	ec f7       	brge	.-6      	; 0x2d6 <_ZN4OLEDC1E3TWI+0x1f8>

	TWDR=command;							
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 2e2:	24 e8       	ldi	r18, 0x84	; 132
 2e4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2e8:	ec eb       	ldi	r30, 0xBC	; 188
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	20 81       	ld	r18, Z
 2ee:	22 23       	and	r18, r18
 2f0:	ec f7       	brge	.-6      	; 0x2ec <_ZN4OLEDC1E3TWI+0x20e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 2f2:	20 e8       	ldi	r18, 0x80	; 128
 2f4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 2f8:	24 e8       	ldi	r18, 0x84	; 132
 2fa:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2fe:	ec eb       	ldi	r30, 0xBC	; 188
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	20 81       	ld	r18, Z
 304:	22 23       	and	r18, r18
 306:	ec f7       	brge	.-6      	; 0x302 <_ZN4OLEDC1E3TWI+0x224>

	TWDR=command;							
 308:	24 ea       	ldi	r18, 0xA4	; 164
 30a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 30e:	24 e8       	ldi	r18, 0x84	; 132
 310:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 314:	ec eb       	ldi	r30, 0xBC	; 188
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	20 81       	ld	r18, Z
 31a:	22 23       	and	r18, r18
 31c:	ec f7       	brge	.-6      	; 0x318 <_ZN4OLEDC1E3TWI+0x23a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 31e:	20 e8       	ldi	r18, 0x80	; 128
 320:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 324:	24 e8       	ldi	r18, 0x84	; 132
 326:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 32a:	ec eb       	ldi	r30, 0xBC	; 188
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	20 81       	ld	r18, Z
 330:	22 23       	and	r18, r18
 332:	ec f7       	brge	.-6      	; 0x32e <_ZN4OLEDC1E3TWI+0x250>

	TWDR=command;							
 334:	26 ea       	ldi	r18, 0xA6	; 166
 336:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 33a:	24 e8       	ldi	r18, 0x84	; 132
 33c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 340:	ec eb       	ldi	r30, 0xBC	; 188
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	20 81       	ld	r18, Z
 346:	22 23       	and	r18, r18
 348:	ec f7       	brge	.-6      	; 0x344 <_ZN4OLEDC1E3TWI+0x266>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 34a:	20 e8       	ldi	r18, 0x80	; 128
 34c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 350:	24 e8       	ldi	r18, 0x84	; 132
 352:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 356:	ec eb       	ldi	r30, 0xBC	; 188
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	20 81       	ld	r18, Z
 35c:	22 23       	and	r18, r18
 35e:	ec f7       	brge	.-6      	; 0x35a <_ZN4OLEDC1E3TWI+0x27c>

	TWDR=command;							
 360:	25 ed       	ldi	r18, 0xD5	; 213
 362:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 366:	24 e8       	ldi	r18, 0x84	; 132
 368:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 36c:	ec eb       	ldi	r30, 0xBC	; 188
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	20 81       	ld	r18, Z
 372:	22 23       	and	r18, r18
 374:	ec f7       	brge	.-6      	; 0x370 <_ZN4OLEDC1E3TWI+0x292>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 376:	20 e8       	ldi	r18, 0x80	; 128
 378:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 37c:	24 e8       	ldi	r18, 0x84	; 132
 37e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 382:	ec eb       	ldi	r30, 0xBC	; 188
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	20 81       	ld	r18, Z
 388:	22 23       	and	r18, r18
 38a:	ec f7       	brge	.-6      	; 0x386 <_ZN4OLEDC1E3TWI+0x2a8>

	TWDR=command;							
 38c:	20 e8       	ldi	r18, 0x80	; 128
 38e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 392:	24 e8       	ldi	r18, 0x84	; 132
 394:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 398:	ec eb       	ldi	r30, 0xBC	; 188
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	20 81       	ld	r18, Z
 39e:	22 23       	and	r18, r18
 3a0:	ec f7       	brge	.-6      	; 0x39c <_ZN4OLEDC1E3TWI+0x2be>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 3a2:	20 e8       	ldi	r18, 0x80	; 128
 3a4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 3a8:	24 e8       	ldi	r18, 0x84	; 132
 3aa:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 3ae:	ec eb       	ldi	r30, 0xBC	; 188
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	20 81       	ld	r18, Z
 3b4:	22 23       	and	r18, r18
 3b6:	ec f7       	brge	.-6      	; 0x3b2 <_ZN4OLEDC1E3TWI+0x2d4>

	TWDR=command;							
 3b8:	2d e8       	ldi	r18, 0x8D	; 141
 3ba:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 3be:	24 e8       	ldi	r18, 0x84	; 132
 3c0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 3c4:	ec eb       	ldi	r30, 0xBC	; 188
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	20 81       	ld	r18, Z
 3ca:	22 23       	and	r18, r18
 3cc:	ec f7       	brge	.-6      	; 0x3c8 <_ZN4OLEDC1E3TWI+0x2ea>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 3ce:	20 e8       	ldi	r18, 0x80	; 128
 3d0:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 3d4:	24 e8       	ldi	r18, 0x84	; 132
 3d6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 3da:	ec eb       	ldi	r30, 0xBC	; 188
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	20 81       	ld	r18, Z
 3e0:	22 23       	and	r18, r18
 3e2:	ec f7       	brge	.-6      	; 0x3de <_ZN4OLEDC1E3TWI+0x300>

	TWDR=command;							
 3e4:	24 e1       	ldi	r18, 0x14	; 20
 3e6:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 3ea:	24 e8       	ldi	r18, 0x84	; 132
 3ec:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 3f0:	ec eb       	ldi	r30, 0xBC	; 188
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	20 81       	ld	r18, Z
 3f6:	22 23       	and	r18, r18
 3f8:	ec f7       	brge	.-6      	; 0x3f4 <_ZN4OLEDC1E3TWI+0x316>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 3fa:	20 e8       	ldi	r18, 0x80	; 128
 3fc:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 400:	24 e8       	ldi	r18, 0x84	; 132
 402:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 406:	ec eb       	ldi	r30, 0xBC	; 188
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	20 81       	ld	r18, Z
 40c:	22 23       	and	r18, r18
 40e:	ec f7       	brge	.-6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

	TWDR=command;							
 410:	2f ea       	ldi	r18, 0xAF	; 175
 412:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 416:	24 e8       	ldi	r18, 0x84	; 132
 418:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 41c:	ec eb       	ldi	r30, 0xBC	; 188
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	20 81       	ld	r18, Z
 422:	22 23       	and	r18, r18
 424:	ec f7       	brge	.-6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 426:	20 e8       	ldi	r18, 0x80	; 128
 428:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 42c:	24 e8       	ldi	r18, 0x84	; 132
 42e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 432:	ec eb       	ldi	r30, 0xBC	; 188
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	20 81       	ld	r18, Z
 438:	22 23       	and	r18, r18
 43a:	ec f7       	brge	.-6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>

	TWDR=command;							
 43c:	20 e2       	ldi	r18, 0x20	; 32
 43e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 442:	24 e8       	ldi	r18, 0x84	; 132
 444:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 448:	ec eb       	ldi	r30, 0xBC	; 188
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	20 81       	ld	r18, Z
 44e:	22 23       	and	r18, r18
 450:	ec f7       	brge	.-6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 452:	20 e8       	ldi	r18, 0x80	; 128
 454:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 458:	24 e8       	ldi	r18, 0x84	; 132
 45a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 45e:	ec eb       	ldi	r30, 0xBC	; 188
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	20 81       	ld	r18, Z
 464:	22 23       	and	r18, r18
 466:	ec f7       	brge	.-6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>

	TWDR=command;							
 468:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 46c:	24 e8       	ldi	r18, 0x84	; 132
 46e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 472:	ec eb       	ldi	r30, 0xBC	; 188
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	20 81       	ld	r18, Z
 478:	22 23       	and	r18, r18
 47a:	ec f7       	brge	.-6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 47c:	20 e8       	ldi	r18, 0x80	; 128
 47e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 482:	24 e8       	ldi	r18, 0x84	; 132
 484:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 488:	ec eb       	ldi	r30, 0xBC	; 188
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	20 81       	ld	r18, Z
 48e:	22 23       	and	r18, r18
 490:	ec f7       	brge	.-6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>

	TWDR=command;							
 492:	21 e2       	ldi	r18, 0x21	; 33
 494:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 498:	24 e8       	ldi	r18, 0x84	; 132
 49a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 49e:	ec eb       	ldi	r30, 0xBC	; 188
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	20 81       	ld	r18, Z
 4a4:	22 23       	and	r18, r18
 4a6:	ec f7       	brge	.-6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 4a8:	20 e8       	ldi	r18, 0x80	; 128
 4aa:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 4ae:	24 e8       	ldi	r18, 0x84	; 132
 4b0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 4b4:	ec eb       	ldi	r30, 0xBC	; 188
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	20 81       	ld	r18, Z
 4ba:	22 23       	and	r18, r18
 4bc:	ec f7       	brge	.-6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>

	TWDR=command;							
 4be:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 4c2:	24 e8       	ldi	r18, 0x84	; 132
 4c4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 4c8:	ec eb       	ldi	r30, 0xBC	; 188
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	20 81       	ld	r18, Z
 4ce:	22 23       	and	r18, r18
 4d0:	ec f7       	brge	.-6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 4d2:	20 e8       	ldi	r18, 0x80	; 128
 4d4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 4d8:	24 e8       	ldi	r18, 0x84	; 132
 4da:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 4de:	ec eb       	ldi	r30, 0xBC	; 188
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	20 81       	ld	r18, Z
 4e4:	22 23       	and	r18, r18
 4e6:	ec f7       	brge	.-6      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>

	TWDR=command;							
 4e8:	2f e7       	ldi	r18, 0x7F	; 127
 4ea:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 4ee:	24 e8       	ldi	r18, 0x84	; 132
 4f0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 4f4:	ec eb       	ldi	r30, 0xBC	; 188
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	20 81       	ld	r18, Z
 4fa:	22 23       	and	r18, r18
 4fc:	ec f7       	brge	.-6      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 4fe:	20 e8       	ldi	r18, 0x80	; 128
 500:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 504:	24 e8       	ldi	r18, 0x84	; 132
 506:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 50a:	ec eb       	ldi	r30, 0xBC	; 188
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	20 81       	ld	r18, Z
 510:	22 23       	and	r18, r18
 512:	ec f7       	brge	.-6      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>

	TWDR=command;							
 514:	22 e2       	ldi	r18, 0x22	; 34
 516:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 51a:	24 e8       	ldi	r18, 0x84	; 132
 51c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 520:	ec eb       	ldi	r30, 0xBC	; 188
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	20 81       	ld	r18, Z
 526:	22 23       	and	r18, r18
 528:	ec f7       	brge	.-6      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 52a:	20 e8       	ldi	r18, 0x80	; 128
 52c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 530:	24 e8       	ldi	r18, 0x84	; 132
 532:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 536:	ec eb       	ldi	r30, 0xBC	; 188
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	20 81       	ld	r18, Z
 53c:	22 23       	and	r18, r18
 53e:	ec f7       	brge	.-6      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>

	TWDR=command;							
 540:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 544:	24 e8       	ldi	r18, 0x84	; 132
 546:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 54a:	ec eb       	ldi	r30, 0xBC	; 188
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	20 81       	ld	r18, Z
 550:	22 23       	and	r18, r18
 552:	ec f7       	brge	.-6      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 554:	20 e8       	ldi	r18, 0x80	; 128
 556:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 55a:	24 e8       	ldi	r18, 0x84	; 132
 55c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 560:	ec eb       	ldi	r30, 0xBC	; 188
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	20 81       	ld	r18, Z
 566:	22 23       	and	r18, r18
 568:	ec f7       	brge	.-6      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>

	TWDR=command;							
 56a:	27 e0       	ldi	r18, 0x07	; 7
 56c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 570:	24 e8       	ldi	r18, 0x84	; 132
 572:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 576:	ec eb       	ldi	r30, 0xBC	; 188
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	20 81       	ld	r18, Z
 57c:	22 23       	and	r18, r18
 57e:	ec f7       	brge	.-6      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
 580:	dc 01       	movw	r26, r24
 582:	9c 01       	movw	r18, r24
 584:	3c 5f       	subi	r19, 0xFC	; 252
 586:	fc 01       	movw	r30, r24
	OLED_Command(0);
	OLED_Command(7);
	
	for(int i=0;i<1024;i++)
	{
		oled_bufer[i]=0b00000000;
 588:	11 92       	st	Z+, r1
	OLED_Command(127);
	OLED_Command(0x22);
	OLED_Command(0);
	OLED_Command(7);
	
	for(int i=0;i<1024;i++)
 58a:	2e 17       	cp	r18, r30
 58c:	3f 07       	cpc	r19, r31
 58e:	e1 f7       	brne	.-8      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
}


void OLED_Write_Bufer()
{
	TWDR=0x40;
 590:	80 e4       	ldi	r24, 0x40	; 64
 592:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
 596:	84 e8       	ldi	r24, 0x84	; 132
 598:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}


void OLED_Data(int data)
{
	TWDR=data;							
 59c:	cb eb       	ldi	r28, 0xBB	; 187
 59e:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);				
 5a0:	ec eb       	ldi	r30, 0xBC	; 188
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	94 e8       	ldi	r25, 0x84	; 132
{
	TWDR=0x40;
	TWCR=(1<<TWINT)|(1<<TWEN);
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
			OLED_Data(oled_bufer[i]);
 5a6:	8d 91       	ld	r24, X+
}


void OLED_Data(int data)
{
	TWDR=data;							
 5a8:	88 83       	st	Y, r24
	TWCR=(1<<TWINT)|(1<<TWEN);				
 5aa:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))){};
 5ac:	80 81       	ld	r24, Z
 5ae:	88 23       	and	r24, r24
 5b0:	ec f7       	brge	.-6      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>

void OLED_Write_Bufer()
{
	TWDR=0x40;
	TWCR=(1<<TWINT)|(1<<TWEN);
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
 5b2:	a2 17       	cp	r26, r18
 5b4:	b3 07       	cpc	r27, r19
 5b6:	b9 f7       	brne	.-18     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
}


void OLED_Data(int data)
{
	TWDR=data;							
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 5be:	84 e8       	ldi	r24, 0x84	; 132
 5c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 5c4:	ec eb       	ldi	r30, 0xBC	; 188
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	88 23       	and	r24, r24
 5cc:	ec f7       	brge	.-6      	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
	{
		oled_bufer[i]=0b00000000;
	}
	OLED_Write_Bufer();
	OLED_Data(0b11111111);
}
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>:
			OLED_Data(oled_bufer[i]);
	}
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
 5d4:	2f 92       	push	r2
 5d6:	3f 92       	push	r3
 5d8:	4f 92       	push	r4
 5da:	5f 92       	push	r5
 5dc:	6f 92       	push	r6
 5de:	7f 92       	push	r7
 5e0:	8f 92       	push	r8
 5e2:	9f 92       	push	r9
 5e4:	af 92       	push	r10
 5e6:	bf 92       	push	r11
 5e8:	cf 92       	push	r12
 5ea:	df 92       	push	r13
 5ec:	ef 92       	push	r14
 5ee:	ff 92       	push	r15
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x26>
 5fa:	00 d0       	rcall	.+0      	; 0x5fc <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x28>
 5fc:	00 d0       	rcall	.+0      	; 0x5fe <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x2a>
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
 602:	9e 83       	std	Y+6, r25	; 0x06
 604:	8d 83       	std	Y+5, r24	; 0x05
 606:	3a 01       	movw	r6, r20
 608:	29 01       	movw	r4, r18
 60a:	18 01       	movw	r2, r16
{
	for(int j=0;j<height;j++)
 60c:	10 16       	cp	r1, r16
 60e:	11 06       	cpc	r1, r17
 610:	0c f0       	brlt	.+2      	; 0x614 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x40>
 612:	74 c0       	rjmp	.+232    	; 0x6fc <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x128>
 614:	3c 83       	std	Y+4, r19	; 0x04
 616:	2b 83       	std	Y+3, r18	; 0x03
 618:	8e 2c       	mov	r8, r14
 61a:	9f 2c       	mov	r9, r15
 61c:	c1 2c       	mov	r12, r1
 61e:	d1 2c       	mov	r13, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
 620:	0f 2e       	mov	r0, r31
 622:	f7 e0       	ldi	r31, 0x07	; 7
 624:	af 2e       	mov	r10, r31
 626:	b1 2c       	mov	r11, r1
 628:	f0 2d       	mov	r31, r0
 62a:	c9 01       	movw	r24, r18
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	9b 01       	movw	r18, r22
 63a:	28 0f       	add	r18, r24
 63c:	39 1f       	adc	r19, r25
 63e:	3a 83       	std	Y+2, r19	; 0x02
 640:	29 83       	std	Y+1, r18	; 0x01
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
 642:	14 14       	cp	r1, r4
 644:	15 04       	cpc	r1, r5
 646:	0c f0       	brlt	.+2      	; 0x64a <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x76>
 648:	4e c0       	rjmp	.+156    	; 0x6e6 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x112>
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
 64a:	c6 01       	movw	r24, r12
 64c:	87 70       	andi	r24, 0x07	; 7
 64e:	90 78       	andi	r25, 0x80	; 128
 650:	99 23       	and	r25, r25
 652:	24 f4       	brge	.+8      	; 0x65c <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x88>
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	88 6f       	ori	r24, 0xF8	; 248
 658:	9f 6f       	ori	r25, 0xFF	; 255
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	85 01       	movw	r16, r10
 65e:	08 1b       	sub	r16, r24
 660:	19 0b       	sbc	r17, r25
 662:	76 01       	movw	r14, r12
 664:	dd 20       	and	r13, r13
 666:	1c f4       	brge	.+6      	; 0x66e <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x9a>
 668:	97 e0       	ldi	r25, 0x07	; 7
 66a:	e9 0e       	add	r14, r25
 66c:	f1 1c       	adc	r15, r1
 66e:	f5 94       	asr	r15
 670:	e7 94       	ror	r14
 672:	f5 94       	asr	r15
 674:	e7 94       	ror	r14
 676:	f5 94       	asr	r15
 678:	e7 94       	ror	r14
 67a:	e6 0c       	add	r14, r6
 67c:	f7 1c       	adc	r15, r7
 67e:	f6 94       	lsr	r15
 680:	fe 2c       	mov	r15, r14
 682:	ee 24       	eor	r14, r14
 684:	f7 94       	ror	r15
 686:	e7 94       	ror	r14
 688:	ab 01       	movw	r20, r22
 68a:	4e 0d       	add	r20, r14
 68c:	5f 1d       	adc	r21, r15
 68e:	2d 81       	ldd	r18, Y+5	; 0x05
 690:	3e 81       	ldd	r19, Y+6	; 0x06
 692:	42 0f       	add	r20, r18
 694:	53 1f       	adc	r21, r19
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	9a 81       	ldd	r25, Y+2	; 0x02
 69a:	e8 0e       	add	r14, r24
 69c:	f9 1e       	adc	r15, r25
 69e:	e2 0e       	add	r14, r18
 6a0:	f3 1e       	adc	r15, r19
 6a2:	d4 01       	movw	r26, r8
 6a4:	fa 01       	movw	r30, r20
 6a6:	20 e0       	ldi	r18, 0x00	; 0
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	8c 91       	ld	r24, X
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 2e       	mov	r0, r18
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xe2>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	0a 94       	dec	r0
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xde>
 6ba:	80 78       	andi	r24, 0x80	; 128
 6bc:	99 27       	eor	r25, r25
 6be:	00 2e       	mov	r0, r16
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xf2>
 6c2:	95 95       	asr	r25
 6c4:	87 95       	ror	r24
 6c6:	0a 94       	dec	r0
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xee>
 6ca:	90 81       	ld	r25, Z
 6cc:	89 2b       	or	r24, r25
 6ce:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
 6d0:	2f 5f       	subi	r18, 0xFF	; 255
 6d2:	3f 4f       	sbci	r19, 0xFF	; 255
 6d4:	28 30       	cpi	r18, 0x08	; 8
 6d6:	31 05       	cpc	r19, r1
 6d8:	41 f7       	brne	.-48     	; 0x6aa <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xd6>
 6da:	48 5f       	subi	r20, 0xF8	; 248
 6dc:	5f 4f       	sbci	r21, 0xFF	; 255
 6de:	11 96       	adiw	r26, 0x01	; 1
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
 6e0:	4e 15       	cp	r20, r14
 6e2:	5f 05       	cpc	r21, r15
 6e4:	f9 f6       	brne	.-66     	; 0x6a4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xd0>
}


void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
 6e6:	3f ef       	ldi	r19, 0xFF	; 255
 6e8:	c3 1a       	sub	r12, r19
 6ea:	d3 0a       	sbc	r13, r19
 6ec:	8b 81       	ldd	r24, Y+3	; 0x03
 6ee:	9c 81       	ldd	r25, Y+4	; 0x04
 6f0:	88 0e       	add	r8, r24
 6f2:	99 1e       	adc	r9, r25
 6f4:	2c 14       	cp	r2, r12
 6f6:	3d 04       	cpc	r3, r13
 6f8:	09 f0       	breq	.+2      	; 0x6fc <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x128>
 6fa:	a3 cf       	rjmp	.-186    	; 0x642 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x6e>
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
			}
		}
	}
}
 6fc:	26 96       	adiw	r28, 0x06	; 6
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	f8 94       	cli
 702:	de bf       	out	0x3e, r29	; 62
 704:	0f be       	out	0x3f, r0	; 63
 706:	cd bf       	out	0x3d, r28	; 61
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	1f 91       	pop	r17
 70e:	0f 91       	pop	r16
 710:	ff 90       	pop	r15
 712:	ef 90       	pop	r14
 714:	df 90       	pop	r13
 716:	cf 90       	pop	r12
 718:	bf 90       	pop	r11
 71a:	af 90       	pop	r10
 71c:	9f 90       	pop	r9
 71e:	8f 90       	pop	r8
 720:	7f 90       	pop	r7
 722:	6f 90       	pop	r6
 724:	5f 90       	pop	r5
 726:	4f 90       	pop	r4
 728:	3f 90       	pop	r3
 72a:	2f 90       	pop	r2
 72c:	08 95       	ret

0000072e <__vector_4>:
bool button2=false;
bool button3=false;
bool butonpressed=false;

ISR(PCINT0_vect)
{
 72e:	1f 92       	push	r1
 730:	0f 92       	push	r0
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	0f 92       	push	r0
 736:	11 24       	eor	r1, r1
 738:	0b b6       	in	r0, 0x3b	; 59
 73a:	0f 92       	push	r0
 73c:	8f 93       	push	r24
 73e:	9f 93       	push	r25
 740:	ef 93       	push	r30
 742:	ff 93       	push	r31
    cli();
 744:	f8 94       	cli
	if (num == 1)
 746:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <num>
 74a:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <num+0x1>
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	29 f4       	brne	.+10     	; 0x75c <__vector_4+0x2e>
	num = 0;
 752:	10 92 f1 02 	sts	0x02F1, r1	; 0x8002f1 <num+0x1>
 756:	10 92 f0 02 	sts	0x02F0, r1	; 0x8002f0 <num>
 75a:	06 c0       	rjmp	.+12     	; 0x768 <__vector_4+0x3a>
	else
    num = 1;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <num+0x1>
 764:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <num>
//sleep_disable();
	if(PINA==0b00000100 )
 768:	80 b1       	in	r24, 0x00	; 0
 76a:	84 30       	cpi	r24, 0x04	; 4
 76c:	09 f0       	breq	.+2      	; 0x770 <__vector_4+0x42>
 76e:	56 c0       	rjmp	.+172    	; 0x81c <__vector_4+0xee>
}


void OLED_Data(int data)
{
	TWDR=data;							
 770:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 774:	84 e8       	ldi	r24, 0x84	; 132
 776:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 77a:	ec eb       	ldi	r30, 0xBC	; 188
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	80 81       	ld	r24, Z
 780:	88 23       	and	r24, r24
 782:	ec f7       	brge	.-6      	; 0x77e <__vector_4+0x50>
}


void OLED_Data(int data)
{
	TWDR=data;							
 784:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 788:	84 e8       	ldi	r24, 0x84	; 132
 78a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 78e:	ec eb       	ldi	r30, 0xBC	; 188
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	80 81       	ld	r24, Z
 794:	88 23       	and	r24, r24
 796:	ec f7       	brge	.-6      	; 0x792 <__vector_4+0x64>
}


void OLED_Data(int data)
{
	TWDR=data;							
 798:	8e e7       	ldi	r24, 0x7E	; 126
 79a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 79e:	84 e8       	ldi	r24, 0x84	; 132
 7a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 7a4:	ec eb       	ldi	r30, 0xBC	; 188
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	80 81       	ld	r24, Z
 7aa:	88 23       	and	r24, r24
 7ac:	ec f7       	brge	.-6      	; 0x7a8 <__vector_4+0x7a>
}


void OLED_Data(int data)
{
	TWDR=data;							
 7ae:	82 e4       	ldi	r24, 0x42	; 66
 7b0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 7b4:	84 e8       	ldi	r24, 0x84	; 132
 7b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 7ba:	ec eb       	ldi	r30, 0xBC	; 188
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	80 81       	ld	r24, Z
 7c0:	88 23       	and	r24, r24
 7c2:	ec f7       	brge	.-6      	; 0x7be <__vector_4+0x90>
}


void OLED_Data(int data)
{
	TWDR=data;							
 7c4:	82 e4       	ldi	r24, 0x42	; 66
 7c6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 7ca:	84 e8       	ldi	r24, 0x84	; 132
 7cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 7d0:	ec eb       	ldi	r30, 0xBC	; 188
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	80 81       	ld	r24, Z
 7d6:	88 23       	and	r24, r24
 7d8:	ec f7       	brge	.-6      	; 0x7d4 <__vector_4+0xa6>
}


void OLED_Data(int data)
{
	TWDR=data;							
 7da:	8e e7       	ldi	r24, 0x7E	; 126
 7dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 7e0:	84 e8       	ldi	r24, 0x84	; 132
 7e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 7e6:	ec eb       	ldi	r30, 0xBC	; 188
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	88 23       	and	r24, r24
 7ee:	ec f7       	brge	.-6      	; 0x7ea <__vector_4+0xbc>
}


void OLED_Data(int data)
{
	TWDR=data;							
 7f0:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 7f4:	84 e8       	ldi	r24, 0x84	; 132
 7f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 7fa:	ec eb       	ldi	r30, 0xBC	; 188
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	80 81       	ld	r24, Z
 800:	88 23       	and	r24, r24
 802:	ec f7       	brge	.-6      	; 0x7fe <__vector_4+0xd0>
}


void OLED_Data(int data)
{
	TWDR=data;							
 804:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 808:	84 e8       	ldi	r24, 0x84	; 132
 80a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 80e:	ec eb       	ldi	r30, 0xBC	; 188
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	88 23       	and	r24, r24
 816:	ec f7       	brge	.-6      	; 0x812 <__vector_4+0xe4>
    num = 1;
//sleep_disable();
	if(PINA==0b00000100 )
	{
		oled.writenumber(0);
		SMCR|=0b00000000;
 818:	83 b7       	in	r24, 0x33	; 51
 81a:	83 bf       	out	0x33, r24	; 51
	}
	if(PINA==0b00001000)
 81c:	80 b1       	in	r24, 0x00	; 0
 81e:	88 30       	cpi	r24, 0x08	; 8
 820:	09 f0       	breq	.+2      	; 0x824 <__vector_4+0xf6>
 822:	56 c0       	rjmp	.+172    	; 0x8d0 <__vector_4+0x1a2>
}


void OLED_Data(int data)
{
	TWDR=data;							
 824:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 828:	84 e8       	ldi	r24, 0x84	; 132
 82a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 82e:	ec eb       	ldi	r30, 0xBC	; 188
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	88 23       	and	r24, r24
 836:	ec f7       	brge	.-6      	; 0x832 <__vector_4+0x104>
}


void OLED_Data(int data)
{
	TWDR=data;							
 838:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 83c:	84 e8       	ldi	r24, 0x84	; 132
 83e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 842:	ec eb       	ldi	r30, 0xBC	; 188
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	88 23       	and	r24, r24
 84a:	ec f7       	brge	.-6      	; 0x846 <__vector_4+0x118>
}


void OLED_Data(int data)
{
	TWDR=data;							
 84c:	88 e0       	ldi	r24, 0x08	; 8
 84e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 852:	84 e8       	ldi	r24, 0x84	; 132
 854:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 858:	ec eb       	ldi	r30, 0xBC	; 188
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	88 23       	and	r24, r24
 860:	ec f7       	brge	.-6      	; 0x85c <__vector_4+0x12e>
}


void OLED_Data(int data)
{
	TWDR=data;							
 862:	86 e4       	ldi	r24, 0x46	; 70
 864:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 868:	84 e8       	ldi	r24, 0x84	; 132
 86a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 86e:	ec eb       	ldi	r30, 0xBC	; 188
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	80 81       	ld	r24, Z
 874:	88 23       	and	r24, r24
 876:	ec f7       	brge	.-6      	; 0x872 <__vector_4+0x144>
}


void OLED_Data(int data)
{
	TWDR=data;							
 878:	8e e7       	ldi	r24, 0x7E	; 126
 87a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 87e:	84 e8       	ldi	r24, 0x84	; 132
 880:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 884:	ec eb       	ldi	r30, 0xBC	; 188
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	80 81       	ld	r24, Z
 88a:	88 23       	and	r24, r24
 88c:	ec f7       	brge	.-6      	; 0x888 <__vector_4+0x15a>
}


void OLED_Data(int data)
{
	TWDR=data;							
 88e:	80 e4       	ldi	r24, 0x40	; 64
 890:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 894:	84 e8       	ldi	r24, 0x84	; 132
 896:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 89a:	ec eb       	ldi	r30, 0xBC	; 188
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	80 81       	ld	r24, Z
 8a0:	88 23       	and	r24, r24
 8a2:	ec f7       	brge	.-6      	; 0x89e <__vector_4+0x170>
}


void OLED_Data(int data)
{
	TWDR=data;							
 8a4:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 8a8:	84 e8       	ldi	r24, 0x84	; 132
 8aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 8ae:	ec eb       	ldi	r30, 0xBC	; 188
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	80 81       	ld	r24, Z
 8b4:	88 23       	and	r24, r24
 8b6:	ec f7       	brge	.-6      	; 0x8b2 <__vector_4+0x184>
}


void OLED_Data(int data)
{
	TWDR=data;							
 8b8:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 8bc:	84 e8       	ldi	r24, 0x84	; 132
 8be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 8c2:	ec eb       	ldi	r30, 0xBC	; 188
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	88 23       	and	r24, r24
 8ca:	ec f7       	brge	.-6      	; 0x8c6 <__vector_4+0x198>
		SMCR|=0b00000000;
	}
	if(PINA==0b00001000)
	{
		oled.writenumber(1);
		SMCR|=0b00000000;
 8cc:	83 b7       	in	r24, 0x33	; 51
 8ce:	83 bf       	out	0x33, r24	; 51
		
	}
	if(PINA==0b00010000)
 8d0:	80 b1       	in	r24, 0x00	; 0
 8d2:	80 31       	cpi	r24, 0x10	; 16
 8d4:	09 f0       	breq	.+2      	; 0x8d8 <__vector_4+0x1aa>
 8d6:	57 c0       	rjmp	.+174    	; 0x986 <__vector_4+0x258>
}


void OLED_Data(int data)
{
	TWDR=data;							
 8d8:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 8dc:	84 e8       	ldi	r24, 0x84	; 132
 8de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 8e2:	ec eb       	ldi	r30, 0xBC	; 188
 8e4:	f0 e0       	ldi	r31, 0x00	; 0
 8e6:	80 81       	ld	r24, Z
 8e8:	88 23       	and	r24, r24
 8ea:	ec f7       	brge	.-6      	; 0x8e6 <__vector_4+0x1b8>
}


void OLED_Data(int data)
{
	TWDR=data;							
 8ec:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 8f0:	84 e8       	ldi	r24, 0x84	; 132
 8f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 8f6:	ec eb       	ldi	r30, 0xBC	; 188
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	88 23       	and	r24, r24
 8fe:	ec f7       	brge	.-6      	; 0x8fa <__vector_4+0x1cc>
}


void OLED_Data(int data)
{
	TWDR=data;							
 900:	82 e7       	ldi	r24, 0x72	; 114
 902:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 906:	84 e8       	ldi	r24, 0x84	; 132
 908:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 90c:	ec eb       	ldi	r30, 0xBC	; 188
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	80 81       	ld	r24, Z
 912:	88 23       	and	r24, r24
 914:	ec f7       	brge	.-6      	; 0x910 <__vector_4+0x1e2>
}


void OLED_Data(int data)
{
	TWDR=data;							
 916:	82 e5       	ldi	r24, 0x52	; 82
 918:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 91c:	84 e8       	ldi	r24, 0x84	; 132
 91e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 922:	ec eb       	ldi	r30, 0xBC	; 188
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	80 81       	ld	r24, Z
 928:	88 23       	and	r24, r24
 92a:	ec f7       	brge	.-6      	; 0x926 <__vector_4+0x1f8>
}


void OLED_Data(int data)
{
	TWDR=data;							
 92c:	8a e4       	ldi	r24, 0x4A	; 74
 92e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 932:	84 e8       	ldi	r24, 0x84	; 132
 934:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 938:	ec eb       	ldi	r30, 0xBC	; 188
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	80 81       	ld	r24, Z
 93e:	88 23       	and	r24, r24
 940:	ec f7       	brge	.-6      	; 0x93c <__vector_4+0x20e>
}


void OLED_Data(int data)
{
	TWDR=data;							
 942:	8e e4       	ldi	r24, 0x4E	; 78
 944:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 948:	84 e8       	ldi	r24, 0x84	; 132
 94a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 94e:	ec eb       	ldi	r30, 0xBC	; 188
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	80 81       	ld	r24, Z
 954:	88 23       	and	r24, r24
 956:	ec f7       	brge	.-6      	; 0x952 <__vector_4+0x224>
}


void OLED_Data(int data)
{
	TWDR=data;							
 958:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 95c:	84 e8       	ldi	r24, 0x84	; 132
 95e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 962:	ec eb       	ldi	r30, 0xBC	; 188
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	88 23       	and	r24, r24
 96a:	ec f7       	brge	.-6      	; 0x966 <__vector_4+0x238>
}


void OLED_Data(int data)
{
	TWDR=data;							
 96c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 970:	84 e8       	ldi	r24, 0x84	; 132
 972:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 976:	ec eb       	ldi	r30, 0xBC	; 188
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	88 23       	and	r24, r24
 97e:	ec f7       	brge	.-6      	; 0x97a <__vector_4+0x24c>
	}
	if(PINA==0b00010000)
	{
		oled.writenumber(2);
		
		SMCR|=0b00000001;
 980:	83 b7       	in	r24, 0x33	; 51
 982:	81 60       	ori	r24, 0x01	; 1
 984:	83 bf       	out	0x33, r24	; 51
	}
	if(PINA==0b00100000)
 986:	80 b1       	in	r24, 0x00	; 0
 988:	80 32       	cpi	r24, 0x20	; 32
 98a:	09 f0       	breq	.+2      	; 0x98e <__vector_4+0x260>
 98c:	57 c0       	rjmp	.+174    	; 0xa3c <__vector_4+0x30e>
}


void OLED_Data(int data)
{
	TWDR=data;							
 98e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 992:	84 e8       	ldi	r24, 0x84	; 132
 994:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 998:	ec eb       	ldi	r30, 0xBC	; 188
 99a:	f0 e0       	ldi	r31, 0x00	; 0
 99c:	80 81       	ld	r24, Z
 99e:	88 23       	and	r24, r24
 9a0:	ec f7       	brge	.-6      	; 0x99c <__vector_4+0x26e>
}


void OLED_Data(int data)
{
	TWDR=data;							
 9a2:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 9a6:	84 e8       	ldi	r24, 0x84	; 132
 9a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 9ac:	ec eb       	ldi	r30, 0xBC	; 188
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	88 23       	and	r24, r24
 9b4:	ec f7       	brge	.-6      	; 0x9b0 <__vector_4+0x282>
}


void OLED_Data(int data)
{
	TWDR=data;							
 9b6:	8a e4       	ldi	r24, 0x4A	; 74
 9b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 9bc:	84 e8       	ldi	r24, 0x84	; 132
 9be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 9c2:	ec eb       	ldi	r30, 0xBC	; 188
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	88 23       	and	r24, r24
 9ca:	ec f7       	brge	.-6      	; 0x9c6 <__vector_4+0x298>
}


void OLED_Data(int data)
{
	TWDR=data;							
 9cc:	8a e4       	ldi	r24, 0x4A	; 74
 9ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 9d2:	84 e8       	ldi	r24, 0x84	; 132
 9d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 9d8:	ec eb       	ldi	r30, 0xBC	; 188
 9da:	f0 e0       	ldi	r31, 0x00	; 0
 9dc:	80 81       	ld	r24, Z
 9de:	88 23       	and	r24, r24
 9e0:	ec f7       	brge	.-6      	; 0x9dc <__vector_4+0x2ae>
}


void OLED_Data(int data)
{
	TWDR=data;							
 9e2:	8a e4       	ldi	r24, 0x4A	; 74
 9e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 9e8:	84 e8       	ldi	r24, 0x84	; 132
 9ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 9ee:	ec eb       	ldi	r30, 0xBC	; 188
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	80 81       	ld	r24, Z
 9f4:	88 23       	and	r24, r24
 9f6:	ec f7       	brge	.-6      	; 0x9f2 <__vector_4+0x2c4>
}


void OLED_Data(int data)
{
	TWDR=data;							
 9f8:	8e e7       	ldi	r24, 0x7E	; 126
 9fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 9fe:	84 e8       	ldi	r24, 0x84	; 132
 a00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 a04:	ec eb       	ldi	r30, 0xBC	; 188
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	88 23       	and	r24, r24
 a0c:	ec f7       	brge	.-6      	; 0xa08 <__vector_4+0x2da>
}


void OLED_Data(int data)
{
	TWDR=data;							
 a0e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 a12:	84 e8       	ldi	r24, 0x84	; 132
 a14:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 a18:	ec eb       	ldi	r30, 0xBC	; 188
 a1a:	f0 e0       	ldi	r31, 0x00	; 0
 a1c:	80 81       	ld	r24, Z
 a1e:	88 23       	and	r24, r24
 a20:	ec f7       	brge	.-6      	; 0xa1c <__vector_4+0x2ee>
}


void OLED_Data(int data)
{
	TWDR=data;							
 a22:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 a26:	84 e8       	ldi	r24, 0x84	; 132
 a28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 a2c:	ec eb       	ldi	r30, 0xBC	; 188
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	88 23       	and	r24, r24
 a34:	ec f7       	brge	.-6      	; 0xa30 <__vector_4+0x302>
	}
	if(PINA==0b00100000)
	{
		oled.writenumber(3);
		
		SMCR|=0b00000001;
 a36:	83 b7       	in	r24, 0x33	; 51
 a38:	81 60       	ori	r24, 0x01	; 1
 a3a:	83 bf       	out	0x33, r24	; 51
	}
		if(PINA==0b00011000)
 a3c:	80 b1       	in	r24, 0x00	; 0
 a3e:	88 31       	cpi	r24, 0x18	; 24
 a40:	09 f0       	breq	.+2      	; 0xa44 <__vector_4+0x316>
 a42:	54 c0       	rjmp	.+168    	; 0xaec <__vector_4+0x3be>
}


void OLED_Data(int data)
{
	TWDR=data;							
 a44:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 a48:	84 e8       	ldi	r24, 0x84	; 132
 a4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 a4e:	ec eb       	ldi	r30, 0xBC	; 188
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	80 81       	ld	r24, Z
 a54:	88 23       	and	r24, r24
 a56:	ec f7       	brge	.-6      	; 0xa52 <__vector_4+0x324>
}


void OLED_Data(int data)
{
	TWDR=data;							
 a58:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 a5c:	84 e8       	ldi	r24, 0x84	; 132
 a5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 a62:	ec eb       	ldi	r30, 0xBC	; 188
 a64:	f0 e0       	ldi	r31, 0x00	; 0
 a66:	80 81       	ld	r24, Z
 a68:	88 23       	and	r24, r24
 a6a:	ec f7       	brge	.-6      	; 0xa66 <__vector_4+0x338>
}


void OLED_Data(int data)
{
	TWDR=data;							
 a6c:	8c e1       	ldi	r24, 0x1C	; 28
 a6e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 a72:	84 e8       	ldi	r24, 0x84	; 132
 a74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 a78:	ec eb       	ldi	r30, 0xBC	; 188
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	80 81       	ld	r24, Z
 a7e:	88 23       	and	r24, r24
 a80:	ec f7       	brge	.-6      	; 0xa7c <__vector_4+0x34e>
}


void OLED_Data(int data)
{
	TWDR=data;							
 a82:	80 e1       	ldi	r24, 0x10	; 16
 a84:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 a88:	84 e8       	ldi	r24, 0x84	; 132
 a8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 a8e:	ec eb       	ldi	r30, 0xBC	; 188
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	80 81       	ld	r24, Z
 a94:	88 23       	and	r24, r24
 a96:	ec f7       	brge	.-6      	; 0xa92 <__vector_4+0x364>
}


void OLED_Data(int data)
{
	TWDR=data;							
 a98:	80 e1       	ldi	r24, 0x10	; 16
 a9a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 a9e:	84 e8       	ldi	r24, 0x84	; 132
 aa0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 aa4:	ec eb       	ldi	r30, 0xBC	; 188
 aa6:	f0 e0       	ldi	r31, 0x00	; 0
 aa8:	80 81       	ld	r24, Z
 aaa:	88 23       	and	r24, r24
 aac:	ec f7       	brge	.-6      	; 0xaa8 <__vector_4+0x37a>
}


void OLED_Data(int data)
{
	TWDR=data;							
 aae:	8e e7       	ldi	r24, 0x7E	; 126
 ab0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 ab4:	84 e8       	ldi	r24, 0x84	; 132
 ab6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 aba:	ec eb       	ldi	r30, 0xBC	; 188
 abc:	f0 e0       	ldi	r31, 0x00	; 0
 abe:	80 81       	ld	r24, Z
 ac0:	88 23       	and	r24, r24
 ac2:	ec f7       	brge	.-6      	; 0xabe <__vector_4+0x390>
}


void OLED_Data(int data)
{
	TWDR=data;							
 ac4:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 ac8:	84 e8       	ldi	r24, 0x84	; 132
 aca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 ace:	ec eb       	ldi	r30, 0xBC	; 188
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	80 81       	ld	r24, Z
 ad4:	88 23       	and	r24, r24
 ad6:	ec f7       	brge	.-6      	; 0xad2 <__vector_4+0x3a4>
}


void OLED_Data(int data)
{
	TWDR=data;							
 ad8:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 adc:	84 e8       	ldi	r24, 0x84	; 132
 ade:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 ae2:	ec eb       	ldi	r30, 0xBC	; 188
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	80 81       	ld	r24, Z
 ae8:	88 23       	and	r24, r24
 aea:	ec f7       	brge	.-6      	; 0xae6 <__vector_4+0x3b8>
	}
		if(PINA==0b00011000)
		{
		oled.writenumber(4);	
		}
		if(PINA==0b00100100)
 aec:	80 b1       	in	r24, 0x00	; 0
 aee:	84 32       	cpi	r24, 0x24	; 36
 af0:	09 f0       	breq	.+2      	; 0xaf4 <__vector_4+0x3c6>
 af2:	54 c0       	rjmp	.+168    	; 0xb9c <__vector_4+0x46e>
}


void OLED_Data(int data)
{
	TWDR=data;							
 af4:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 af8:	84 e8       	ldi	r24, 0x84	; 132
 afa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 afe:	ec eb       	ldi	r30, 0xBC	; 188
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	80 81       	ld	r24, Z
 b04:	88 23       	and	r24, r24
 b06:	ec f7       	brge	.-6      	; 0xb02 <__vector_4+0x3d4>
}


void OLED_Data(int data)
{
	TWDR=data;							
 b08:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 b0c:	84 e8       	ldi	r24, 0x84	; 132
 b0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 b12:	ec eb       	ldi	r30, 0xBC	; 188
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	88 23       	and	r24, r24
 b1a:	ec f7       	brge	.-6      	; 0xb16 <__vector_4+0x3e8>
}


void OLED_Data(int data)
{
	TWDR=data;							
 b1c:	86 e4       	ldi	r24, 0x46	; 70
 b1e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 b22:	84 e8       	ldi	r24, 0x84	; 132
 b24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 b28:	ec eb       	ldi	r30, 0xBC	; 188
 b2a:	f0 e0       	ldi	r31, 0x00	; 0
 b2c:	80 81       	ld	r24, Z
 b2e:	88 23       	and	r24, r24
 b30:	ec f7       	brge	.-6      	; 0xb2c <__vector_4+0x3fe>
}


void OLED_Data(int data)
{
	TWDR=data;							
 b32:	8a e4       	ldi	r24, 0x4A	; 74
 b34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 b38:	84 e8       	ldi	r24, 0x84	; 132
 b3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 b3e:	ec eb       	ldi	r30, 0xBC	; 188
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	80 81       	ld	r24, Z
 b44:	88 23       	and	r24, r24
 b46:	ec f7       	brge	.-6      	; 0xb42 <__vector_4+0x414>
}


void OLED_Data(int data)
{
	TWDR=data;							
 b48:	8a e4       	ldi	r24, 0x4A	; 74
 b4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 b4e:	84 e8       	ldi	r24, 0x84	; 132
 b50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 b54:	ec eb       	ldi	r30, 0xBC	; 188
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	80 81       	ld	r24, Z
 b5a:	88 23       	and	r24, r24
 b5c:	ec f7       	brge	.-6      	; 0xb58 <__vector_4+0x42a>
}


void OLED_Data(int data)
{
	TWDR=data;							
 b5e:	82 e7       	ldi	r24, 0x72	; 114
 b60:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 b64:	84 e8       	ldi	r24, 0x84	; 132
 b66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 b6a:	ec eb       	ldi	r30, 0xBC	; 188
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	80 81       	ld	r24, Z
 b70:	88 23       	and	r24, r24
 b72:	ec f7       	brge	.-6      	; 0xb6e <__vector_4+0x440>
}


void OLED_Data(int data)
{
	TWDR=data;							
 b74:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 b78:	84 e8       	ldi	r24, 0x84	; 132
 b7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 b7e:	ec eb       	ldi	r30, 0xBC	; 188
 b80:	f0 e0       	ldi	r31, 0x00	; 0
 b82:	80 81       	ld	r24, Z
 b84:	88 23       	and	r24, r24
 b86:	ec f7       	brge	.-6      	; 0xb82 <__vector_4+0x454>
}


void OLED_Data(int data)
{
	TWDR=data;							
 b88:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 b8c:	84 e8       	ldi	r24, 0x84	; 132
 b8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 b92:	ec eb       	ldi	r30, 0xBC	; 188
 b94:	f0 e0       	ldi	r31, 0x00	; 0
 b96:	80 81       	ld	r24, Z
 b98:	88 23       	and	r24, r24
 b9a:	ec f7       	brge	.-6      	; 0xb96 <__vector_4+0x468>
		}
		if(PINA==0b00100100)
		{
			oled.writenumber(5);
		}
	sei();
 b9c:	78 94       	sei

}
 b9e:	ff 91       	pop	r31
 ba0:	ef 91       	pop	r30
 ba2:	9f 91       	pop	r25
 ba4:	8f 91       	pop	r24
 ba6:	0f 90       	pop	r0
 ba8:	0b be       	out	0x3b, r0	; 59
 baa:	0f 90       	pop	r0
 bac:	0f be       	out	0x3f, r0	; 63
 bae:	0f 90       	pop	r0
 bb0:	1f 90       	pop	r1
 bb2:	18 95       	reti

00000bb4 <main>:
		//OLED oled(wire);
		//oled.OLED_Write_Bufer();
		//_delay_ms(1000);
		//oled.OLED_Write_To_Bufer(0,0,0b11111111);
		
		oled.OLED_Write_To_Bufer(0,0,4,32,gear);
 bb4:	0f 2e       	mov	r0, r31
 bb6:	f0 e6       	ldi	r31, 0x60	; 96
 bb8:	ef 2e       	mov	r14, r31
 bba:	f2 e0       	ldi	r31, 0x02	; 2
 bbc:	ff 2e       	mov	r15, r31
 bbe:	f0 2d       	mov	r31, r0
 bc0:	00 e2       	ldi	r16, 0x20	; 32
 bc2:	10 e0       	ldi	r17, 0x00	; 0
 bc4:	24 e0       	ldi	r18, 0x04	; 4
 bc6:	30 e0       	ldi	r19, 0x00	; 0
 bc8:	40 e0       	ldi	r20, 0x00	; 0
 bca:	50 e0       	ldi	r21, 0x00	; 0
 bcc:	60 e0       	ldi	r22, 0x00	; 0
 bce:	70 e0       	ldi	r23, 0x00	; 0
 bd0:	82 ef       	ldi	r24, 0xF2	; 242
 bd2:	92 e0       	ldi	r25, 0x02	; 2
 bd4:	ff dc       	rcall	.-1538   	; 0x5d4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.OLED_Write_To_Bufer(33,0,4,32,lock);
 bd6:	0f 2e       	mov	r0, r31
 bd8:	f0 ee       	ldi	r31, 0xE0	; 224
 bda:	ef 2e       	mov	r14, r31
 bdc:	f1 e0       	ldi	r31, 0x01	; 1
 bde:	ff 2e       	mov	r15, r31
 be0:	f0 2d       	mov	r31, r0
 be2:	24 e0       	ldi	r18, 0x04	; 4
 be4:	30 e0       	ldi	r19, 0x00	; 0
 be6:	40 e0       	ldi	r20, 0x00	; 0
 be8:	50 e0       	ldi	r21, 0x00	; 0
 bea:	61 e2       	ldi	r22, 0x21	; 33
 bec:	70 e0       	ldi	r23, 0x00	; 0
 bee:	82 ef       	ldi	r24, 0xF2	; 242
 bf0:	92 e0       	ldi	r25, 0x02	; 2
 bf2:	f0 dc       	rcall	.-1568   	; 0x5d4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.OLED_Write_To_Bufer(80,0,4,32,unlock);
 bf4:	0f 2e       	mov	r0, r31
 bf6:	f0 e6       	ldi	r31, 0x60	; 96
 bf8:	ef 2e       	mov	r14, r31
 bfa:	f1 e0       	ldi	r31, 0x01	; 1
 bfc:	ff 2e       	mov	r15, r31
 bfe:	f0 2d       	mov	r31, r0
 c00:	24 e0       	ldi	r18, 0x04	; 4
 c02:	30 e0       	ldi	r19, 0x00	; 0
 c04:	40 e0       	ldi	r20, 0x00	; 0
 c06:	50 e0       	ldi	r21, 0x00	; 0
 c08:	60 e5       	ldi	r22, 0x50	; 80
 c0a:	70 e0       	ldi	r23, 0x00	; 0
 c0c:	82 ef       	ldi	r24, 0xF2	; 242
 c0e:	92 e0       	ldi	r25, 0x02	; 2
 c10:	e1 dc       	rcall	.-1598   	; 0x5d4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.OLED_Write_To_Bufer(0,5,4,8,batary2);
 c12:	0f 2e       	mov	r0, r31
 c14:	f0 e2       	ldi	r31, 0x20	; 32
 c16:	ef 2e       	mov	r14, r31
 c18:	f1 e0       	ldi	r31, 0x01	; 1
 c1a:	ff 2e       	mov	r15, r31
 c1c:	f0 2d       	mov	r31, r0
 c1e:	08 e0       	ldi	r16, 0x08	; 8
 c20:	10 e0       	ldi	r17, 0x00	; 0
 c22:	24 e0       	ldi	r18, 0x04	; 4
 c24:	30 e0       	ldi	r19, 0x00	; 0
 c26:	45 e0       	ldi	r20, 0x05	; 5
 c28:	50 e0       	ldi	r21, 0x00	; 0
 c2a:	60 e0       	ldi	r22, 0x00	; 0
 c2c:	70 e0       	ldi	r23, 0x00	; 0
 c2e:	82 ef       	ldi	r24, 0xF2	; 242
 c30:	92 e0       	ldi	r25, 0x02	; 2
 c32:	d0 dc       	rcall	.-1632   	; 0x5d4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.OLED_Write_To_Bufer(40,5,4,8,batary5);
 c34:	0f 2e       	mov	r0, r31
 c36:	f0 e4       	ldi	r31, 0x40	; 64
 c38:	ef 2e       	mov	r14, r31
 c3a:	f1 e0       	ldi	r31, 0x01	; 1
 c3c:	ff 2e       	mov	r15, r31
 c3e:	f0 2d       	mov	r31, r0
 c40:	24 e0       	ldi	r18, 0x04	; 4
 c42:	30 e0       	ldi	r19, 0x00	; 0
 c44:	45 e0       	ldi	r20, 0x05	; 5
 c46:	50 e0       	ldi	r21, 0x00	; 0
 c48:	68 e2       	ldi	r22, 0x28	; 40
 c4a:	70 e0       	ldi	r23, 0x00	; 0
 c4c:	82 ef       	ldi	r24, 0xF2	; 242
 c4e:	92 e0       	ldi	r25, 0x02	; 2
 c50:	c1 dc       	rcall	.-1662   	; 0x5d4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.OLED_Write_To_Bufer(80,5,2,8,Net0);
 c52:	0f 2e       	mov	r0, r31
 c54:	f0 e0       	ldi	r31, 0x00	; 0
 c56:	ef 2e       	mov	r14, r31
 c58:	f1 e0       	ldi	r31, 0x01	; 1
 c5a:	ff 2e       	mov	r15, r31
 c5c:	f0 2d       	mov	r31, r0
 c5e:	22 e0       	ldi	r18, 0x02	; 2
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	45 e0       	ldi	r20, 0x05	; 5
 c64:	50 e0       	ldi	r21, 0x00	; 0
 c66:	60 e5       	ldi	r22, 0x50	; 80
 c68:	70 e0       	ldi	r23, 0x00	; 0
 c6a:	82 ef       	ldi	r24, 0xF2	; 242
 c6c:	92 e0       	ldi	r25, 0x02	; 2
 c6e:	b2 dc       	rcall	.-1692   	; 0x5d4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.OLED_Write_To_Bufer(100,5,2,8,Net4);
 c70:	0f 2e       	mov	r0, r31
 c72:	f0 e1       	ldi	r31, 0x10	; 16
 c74:	ef 2e       	mov	r14, r31
 c76:	f1 e0       	ldi	r31, 0x01	; 1
 c78:	ff 2e       	mov	r15, r31
 c7a:	f0 2d       	mov	r31, r0
 c7c:	22 e0       	ldi	r18, 0x02	; 2
 c7e:	30 e0       	ldi	r19, 0x00	; 0
 c80:	45 e0       	ldi	r20, 0x05	; 5
 c82:	50 e0       	ldi	r21, 0x00	; 0
 c84:	64 e6       	ldi	r22, 0x64	; 100
 c86:	70 e0       	ldi	r23, 0x00	; 0
 c88:	82 ef       	ldi	r24, 0xF2	; 242
 c8a:	92 e0       	ldi	r25, 0x02	; 2
 c8c:	a3 dc       	rcall	.-1722   	; 0x5d4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
}


void OLED_Write_Bufer()
{
	TWDR=0x40;
 c8e:	80 e4       	ldi	r24, 0x40	; 64
 c90:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
 c94:	84 e8       	ldi	r24, 0x84	; 132
 c96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 c9a:	a2 ef       	ldi	r26, 0xF2	; 242
 c9c:	b2 e0       	ldi	r27, 0x02	; 2
 c9e:	22 ef       	ldi	r18, 0xF2	; 242
 ca0:	36 e0       	ldi	r19, 0x06	; 6
}


void OLED_Data(int data)
{
	TWDR=data;							
 ca2:	cb eb       	ldi	r28, 0xBB	; 187
 ca4:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);				
 ca6:	ec eb       	ldi	r30, 0xBC	; 188
 ca8:	f0 e0       	ldi	r31, 0x00	; 0
 caa:	94 e8       	ldi	r25, 0x84	; 132
{
	TWDR=0x40;
	TWCR=(1<<TWINT)|(1<<TWEN);
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
			OLED_Data(oled_bufer[i]);
 cac:	8d 91       	ld	r24, X+
}


void OLED_Data(int data)
{
	TWDR=data;							
 cae:	88 83       	st	Y, r24
	TWCR=(1<<TWINT)|(1<<TWEN);				
 cb0:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))){};
 cb2:	80 81       	ld	r24, Z
 cb4:	88 23       	and	r24, r24
 cb6:	ec f7       	brge	.-6      	; 0xcb2 <main+0xfe>

void OLED_Write_Bufer()
{
	TWDR=0x40;
	TWCR=(1<<TWINT)|(1<<TWEN);
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
 cb8:	a2 17       	cp	r26, r18
 cba:	b3 07       	cpc	r27, r19
 cbc:	b9 f7       	brne	.-18     	; 0xcac <main+0xf8>
		//oled.OLED_Write_Bufer();
		//oled.oled_bufer[1]=0b11111111;
		oled.OLED_Write_Bufer();
		//Interupts

		DDRA = 0x00;
 cbe:	11 b8       	out	0x01, r1	; 1
		PORTA=0x00;
 cc0:	12 b8       	out	0x02, r1	; 2
		PCMSK0=0b00111100;
 cc2:	8c e3       	ldi	r24, 0x3C	; 60
 cc4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
		PCICR|=0b00000001;
 cc8:	e8 e6       	ldi	r30, 0x68	; 104
 cca:	f0 e0       	ldi	r31, 0x00	; 0
 ccc:	80 81       	ld	r24, Z
 cce:	81 60       	ori	r24, 0x01	; 1
 cd0:	80 83       	st	Z, r24
		sei();
 cd2:	78 94       	sei
 cd4:	ff cf       	rjmp	.-2      	; 0xcd4 <main+0x120>

00000cd6 <_GLOBAL__sub_I_wire>:


};

TWI wire;
OLED oled(wire);
 cd6:	60 e0       	ldi	r22, 0x00	; 0
 cd8:	82 ef       	ldi	r24, 0xF2	; 242
 cda:	92 e0       	ldi	r25, 0x02	; 2
 cdc:	00 ca       	rjmp	.-3072   	; 0xde <_ZN4OLEDC1E3TWI>
 cde:	08 95       	ret

00000ce0 <__tablejump2__>:
 ce0:	ee 0f       	add	r30, r30
 ce2:	ff 1f       	adc	r31, r31
 ce4:	00 24       	eor	r0, r0
 ce6:	00 1c       	adc	r0, r0
 ce8:	0b be       	out	0x3b, r0	; 59
 cea:	07 90       	elpm	r0, Z+
 cec:	f6 91       	elpm	r31, Z
 cee:	e0 2d       	mov	r30, r0
 cf0:	09 94       	ijmp

00000cf2 <_exit>:
 cf2:	f8 94       	cli

00000cf4 <__stop_program>:
 cf4:	ff cf       	rjmp	.-2      	; 0xcf4 <__stop_program>
