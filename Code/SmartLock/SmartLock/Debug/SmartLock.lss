
SmartLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000676  0000070a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000676  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000402  00800102  00800102  0000070c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000073c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000112c  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000989  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d9  00000000  00000000  00002269  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00002944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000669  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000065d  00000000  00000000  00003021  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000367e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	eb c2       	rjmp	.+1494   	; 0x5e8 <__vector_4>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	53 c0       	rjmp	.+166    	; 0xdc <__bad_interrupt>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
	...

0000008c <__ctors_start>:
  8c:	2b 03       	fmul	r18, r19

0000008e <__ctors_end>:
  8e:	11 24       	eor	r1, r1
  90:	1f be       	out	0x3f, r1	; 63
  92:	cf ef       	ldi	r28, 0xFF	; 255
  94:	d0 e4       	ldi	r29, 0x40	; 64
  96:	de bf       	out	0x3e, r29	; 62
  98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
  9a:	11 e0       	ldi	r17, 0x01	; 1
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	e6 e7       	ldi	r30, 0x76	; 118
  a2:	f6 e0       	ldi	r31, 0x06	; 6
  a4:	00 e0       	ldi	r16, 0x00	; 0
  a6:	0b bf       	out	0x3b, r16	; 59
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
  aa:	07 90       	elpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	a2 30       	cpi	r26, 0x02	; 2
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
  b4:	25 e0       	ldi	r18, 0x05	; 5
  b6:	a2 e0       	ldi	r26, 0x02	; 2
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a4 30       	cpi	r26, 0x04	; 4
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	c7 e4       	ldi	r28, 0x47	; 71
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <__do_global_ctors+0xe>
  cc:	21 97       	sbiw	r28, 0x01	; 1
  ce:	fe 01       	movw	r30, r28
  d0:	c7 d2       	rcall	.+1422   	; 0x660 <__tablejump2__>
  d2:	c6 34       	cpi	r28, 0x46	; 70
  d4:	d1 07       	cpc	r29, r17
  d6:	d1 f7       	brne	.-12     	; 0xcc <__do_global_ctors+0x8>
  d8:	a8 d2       	rcall	.+1360   	; 0x62a <main>
  da:	cb c2       	rjmp	.+1430   	; 0x672 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <_ZN4OLEDC1E3TWI>:
private:
uint8_t  oled_bufer[OLED_HEIGHT][OLED_WIDTH];
TWI wire;
bool nw=false;
public:
OLED(TWI _wire)
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
{
  e2:	fc 01       	movw	r30, r24
  e4:	ef 5f       	subi	r30, 0xFF	; 255
  e6:	fb 4f       	sbci	r31, 0xFB	; 251
  e8:	10 82       	st	Z, r1
	public:
	TWI(){}

	void twi_Init(void)
	{
		TWBR=(((CPU_F)/(SCL_F)-16)/2);
  ea:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
		TWSR=0;
  ee:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		while(!(TWCR & (1<<TWINT))){};
	}

	void twi_Start(void)
	{
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  f2:	24 ea       	ldi	r18, 0xA4	; 164
  f4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
  f8:	ec eb       	ldi	r30, 0xBC	; 188
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	20 81       	ld	r18, Z
  fe:	22 23       	and	r18, r18
 100:	ec f7       	brge	.-6      	; 0xfc <_ZN4OLEDC1E3TWI+0x1e>
		TWSR=0;
	}

	void twi_SendAdress(void) 
	{
		TWDR=(Dev_Adr<<1)|0;
 102:	28 e7       	ldi	r18, 0x78	; 120
 104:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR=(1<<TWINT)|(1<<TWEN);
 108:	24 e8       	ldi	r18, 0x84	; 132
 10a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
 10e:	ec eb       	ldi	r30, 0xBC	; 188
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	20 81       	ld	r18, Z
 114:	22 23       	and	r18, r18
 116:	ec f7       	brge	.-6      	; 0x112 <_ZN4OLEDC1E3TWI+0x34>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 118:	20 e8       	ldi	r18, 0x80	; 128
 11a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 11e:	24 e8       	ldi	r18, 0x84	; 132
 120:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 124:	ec eb       	ldi	r30, 0xBC	; 188
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	20 81       	ld	r18, Z
 12a:	22 23       	and	r18, r18
 12c:	ec f7       	brge	.-6      	; 0x128 <_ZN4OLEDC1E3TWI+0x4a>

	TWDR=command;							
 12e:	28 ea       	ldi	r18, 0xA8	; 168
 130:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 134:	24 e8       	ldi	r18, 0x84	; 132
 136:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 13a:	ec eb       	ldi	r30, 0xBC	; 188
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	20 81       	ld	r18, Z
 140:	22 23       	and	r18, r18
 142:	ec f7       	brge	.-6      	; 0x13e <_ZN4OLEDC1E3TWI+0x60>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 144:	20 e8       	ldi	r18, 0x80	; 128
 146:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 14a:	24 e8       	ldi	r18, 0x84	; 132
 14c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 150:	ec eb       	ldi	r30, 0xBC	; 188
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	20 81       	ld	r18, Z
 156:	22 23       	and	r18, r18
 158:	ec f7       	brge	.-6      	; 0x154 <_ZN4OLEDC1E3TWI+0x76>

	TWDR=command;							
 15a:	2f e3       	ldi	r18, 0x3F	; 63
 15c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 160:	24 e8       	ldi	r18, 0x84	; 132
 162:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 166:	ec eb       	ldi	r30, 0xBC	; 188
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	20 81       	ld	r18, Z
 16c:	22 23       	and	r18, r18
 16e:	ec f7       	brge	.-6      	; 0x16a <_ZN4OLEDC1E3TWI+0x8c>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 170:	20 e8       	ldi	r18, 0x80	; 128
 172:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 176:	24 e8       	ldi	r18, 0x84	; 132
 178:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 17c:	ec eb       	ldi	r30, 0xBC	; 188
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	20 81       	ld	r18, Z
 182:	22 23       	and	r18, r18
 184:	ec f7       	brge	.-6      	; 0x180 <_ZN4OLEDC1E3TWI+0xa2>

	TWDR=command;							
 186:	23 ed       	ldi	r18, 0xD3	; 211
 188:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 18c:	24 e8       	ldi	r18, 0x84	; 132
 18e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	20 81       	ld	r18, Z
 198:	22 23       	and	r18, r18
 19a:	ec f7       	brge	.-6      	; 0x196 <_ZN4OLEDC1E3TWI+0xb8>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 19c:	20 e8       	ldi	r18, 0x80	; 128
 19e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 1a2:	24 e8       	ldi	r18, 0x84	; 132
 1a4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 1a8:	ec eb       	ldi	r30, 0xBC	; 188
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	20 81       	ld	r18, Z
 1ae:	22 23       	and	r18, r18
 1b0:	ec f7       	brge	.-6      	; 0x1ac <_ZN4OLEDC1E3TWI+0xce>

	TWDR=command;							
 1b2:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 1b6:	24 e8       	ldi	r18, 0x84	; 132
 1b8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 1bc:	ec eb       	ldi	r30, 0xBC	; 188
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	20 81       	ld	r18, Z
 1c2:	22 23       	and	r18, r18
 1c4:	ec f7       	brge	.-6      	; 0x1c0 <_ZN4OLEDC1E3TWI+0xe2>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 1c6:	20 e8       	ldi	r18, 0x80	; 128
 1c8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 1cc:	24 e8       	ldi	r18, 0x84	; 132
 1ce:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 1d2:	ec eb       	ldi	r30, 0xBC	; 188
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	20 81       	ld	r18, Z
 1d8:	22 23       	and	r18, r18
 1da:	ec f7       	brge	.-6      	; 0x1d6 <_ZN4OLEDC1E3TWI+0xf8>

	TWDR=command;							
 1dc:	20 e4       	ldi	r18, 0x40	; 64
 1de:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 1e2:	24 e8       	ldi	r18, 0x84	; 132
 1e4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 1e8:	ec eb       	ldi	r30, 0xBC	; 188
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	20 81       	ld	r18, Z
 1ee:	22 23       	and	r18, r18
 1f0:	ec f7       	brge	.-6      	; 0x1ec <_ZN4OLEDC1E3TWI+0x10e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 1f2:	20 e8       	ldi	r18, 0x80	; 128
 1f4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 1f8:	24 e8       	ldi	r18, 0x84	; 132
 1fa:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 1fe:	ec eb       	ldi	r30, 0xBC	; 188
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	20 81       	ld	r18, Z
 204:	22 23       	and	r18, r18
 206:	ec f7       	brge	.-6      	; 0x202 <_ZN4OLEDC1E3TWI+0x124>

	TWDR=command;							
 208:	21 ea       	ldi	r18, 0xA1	; 161
 20a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 20e:	24 e8       	ldi	r18, 0x84	; 132
 210:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 214:	ec eb       	ldi	r30, 0xBC	; 188
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	20 81       	ld	r18, Z
 21a:	22 23       	and	r18, r18
 21c:	ec f7       	brge	.-6      	; 0x218 <_ZN4OLEDC1E3TWI+0x13a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 21e:	20 e8       	ldi	r18, 0x80	; 128
 220:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 224:	24 e8       	ldi	r18, 0x84	; 132
 226:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 22a:	ec eb       	ldi	r30, 0xBC	; 188
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	20 81       	ld	r18, Z
 230:	22 23       	and	r18, r18
 232:	ec f7       	brge	.-6      	; 0x22e <_ZN4OLEDC1E3TWI+0x150>

	TWDR=command;							
 234:	28 ec       	ldi	r18, 0xC8	; 200
 236:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 23a:	24 e8       	ldi	r18, 0x84	; 132
 23c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 240:	ec eb       	ldi	r30, 0xBC	; 188
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	20 81       	ld	r18, Z
 246:	22 23       	and	r18, r18
 248:	ec f7       	brge	.-6      	; 0x244 <_ZN4OLEDC1E3TWI+0x166>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 24a:	20 e8       	ldi	r18, 0x80	; 128
 24c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 250:	24 e8       	ldi	r18, 0x84	; 132
 252:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 256:	ec eb       	ldi	r30, 0xBC	; 188
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	20 81       	ld	r18, Z
 25c:	22 23       	and	r18, r18
 25e:	ec f7       	brge	.-6      	; 0x25a <_ZN4OLEDC1E3TWI+0x17c>

	TWDR=command;							
 260:	2a ed       	ldi	r18, 0xDA	; 218
 262:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 266:	24 e8       	ldi	r18, 0x84	; 132
 268:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 26c:	ec eb       	ldi	r30, 0xBC	; 188
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	20 81       	ld	r18, Z
 272:	22 23       	and	r18, r18
 274:	ec f7       	brge	.-6      	; 0x270 <_ZN4OLEDC1E3TWI+0x192>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 276:	20 e8       	ldi	r18, 0x80	; 128
 278:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 27c:	24 e8       	ldi	r18, 0x84	; 132
 27e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 282:	ec eb       	ldi	r30, 0xBC	; 188
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	20 81       	ld	r18, Z
 288:	22 23       	and	r18, r18
 28a:	ec f7       	brge	.-6      	; 0x286 <_ZN4OLEDC1E3TWI+0x1a8>

	TWDR=command;							
 28c:	22 e1       	ldi	r18, 0x12	; 18
 28e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 292:	24 e8       	ldi	r18, 0x84	; 132
 294:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 298:	ec eb       	ldi	r30, 0xBC	; 188
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	20 81       	ld	r18, Z
 29e:	22 23       	and	r18, r18
 2a0:	ec f7       	brge	.-6      	; 0x29c <_ZN4OLEDC1E3TWI+0x1be>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 2a2:	20 e8       	ldi	r18, 0x80	; 128
 2a4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 2a8:	24 e8       	ldi	r18, 0x84	; 132
 2aa:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2ae:	ec eb       	ldi	r30, 0xBC	; 188
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	20 81       	ld	r18, Z
 2b4:	22 23       	and	r18, r18
 2b6:	ec f7       	brge	.-6      	; 0x2b2 <_ZN4OLEDC1E3TWI+0x1d4>

	TWDR=command;							
 2b8:	21 e8       	ldi	r18, 0x81	; 129
 2ba:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 2be:	24 e8       	ldi	r18, 0x84	; 132
 2c0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2c4:	ec eb       	ldi	r30, 0xBC	; 188
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	20 81       	ld	r18, Z
 2ca:	22 23       	and	r18, r18
 2cc:	ec f7       	brge	.-6      	; 0x2c8 <_ZN4OLEDC1E3TWI+0x1ea>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 2ce:	20 e8       	ldi	r18, 0x80	; 128
 2d0:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 2d4:	24 e8       	ldi	r18, 0x84	; 132
 2d6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2da:	ec eb       	ldi	r30, 0xBC	; 188
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	20 81       	ld	r18, Z
 2e0:	22 23       	and	r18, r18
 2e2:	ec f7       	brge	.-6      	; 0x2de <_ZN4OLEDC1E3TWI+0x200>

	TWDR=command;							
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 2ea:	24 e8       	ldi	r18, 0x84	; 132
 2ec:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 2f0:	ec eb       	ldi	r30, 0xBC	; 188
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	20 81       	ld	r18, Z
 2f6:	22 23       	and	r18, r18
 2f8:	ec f7       	brge	.-6      	; 0x2f4 <_ZN4OLEDC1E3TWI+0x216>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 2fa:	20 e8       	ldi	r18, 0x80	; 128
 2fc:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 300:	24 e8       	ldi	r18, 0x84	; 132
 302:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 306:	ec eb       	ldi	r30, 0xBC	; 188
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	20 81       	ld	r18, Z
 30c:	22 23       	and	r18, r18
 30e:	ec f7       	brge	.-6      	; 0x30a <_ZN4OLEDC1E3TWI+0x22c>

	TWDR=command;							
 310:	24 ea       	ldi	r18, 0xA4	; 164
 312:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 316:	24 e8       	ldi	r18, 0x84	; 132
 318:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 31c:	ec eb       	ldi	r30, 0xBC	; 188
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	20 81       	ld	r18, Z
 322:	22 23       	and	r18, r18
 324:	ec f7       	brge	.-6      	; 0x320 <_ZN4OLEDC1E3TWI+0x242>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 326:	20 e8       	ldi	r18, 0x80	; 128
 328:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 32c:	24 e8       	ldi	r18, 0x84	; 132
 32e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 332:	ec eb       	ldi	r30, 0xBC	; 188
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	20 81       	ld	r18, Z
 338:	22 23       	and	r18, r18
 33a:	ec f7       	brge	.-6      	; 0x336 <_ZN4OLEDC1E3TWI+0x258>

	TWDR=command;							
 33c:	27 ea       	ldi	r18, 0xA7	; 167
 33e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 342:	24 e8       	ldi	r18, 0x84	; 132
 344:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 348:	ec eb       	ldi	r30, 0xBC	; 188
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	20 81       	ld	r18, Z
 34e:	22 23       	and	r18, r18
 350:	ec f7       	brge	.-6      	; 0x34c <_ZN4OLEDC1E3TWI+0x26e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 352:	20 e8       	ldi	r18, 0x80	; 128
 354:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 358:	24 e8       	ldi	r18, 0x84	; 132
 35a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 35e:	ec eb       	ldi	r30, 0xBC	; 188
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	20 81       	ld	r18, Z
 364:	22 23       	and	r18, r18
 366:	ec f7       	brge	.-6      	; 0x362 <_ZN4OLEDC1E3TWI+0x284>

	TWDR=command;							
 368:	25 ed       	ldi	r18, 0xD5	; 213
 36a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 36e:	24 e8       	ldi	r18, 0x84	; 132
 370:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 374:	ec eb       	ldi	r30, 0xBC	; 188
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	20 81       	ld	r18, Z
 37a:	22 23       	and	r18, r18
 37c:	ec f7       	brge	.-6      	; 0x378 <_ZN4OLEDC1E3TWI+0x29a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 37e:	20 e8       	ldi	r18, 0x80	; 128
 380:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 384:	24 e8       	ldi	r18, 0x84	; 132
 386:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 38a:	ec eb       	ldi	r30, 0xBC	; 188
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	20 81       	ld	r18, Z
 390:	22 23       	and	r18, r18
 392:	ec f7       	brge	.-6      	; 0x38e <_ZN4OLEDC1E3TWI+0x2b0>

	TWDR=command;							
 394:	20 e8       	ldi	r18, 0x80	; 128
 396:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 39a:	24 e8       	ldi	r18, 0x84	; 132
 39c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 3a0:	ec eb       	ldi	r30, 0xBC	; 188
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	20 81       	ld	r18, Z
 3a6:	22 23       	and	r18, r18
 3a8:	ec f7       	brge	.-6      	; 0x3a4 <_ZN4OLEDC1E3TWI+0x2c6>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 3aa:	20 e8       	ldi	r18, 0x80	; 128
 3ac:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 3b0:	24 e8       	ldi	r18, 0x84	; 132
 3b2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 3b6:	ec eb       	ldi	r30, 0xBC	; 188
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	20 81       	ld	r18, Z
 3bc:	22 23       	and	r18, r18
 3be:	ec f7       	brge	.-6      	; 0x3ba <_ZN4OLEDC1E3TWI+0x2dc>

	TWDR=command;							
 3c0:	2d e8       	ldi	r18, 0x8D	; 141
 3c2:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 3c6:	24 e8       	ldi	r18, 0x84	; 132
 3c8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 3cc:	ec eb       	ldi	r30, 0xBC	; 188
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	20 81       	ld	r18, Z
 3d2:	22 23       	and	r18, r18
 3d4:	ec f7       	brge	.-6      	; 0x3d0 <_ZN4OLEDC1E3TWI+0x2f2>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 3d6:	20 e8       	ldi	r18, 0x80	; 128
 3d8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 3dc:	24 e8       	ldi	r18, 0x84	; 132
 3de:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 3e2:	ec eb       	ldi	r30, 0xBC	; 188
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	20 81       	ld	r18, Z
 3e8:	22 23       	and	r18, r18
 3ea:	ec f7       	brge	.-6      	; 0x3e6 <_ZN4OLEDC1E3TWI+0x308>

	TWDR=command;							
 3ec:	24 e1       	ldi	r18, 0x14	; 20
 3ee:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 3f2:	24 e8       	ldi	r18, 0x84	; 132
 3f4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 3f8:	ec eb       	ldi	r30, 0xBC	; 188
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	20 81       	ld	r18, Z
 3fe:	22 23       	and	r18, r18
 400:	ec f7       	brge	.-6      	; 0x3fc <_ZN4OLEDC1E3TWI+0x31e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 402:	20 e8       	ldi	r18, 0x80	; 128
 404:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 408:	24 e8       	ldi	r18, 0x84	; 132
 40a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 40e:	ec eb       	ldi	r30, 0xBC	; 188
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	20 81       	ld	r18, Z
 414:	22 23       	and	r18, r18
 416:	ec f7       	brge	.-6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>

	TWDR=command;							
 418:	2f ea       	ldi	r18, 0xAF	; 175
 41a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 41e:	24 e8       	ldi	r18, 0x84	; 132
 420:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 424:	ec eb       	ldi	r30, 0xBC	; 188
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	20 81       	ld	r18, Z
 42a:	22 23       	and	r18, r18
 42c:	ec f7       	brge	.-6      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42e:	dc 01       	movw	r26, r24
 430:	ac 01       	movw	r20, r24
 432:	5c 5f       	subi	r21, 0xFC	; 252
 434:	fc 01       	movw	r30, r24
 436:	9f 01       	movw	r18, r30
 438:	20 58       	subi	r18, 0x80	; 128
 43a:	3f 4f       	sbci	r19, 0xFF	; 255
	OLED_Command(0xAF);
	for(int i=0;i<OLED_HEIGHT;i++)
	{
		for(int j=0;j<OLED_WIDTH;j++)
		{
			oled_bufer[i][j]=0b00000000;		
 43c:	11 92       	st	Z+, r1
	OLED_Command(0x8D);
	OLED_Command(0x14);
	OLED_Command(0xAF);
	for(int i=0;i<OLED_HEIGHT;i++)
	{
		for(int j=0;j<OLED_WIDTH;j++)
 43e:	e2 17       	cp	r30, r18
 440:	f3 07       	cpc	r31, r19
 442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 444:	f9 01       	movw	r30, r18
	OLED_Command(0xD5);
	OLED_Command(0x80);
	OLED_Command(0x8D);
	OLED_Command(0x14);
	OLED_Command(0xAF);
	for(int i=0;i<OLED_HEIGHT;i++)
 446:	42 17       	cp	r20, r18
 448:	53 07       	cpc	r21, r19
 44a:	a9 f7       	brne	.-22     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		for(int j=0;j<OLED_WIDTH;j++)
		{
			oled_bufer[i][j]=0b00000000;		
		}
	}
	oled_bufer[0][0]=0b11111111;
 44c:	2f ef       	ldi	r18, 0xFF	; 255
 44e:	fc 01       	movw	r30, r24
 450:	20 83       	st	Z, r18
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 452:	80 e8       	ldi	r24, 0x80	; 128
 454:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 458:	84 e8       	ldi	r24, 0x84	; 132
 45a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 45e:	ec eb       	ldi	r30, 0xBC	; 188
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	88 23       	and	r24, r24
 466:	ec f7       	brge	.-6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>

	TWDR=command;							
 468:	80 e2       	ldi	r24, 0x20	; 32
 46a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 46e:	84 e8       	ldi	r24, 0x84	; 132
 470:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 474:	ec eb       	ldi	r30, 0xBC	; 188
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	88 23       	and	r24, r24
 47c:	ec f7       	brge	.-6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 47e:	80 e8       	ldi	r24, 0x80	; 128
 480:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 484:	84 e8       	ldi	r24, 0x84	; 132
 486:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 48a:	ec eb       	ldi	r30, 0xBC	; 188
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	88 23       	and	r24, r24
 492:	ec f7       	brge	.-6      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>

	TWDR=command;							
 494:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 498:	84 e8       	ldi	r24, 0x84	; 132
 49a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 49e:	ec eb       	ldi	r30, 0xBC	; 188
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	88 23       	and	r24, r24
 4a6:	ec f7       	brge	.-6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 4a8:	80 e8       	ldi	r24, 0x80	; 128
 4aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 4ae:	84 e8       	ldi	r24, 0x84	; 132
 4b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 4b4:	ec eb       	ldi	r30, 0xBC	; 188
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	88 23       	and	r24, r24
 4bc:	ec f7       	brge	.-6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>

	TWDR=command;							
 4be:	81 e2       	ldi	r24, 0x21	; 33
 4c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 4c4:	84 e8       	ldi	r24, 0x84	; 132
 4c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 4ca:	ec eb       	ldi	r30, 0xBC	; 188
 4cc:	f0 e0       	ldi	r31, 0x00	; 0
 4ce:	80 81       	ld	r24, Z
 4d0:	88 23       	and	r24, r24
 4d2:	ec f7       	brge	.-6      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 4d4:	80 e8       	ldi	r24, 0x80	; 128
 4d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 4da:	84 e8       	ldi	r24, 0x84	; 132
 4dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 4e0:	ec eb       	ldi	r30, 0xBC	; 188
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	88 23       	and	r24, r24
 4e8:	ec f7       	brge	.-6      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>

	TWDR=command;							
 4ea:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 4ee:	84 e8       	ldi	r24, 0x84	; 132
 4f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 4f4:	ec eb       	ldi	r30, 0xBC	; 188
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	88 23       	and	r24, r24
 4fc:	ec f7       	brge	.-6      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 4fe:	80 e8       	ldi	r24, 0x80	; 128
 500:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 504:	84 e8       	ldi	r24, 0x84	; 132
 506:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 50a:	ec eb       	ldi	r30, 0xBC	; 188
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	88 23       	and	r24, r24
 512:	ec f7       	brge	.-6      	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>

	TWDR=command;							
 514:	8f e7       	ldi	r24, 0x7F	; 127
 516:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 51a:	84 e8       	ldi	r24, 0x84	; 132
 51c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 520:	ec eb       	ldi	r30, 0xBC	; 188
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	88 23       	and	r24, r24
 528:	ec f7       	brge	.-6      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 52a:	80 e8       	ldi	r24, 0x80	; 128
 52c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 530:	84 e8       	ldi	r24, 0x84	; 132
 532:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 536:	ec eb       	ldi	r30, 0xBC	; 188
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	88 23       	and	r24, r24
 53e:	ec f7       	brge	.-6      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>

	TWDR=command;							
 540:	82 e2       	ldi	r24, 0x22	; 34
 542:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 546:	84 e8       	ldi	r24, 0x84	; 132
 548:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 54c:	ec eb       	ldi	r30, 0xBC	; 188
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	88 23       	and	r24, r24
 554:	ec f7       	brge	.-6      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 556:	80 e8       	ldi	r24, 0x80	; 128
 558:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 55c:	84 e8       	ldi	r24, 0x84	; 132
 55e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 562:	ec eb       	ldi	r30, 0xBC	; 188
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	88 23       	and	r24, r24
 56a:	ec f7       	brge	.-6      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>

	TWDR=command;							
 56c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 570:	84 e8       	ldi	r24, 0x84	; 132
 572:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 576:	ec eb       	ldi	r30, 0xBC	; 188
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	88 23       	and	r24, r24
 57e:	ec f7       	brge	.-6      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
 580:	80 e8       	ldi	r24, 0x80	; 128
 582:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 586:	84 e8       	ldi	r24, 0x84	; 132
 588:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 58c:	ec eb       	ldi	r30, 0xBC	; 188
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	88 23       	and	r24, r24
 594:	ec f7       	brge	.-6      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>

	TWDR=command;							
 596:	87 e0       	ldi	r24, 0x07	; 7
 598:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
 59c:	84 e8       	ldi	r24, 0x84	; 132
 59e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
 5a2:	ec eb       	ldi	r30, 0xBC	; 188
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	80 81       	ld	r24, Z
 5a8:	88 23       	and	r24, r24
 5aa:	ec f7       	brge	.-6      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
	OLED_Command(0);
	OLED_Command(7);
	//OLED_Command(0xB1);
	//OLED_Command(0x00);
	//OLED_Command(0x1F);
	TWDR=0x40;
 5ac:	80 e4       	ldi	r24, 0x40	; 64
 5ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
 5b2:	84 e8       	ldi	r24, 0x84	; 132
 5b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}


void OLED_Data(int data)
{
	TWDR=data;							
 5b8:	cb eb       	ldi	r28, 0xBB	; 187
 5ba:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);				
 5bc:	ec eb       	ldi	r30, 0xBC	; 188
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	94 e8       	ldi	r25, 0x84	; 132
 5c2:	9d 01       	movw	r18, r26
 5c4:	20 58       	subi	r18, 0x80	; 128
 5c6:	3f 4f       	sbci	r19, 0xFF	; 255
  //  if(nw){OLED_Data(0b11111111);nw=false;}
	for(int i=0;i<OLED_HEIGHT;i++)
	{
		for(int j=0;j<OLED_WIDTH;j++)
		{
			OLED_Data(oled_bufer[i][j]);
 5c8:	8d 91       	ld	r24, X+
}


void OLED_Data(int data)
{
	TWDR=data;							
 5ca:	88 83       	st	Y, r24
	TWCR=(1<<TWINT)|(1<<TWEN);				
 5cc:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))){};
 5ce:	80 81       	ld	r24, Z
 5d0:	88 23       	and	r24, r24
 5d2:	ec f7       	brge	.-6      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
	TWDR=0x40;
	TWCR=(1<<TWINT)|(1<<TWEN);
  //  if(nw){OLED_Data(0b11111111);nw=false;}
	for(int i=0;i<OLED_HEIGHT;i++)
	{
		for(int j=0;j<OLED_WIDTH;j++)
 5d4:	a2 17       	cp	r26, r18
 5d6:	b3 07       	cpc	r27, r19
 5d8:	b9 f7       	brne	.-18     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 5da:	d9 01       	movw	r26, r18
	//OLED_Command(0x00);
	//OLED_Command(0x1F);
	TWDR=0x40;
	TWCR=(1<<TWINT)|(1<<TWEN);
  //  if(nw){OLED_Data(0b11111111);nw=false;}
	for(int i=0;i<OLED_HEIGHT;i++)
 5dc:	42 17       	cp	r20, r18
 5de:	53 07       	cpc	r21, r19
 5e0:	81 f7       	brne	.-32     	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
			oled_bufer[i][j]=0b00000000;		
		}
	}
	oled_bufer[0][0]=0b11111111;
	OLED_Write_Bufer();
}
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <__vector_4>:
TWI wire;
OLED oled(wire);
int num = 1;

ISR(PCINT0_vect)
{
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
    cli();
 5f6:	f8 94       	cli
	if (num == 1)
 5f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 5fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	29 f4       	brne	.+10     	; 0x60e <__vector_4+0x26>
	num = 0;
 604:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 608:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 60c:	06 c0       	rjmp	.+12     	; 0x61a <__vector_4+0x32>
	else
    num = 1;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 616:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	sei();
 61a:	78 94       	sei

}
 61c:	9f 91       	pop	r25
 61e:	8f 91       	pop	r24
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <main>:
		//oled.OLED_Write_Bufer();
		//_delay_ms(1000);
		
		
		//Interupts
		DDRA = 0x00;
 62a:	11 b8       	out	0x01, r1	; 1
		PORTA=0x00;
 62c:	12 b8       	out	0x02, r1	; 2
		PCMSK0=0b00111100;
 62e:	8c e3       	ldi	r24, 0x3C	; 60
 630:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
		PCICR|=0b00000001;
 634:	e8 e6       	ldi	r30, 0x68	; 104
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	81 60       	ori	r24, 0x01	; 1
 63c:	80 83       	st	Z, r24
		sei();
 63e:	78 94       	sei
		//
		DDRD|=0b10000000;
 640:	57 9a       	sbi	0x0a, 7	; 10
		
while(1)
{
	if(num==1)
 642:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 646:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	11 f4       	brne	.+4      	; 0x652 <main+0x28>
	{
		PORTD&=0b01111111;
 64e:	5f 98       	cbi	0x0b, 7	; 11
 650:	f8 cf       	rjmp	.-16     	; 0x642 <main+0x18>
	}
	else
	{
		PORTD|=0b10000000;
 652:	5f 9a       	sbi	0x0b, 7	; 11
 654:	f6 cf       	rjmp	.-20     	; 0x642 <main+0x18>

00000656 <_GLOBAL__sub_I_wire>:
}

};

TWI wire;
OLED oled(wire);
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	40 cd       	rjmp	.-1408   	; 0xde <_ZN4OLEDC1E3TWI>
 65e:	08 95       	ret

00000660 <__tablejump2__>:
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	00 24       	eor	r0, r0
 666:	00 1c       	adc	r0, r0
 668:	0b be       	out	0x3b, r0	; 59
 66a:	07 90       	elpm	r0, Z+
 66c:	f6 91       	elpm	r31, Z
 66e:	e0 2d       	mov	r30, r0
 670:	09 94       	ijmp

00000672 <_exit>:
 672:	f8 94       	cli

00000674 <__stop_program>:
 674:	ff cf       	rjmp	.-2      	; 0x674 <__stop_program>
