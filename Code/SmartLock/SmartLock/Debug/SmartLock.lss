
SmartLock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000272  00800100  000016a4  00001738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000403  00800372  00800372  000019aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00001a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021d8  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1a  00000000  00000000  00003c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b03  00000000  00000000  00004656  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  0000515c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000800  00000000  00000000  000052e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001907  00000000  00000000  00005ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000468  00000000  00000000  000073e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c0       	rjmp	.+140    	; 0x8e <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	8f c3       	rjmp	.+1822   	; 0x730 <__vector_4>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c0       	rjmp	.+170    	; 0xe0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
	...

0000008c <__ctors_start>:
      8c:	27 0b       	sbc	r18, r23

0000008e <__ctors_end>:
      8e:	11 24       	eor	r1, r1
      90:	1f be       	out	0x3f, r1	; 63
      92:	cf ef       	ldi	r28, 0xFF	; 255
      94:	d0 e4       	ldi	r29, 0x40	; 64
      96:	de bf       	out	0x3e, r29	; 62
      98:	cd bf       	out	0x3d, r28	; 61

0000009a <__do_copy_data>:
      9a:	13 e0       	ldi	r17, 0x03	; 3
      9c:	a0 e0       	ldi	r26, 0x00	; 0
      9e:	b1 e0       	ldi	r27, 0x01	; 1
      a0:	e4 ea       	ldi	r30, 0xA4	; 164
      a2:	f6 e1       	ldi	r31, 0x16	; 22
      a4:	00 e0       	ldi	r16, 0x00	; 0
      a6:	0b bf       	out	0x3b, r16	; 59
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x14>
      aa:	07 90       	elpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a2 37       	cpi	r26, 0x72	; 114
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0x10>

000000b4 <__do_clear_bss>:
      b4:	27 e0       	ldi	r18, 0x07	; 7
      b6:	a2 e7       	ldi	r26, 0x72	; 114
      b8:	b3 e0       	ldi	r27, 0x03	; 3
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a5 37       	cpi	r26, 0x75	; 117
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>

000000c4 <__do_global_ctors>:
      c4:	10 e0       	ldi	r17, 0x00	; 0
      c6:	c7 e4       	ldi	r28, 0x47	; 71
      c8:	d0 e0       	ldi	r29, 0x00	; 0
      ca:	04 c0       	rjmp	.+8      	; 0xd4 <__do_global_ctors+0x10>
      cc:	21 97       	sbiw	r28, 0x01	; 1
      ce:	fe 01       	movw	r30, r28
      d0:	0e 94 47 0b 	call	0x168e	; 0x168e <__tablejump2__>
      d4:	c6 34       	cpi	r28, 0x46	; 70
      d6:	d1 07       	cpc	r29, r17
      d8:	c9 f7       	brne	.-14     	; 0xcc <__do_global_ctors+0x8>
      da:	ef d7       	rcall	.+4062   	; 0x10ba <main>
      dc:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <_ZN4OLEDC1E3TWI>:
{
private:
uint8_t  oled_bufer[(OLED_HEIGHT/8)*OLED_WIDTH];
TWI wire;
public:
OLED(TWI _wire)
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
	public:
	TWI(){}

	void twi_Init(void)
	{
		TWBR=(((CPU_F)/(SCL_F)-16)/2);
      e6:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
		TWSR=0;
      ea:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
		while(!(TWCR & (1<<TWINT))){};
	}

	void twi_Start(void)
	{
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
      ee:	24 ea       	ldi	r18, 0xA4	; 164
      f0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
      f4:	ec eb       	ldi	r30, 0xBC	; 188
      f6:	f0 e0       	ldi	r31, 0x00	; 0
      f8:	20 81       	ld	r18, Z
      fa:	22 23       	and	r18, r18
      fc:	ec f7       	brge	.-6      	; 0xf8 <_ZN4OLEDC1E3TWI+0x16>
		TWSR=0;
	}

	void twi_SendAdress(void) 
	{
		TWDR=(Dev_Adr<<1)|0;
      fe:	28 e7       	ldi	r18, 0x78	; 120
     100:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		TWCR=(1<<TWINT)|(1<<TWEN);
     104:	24 e8       	ldi	r18, 0x84	; 132
     106:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		while(!(TWCR & (1<<TWINT))){};
     10a:	ec eb       	ldi	r30, 0xBC	; 188
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	20 81       	ld	r18, Z
     110:	22 23       	and	r18, r18
     112:	ec f7       	brge	.-6      	; 0x10e <_ZN4OLEDC1E3TWI+0x2c>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     114:	20 e8       	ldi	r18, 0x80	; 128
     116:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     11a:	24 e8       	ldi	r18, 0x84	; 132
     11c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     120:	ec eb       	ldi	r30, 0xBC	; 188
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	20 81       	ld	r18, Z
     126:	22 23       	and	r18, r18
     128:	ec f7       	brge	.-6      	; 0x124 <_ZN4OLEDC1E3TWI+0x42>

	TWDR=command;							
     12a:	28 ea       	ldi	r18, 0xA8	; 168
     12c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     130:	24 e8       	ldi	r18, 0x84	; 132
     132:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     136:	ec eb       	ldi	r30, 0xBC	; 188
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	20 81       	ld	r18, Z
     13c:	22 23       	and	r18, r18
     13e:	ec f7       	brge	.-6      	; 0x13a <_ZN4OLEDC1E3TWI+0x58>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     140:	20 e8       	ldi	r18, 0x80	; 128
     142:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     146:	24 e8       	ldi	r18, 0x84	; 132
     148:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     14c:	ec eb       	ldi	r30, 0xBC	; 188
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	20 81       	ld	r18, Z
     152:	22 23       	and	r18, r18
     154:	ec f7       	brge	.-6      	; 0x150 <_ZN4OLEDC1E3TWI+0x6e>

	TWDR=command;							
     156:	2f e3       	ldi	r18, 0x3F	; 63
     158:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     15c:	24 e8       	ldi	r18, 0x84	; 132
     15e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     162:	ec eb       	ldi	r30, 0xBC	; 188
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	20 81       	ld	r18, Z
     168:	22 23       	and	r18, r18
     16a:	ec f7       	brge	.-6      	; 0x166 <_ZN4OLEDC1E3TWI+0x84>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     16c:	20 e8       	ldi	r18, 0x80	; 128
     16e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     172:	24 e8       	ldi	r18, 0x84	; 132
     174:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     178:	ec eb       	ldi	r30, 0xBC	; 188
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	20 81       	ld	r18, Z
     17e:	22 23       	and	r18, r18
     180:	ec f7       	brge	.-6      	; 0x17c <_ZN4OLEDC1E3TWI+0x9a>

	TWDR=command;							
     182:	23 ed       	ldi	r18, 0xD3	; 211
     184:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     188:	24 e8       	ldi	r18, 0x84	; 132
     18a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     18e:	ec eb       	ldi	r30, 0xBC	; 188
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	20 81       	ld	r18, Z
     194:	22 23       	and	r18, r18
     196:	ec f7       	brge	.-6      	; 0x192 <_ZN4OLEDC1E3TWI+0xb0>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     198:	20 e8       	ldi	r18, 0x80	; 128
     19a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     19e:	24 e8       	ldi	r18, 0x84	; 132
     1a0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1a4:	ec eb       	ldi	r30, 0xBC	; 188
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	20 81       	ld	r18, Z
     1aa:	22 23       	and	r18, r18
     1ac:	ec f7       	brge	.-6      	; 0x1a8 <_ZN4OLEDC1E3TWI+0xc6>

	TWDR=command;							
     1ae:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1b2:	24 e8       	ldi	r18, 0x84	; 132
     1b4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1b8:	ec eb       	ldi	r30, 0xBC	; 188
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	20 81       	ld	r18, Z
     1be:	22 23       	and	r18, r18
     1c0:	ec f7       	brge	.-6      	; 0x1bc <_ZN4OLEDC1E3TWI+0xda>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     1c2:	20 e8       	ldi	r18, 0x80	; 128
     1c4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1c8:	24 e8       	ldi	r18, 0x84	; 132
     1ca:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1ce:	ec eb       	ldi	r30, 0xBC	; 188
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	20 81       	ld	r18, Z
     1d4:	22 23       	and	r18, r18
     1d6:	ec f7       	brge	.-6      	; 0x1d2 <_ZN4OLEDC1E3TWI+0xf0>

	TWDR=command;							
     1d8:	20 e4       	ldi	r18, 0x40	; 64
     1da:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1de:	24 e8       	ldi	r18, 0x84	; 132
     1e0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1e4:	ec eb       	ldi	r30, 0xBC	; 188
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	20 81       	ld	r18, Z
     1ea:	22 23       	and	r18, r18
     1ec:	ec f7       	brge	.-6      	; 0x1e8 <_ZN4OLEDC1E3TWI+0x106>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     1ee:	20 e8       	ldi	r18, 0x80	; 128
     1f0:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     1f4:	24 e8       	ldi	r18, 0x84	; 132
     1f6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     1fa:	ec eb       	ldi	r30, 0xBC	; 188
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	20 81       	ld	r18, Z
     200:	22 23       	and	r18, r18
     202:	ec f7       	brge	.-6      	; 0x1fe <_ZN4OLEDC1E3TWI+0x11c>

	TWDR=command;							
     204:	21 ea       	ldi	r18, 0xA1	; 161
     206:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     20a:	24 e8       	ldi	r18, 0x84	; 132
     20c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     210:	ec eb       	ldi	r30, 0xBC	; 188
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	20 81       	ld	r18, Z
     216:	22 23       	and	r18, r18
     218:	ec f7       	brge	.-6      	; 0x214 <_ZN4OLEDC1E3TWI+0x132>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     21a:	20 e8       	ldi	r18, 0x80	; 128
     21c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     220:	24 e8       	ldi	r18, 0x84	; 132
     222:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     226:	ec eb       	ldi	r30, 0xBC	; 188
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	20 81       	ld	r18, Z
     22c:	22 23       	and	r18, r18
     22e:	ec f7       	brge	.-6      	; 0x22a <_ZN4OLEDC1E3TWI+0x148>

	TWDR=command;							
     230:	28 ec       	ldi	r18, 0xC8	; 200
     232:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     236:	24 e8       	ldi	r18, 0x84	; 132
     238:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     23c:	ec eb       	ldi	r30, 0xBC	; 188
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	20 81       	ld	r18, Z
     242:	22 23       	and	r18, r18
     244:	ec f7       	brge	.-6      	; 0x240 <_ZN4OLEDC1E3TWI+0x15e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     246:	20 e8       	ldi	r18, 0x80	; 128
     248:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     24c:	24 e8       	ldi	r18, 0x84	; 132
     24e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     252:	ec eb       	ldi	r30, 0xBC	; 188
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	20 81       	ld	r18, Z
     258:	22 23       	and	r18, r18
     25a:	ec f7       	brge	.-6      	; 0x256 <_ZN4OLEDC1E3TWI+0x174>

	TWDR=command;							
     25c:	2a ed       	ldi	r18, 0xDA	; 218
     25e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     262:	24 e8       	ldi	r18, 0x84	; 132
     264:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     268:	ec eb       	ldi	r30, 0xBC	; 188
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	20 81       	ld	r18, Z
     26e:	22 23       	and	r18, r18
     270:	ec f7       	brge	.-6      	; 0x26c <_ZN4OLEDC1E3TWI+0x18a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     272:	20 e8       	ldi	r18, 0x80	; 128
     274:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     278:	24 e8       	ldi	r18, 0x84	; 132
     27a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     27e:	ec eb       	ldi	r30, 0xBC	; 188
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	20 81       	ld	r18, Z
     284:	22 23       	and	r18, r18
     286:	ec f7       	brge	.-6      	; 0x282 <_ZN4OLEDC1E3TWI+0x1a0>

	TWDR=command;							
     288:	22 e1       	ldi	r18, 0x12	; 18
     28a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     28e:	24 e8       	ldi	r18, 0x84	; 132
     290:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     294:	ec eb       	ldi	r30, 0xBC	; 188
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	20 81       	ld	r18, Z
     29a:	22 23       	and	r18, r18
     29c:	ec f7       	brge	.-6      	; 0x298 <_ZN4OLEDC1E3TWI+0x1b6>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     29e:	20 e8       	ldi	r18, 0x80	; 128
     2a0:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2a4:	24 e8       	ldi	r18, 0x84	; 132
     2a6:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2aa:	ec eb       	ldi	r30, 0xBC	; 188
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	20 81       	ld	r18, Z
     2b0:	22 23       	and	r18, r18
     2b2:	ec f7       	brge	.-6      	; 0x2ae <_ZN4OLEDC1E3TWI+0x1cc>

	TWDR=command;							
     2b4:	21 e8       	ldi	r18, 0x81	; 129
     2b6:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2ba:	24 e8       	ldi	r18, 0x84	; 132
     2bc:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2c0:	ec eb       	ldi	r30, 0xBC	; 188
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	20 81       	ld	r18, Z
     2c6:	22 23       	and	r18, r18
     2c8:	ec f7       	brge	.-6      	; 0x2c4 <_ZN4OLEDC1E3TWI+0x1e2>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     2ca:	20 e8       	ldi	r18, 0x80	; 128
     2cc:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2d0:	24 e8       	ldi	r18, 0x84	; 132
     2d2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2d6:	ec eb       	ldi	r30, 0xBC	; 188
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	20 81       	ld	r18, Z
     2dc:	22 23       	and	r18, r18
     2de:	ec f7       	brge	.-6      	; 0x2da <_ZN4OLEDC1E3TWI+0x1f8>

	TWDR=command;							
     2e0:	2f ef       	ldi	r18, 0xFF	; 255
     2e2:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2e6:	24 e8       	ldi	r18, 0x84	; 132
     2e8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     2ec:	ec eb       	ldi	r30, 0xBC	; 188
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	20 81       	ld	r18, Z
     2f2:	22 23       	and	r18, r18
     2f4:	ec f7       	brge	.-6      	; 0x2f0 <_ZN4OLEDC1E3TWI+0x20e>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     2f6:	20 e8       	ldi	r18, 0x80	; 128
     2f8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     2fc:	24 e8       	ldi	r18, 0x84	; 132
     2fe:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     302:	ec eb       	ldi	r30, 0xBC	; 188
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	20 81       	ld	r18, Z
     308:	22 23       	and	r18, r18
     30a:	ec f7       	brge	.-6      	; 0x306 <_ZN4OLEDC1E3TWI+0x224>

	TWDR=command;							
     30c:	24 ea       	ldi	r18, 0xA4	; 164
     30e:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     312:	24 e8       	ldi	r18, 0x84	; 132
     314:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     318:	ec eb       	ldi	r30, 0xBC	; 188
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	20 81       	ld	r18, Z
     31e:	22 23       	and	r18, r18
     320:	ec f7       	brge	.-6      	; 0x31c <_ZN4OLEDC1E3TWI+0x23a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     322:	20 e8       	ldi	r18, 0x80	; 128
     324:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     328:	24 e8       	ldi	r18, 0x84	; 132
     32a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     32e:	ec eb       	ldi	r30, 0xBC	; 188
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	20 81       	ld	r18, Z
     334:	22 23       	and	r18, r18
     336:	ec f7       	brge	.-6      	; 0x332 <_ZN4OLEDC1E3TWI+0x250>

	TWDR=command;							
     338:	26 ea       	ldi	r18, 0xA6	; 166
     33a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     33e:	24 e8       	ldi	r18, 0x84	; 132
     340:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     344:	ec eb       	ldi	r30, 0xBC	; 188
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	20 81       	ld	r18, Z
     34a:	22 23       	and	r18, r18
     34c:	ec f7       	brge	.-6      	; 0x348 <_ZN4OLEDC1E3TWI+0x266>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     34e:	20 e8       	ldi	r18, 0x80	; 128
     350:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     354:	24 e8       	ldi	r18, 0x84	; 132
     356:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     35a:	ec eb       	ldi	r30, 0xBC	; 188
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	20 81       	ld	r18, Z
     360:	22 23       	and	r18, r18
     362:	ec f7       	brge	.-6      	; 0x35e <_ZN4OLEDC1E3TWI+0x27c>

	TWDR=command;							
     364:	25 ed       	ldi	r18, 0xD5	; 213
     366:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     36a:	24 e8       	ldi	r18, 0x84	; 132
     36c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     370:	ec eb       	ldi	r30, 0xBC	; 188
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	20 81       	ld	r18, Z
     376:	22 23       	and	r18, r18
     378:	ec f7       	brge	.-6      	; 0x374 <_ZN4OLEDC1E3TWI+0x292>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     37a:	20 e8       	ldi	r18, 0x80	; 128
     37c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     380:	24 e8       	ldi	r18, 0x84	; 132
     382:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     386:	ec eb       	ldi	r30, 0xBC	; 188
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	20 81       	ld	r18, Z
     38c:	22 23       	and	r18, r18
     38e:	ec f7       	brge	.-6      	; 0x38a <_ZN4OLEDC1E3TWI+0x2a8>

	TWDR=command;							
     390:	20 e8       	ldi	r18, 0x80	; 128
     392:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     396:	24 e8       	ldi	r18, 0x84	; 132
     398:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     39c:	ec eb       	ldi	r30, 0xBC	; 188
     39e:	f0 e0       	ldi	r31, 0x00	; 0
     3a0:	20 81       	ld	r18, Z
     3a2:	22 23       	and	r18, r18
     3a4:	ec f7       	brge	.-6      	; 0x3a0 <_ZN4OLEDC1E3TWI+0x2be>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     3a6:	20 e8       	ldi	r18, 0x80	; 128
     3a8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3ac:	24 e8       	ldi	r18, 0x84	; 132
     3ae:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3b2:	ec eb       	ldi	r30, 0xBC	; 188
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	20 81       	ld	r18, Z
     3b8:	22 23       	and	r18, r18
     3ba:	ec f7       	brge	.-6      	; 0x3b6 <_ZN4OLEDC1E3TWI+0x2d4>

	TWDR=command;							
     3bc:	2d e8       	ldi	r18, 0x8D	; 141
     3be:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3c2:	24 e8       	ldi	r18, 0x84	; 132
     3c4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3c8:	ec eb       	ldi	r30, 0xBC	; 188
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	20 81       	ld	r18, Z
     3ce:	22 23       	and	r18, r18
     3d0:	ec f7       	brge	.-6      	; 0x3cc <_ZN4OLEDC1E3TWI+0x2ea>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     3d2:	20 e8       	ldi	r18, 0x80	; 128
     3d4:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3d8:	24 e8       	ldi	r18, 0x84	; 132
     3da:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3de:	ec eb       	ldi	r30, 0xBC	; 188
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	20 81       	ld	r18, Z
     3e4:	22 23       	and	r18, r18
     3e6:	ec f7       	brge	.-6      	; 0x3e2 <_ZN4OLEDC1E3TWI+0x300>

	TWDR=command;							
     3e8:	24 e1       	ldi	r18, 0x14	; 20
     3ea:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     3ee:	24 e8       	ldi	r18, 0x84	; 132
     3f0:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     3f4:	ec eb       	ldi	r30, 0xBC	; 188
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	20 81       	ld	r18, Z
     3fa:	22 23       	and	r18, r18
     3fc:	ec f7       	brge	.-6      	; 0x3f8 <_ZN4OLEDC1E3TWI+0x316>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     3fe:	20 e8       	ldi	r18, 0x80	; 128
     400:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     404:	24 e8       	ldi	r18, 0x84	; 132
     406:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     40a:	ec eb       	ldi	r30, 0xBC	; 188
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	20 81       	ld	r18, Z
     410:	22 23       	and	r18, r18
     412:	ec f7       	brge	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>

	TWDR=command;							
     414:	2f ea       	ldi	r18, 0xAF	; 175
     416:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     41a:	24 e8       	ldi	r18, 0x84	; 132
     41c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     420:	ec eb       	ldi	r30, 0xBC	; 188
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	20 81       	ld	r18, Z
     426:	22 23       	and	r18, r18
     428:	ec f7       	brge	.-6      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     42a:	20 e8       	ldi	r18, 0x80	; 128
     42c:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     430:	24 e8       	ldi	r18, 0x84	; 132
     432:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     436:	ec eb       	ldi	r30, 0xBC	; 188
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	20 81       	ld	r18, Z
     43c:	22 23       	and	r18, r18
     43e:	ec f7       	brge	.-6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

	TWDR=command;							
     440:	20 e2       	ldi	r18, 0x20	; 32
     442:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     446:	24 e8       	ldi	r18, 0x84	; 132
     448:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     44c:	ec eb       	ldi	r30, 0xBC	; 188
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	20 81       	ld	r18, Z
     452:	22 23       	and	r18, r18
     454:	ec f7       	brge	.-6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     456:	20 e8       	ldi	r18, 0x80	; 128
     458:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     45c:	24 e8       	ldi	r18, 0x84	; 132
     45e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     462:	ec eb       	ldi	r30, 0xBC	; 188
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	20 81       	ld	r18, Z
     468:	22 23       	and	r18, r18
     46a:	ec f7       	brge	.-6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>

	TWDR=command;							
     46c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     470:	24 e8       	ldi	r18, 0x84	; 132
     472:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     476:	ec eb       	ldi	r30, 0xBC	; 188
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	20 81       	ld	r18, Z
     47c:	22 23       	and	r18, r18
     47e:	ec f7       	brge	.-6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     480:	20 e8       	ldi	r18, 0x80	; 128
     482:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     486:	24 e8       	ldi	r18, 0x84	; 132
     488:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     48c:	ec eb       	ldi	r30, 0xBC	; 188
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	20 81       	ld	r18, Z
     492:	22 23       	and	r18, r18
     494:	ec f7       	brge	.-6      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>

	TWDR=command;							
     496:	21 e2       	ldi	r18, 0x21	; 33
     498:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     49c:	24 e8       	ldi	r18, 0x84	; 132
     49e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4a2:	ec eb       	ldi	r30, 0xBC	; 188
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	20 81       	ld	r18, Z
     4a8:	22 23       	and	r18, r18
     4aa:	ec f7       	brge	.-6      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     4ac:	20 e8       	ldi	r18, 0x80	; 128
     4ae:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4b2:	24 e8       	ldi	r18, 0x84	; 132
     4b4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4b8:	ec eb       	ldi	r30, 0xBC	; 188
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	20 81       	ld	r18, Z
     4be:	22 23       	and	r18, r18
     4c0:	ec f7       	brge	.-6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>

	TWDR=command;							
     4c2:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4c6:	24 e8       	ldi	r18, 0x84	; 132
     4c8:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4cc:	ec eb       	ldi	r30, 0xBC	; 188
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	20 81       	ld	r18, Z
     4d2:	22 23       	and	r18, r18
     4d4:	ec f7       	brge	.-6      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     4d6:	20 e8       	ldi	r18, 0x80	; 128
     4d8:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4dc:	24 e8       	ldi	r18, 0x84	; 132
     4de:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4e2:	ec eb       	ldi	r30, 0xBC	; 188
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	20 81       	ld	r18, Z
     4e8:	22 23       	and	r18, r18
     4ea:	ec f7       	brge	.-6      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>

	TWDR=command;							
     4ec:	2f e7       	ldi	r18, 0x7F	; 127
     4ee:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     4f2:	24 e8       	ldi	r18, 0x84	; 132
     4f4:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     4f8:	ec eb       	ldi	r30, 0xBC	; 188
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	20 81       	ld	r18, Z
     4fe:	22 23       	and	r18, r18
     500:	ec f7       	brge	.-6      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     502:	20 e8       	ldi	r18, 0x80	; 128
     504:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     508:	24 e8       	ldi	r18, 0x84	; 132
     50a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     50e:	ec eb       	ldi	r30, 0xBC	; 188
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	20 81       	ld	r18, Z
     514:	22 23       	and	r18, r18
     516:	ec f7       	brge	.-6      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>

	TWDR=command;							
     518:	22 e2       	ldi	r18, 0x22	; 34
     51a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     51e:	24 e8       	ldi	r18, 0x84	; 132
     520:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     524:	ec eb       	ldi	r30, 0xBC	; 188
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	20 81       	ld	r18, Z
     52a:	22 23       	and	r18, r18
     52c:	ec f7       	brge	.-6      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     52e:	20 e8       	ldi	r18, 0x80	; 128
     530:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     534:	24 e8       	ldi	r18, 0x84	; 132
     536:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     53a:	ec eb       	ldi	r30, 0xBC	; 188
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	20 81       	ld	r18, Z
     540:	22 23       	and	r18, r18
     542:	ec f7       	brge	.-6      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>

	TWDR=command;							
     544:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     548:	24 e8       	ldi	r18, 0x84	; 132
     54a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     54e:	ec eb       	ldi	r30, 0xBC	; 188
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	20 81       	ld	r18, Z
     554:	22 23       	and	r18, r18
     556:	ec f7       	brge	.-6      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
}
	

void OLED_Command(int command)
{
	TWDR=0x80;								
     558:	20 e8       	ldi	r18, 0x80	; 128
     55a:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     55e:	24 e8       	ldi	r18, 0x84	; 132
     560:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     564:	ec eb       	ldi	r30, 0xBC	; 188
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	20 81       	ld	r18, Z
     56a:	22 23       	and	r18, r18
     56c:	ec f7       	brge	.-6      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>

	TWDR=command;							
     56e:	27 e0       	ldi	r18, 0x07	; 7
     570:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     574:	24 e8       	ldi	r18, 0x84	; 132
     576:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     57a:	ec eb       	ldi	r30, 0xBC	; 188
     57c:	f0 e0       	ldi	r31, 0x00	; 0
     57e:	20 81       	ld	r18, Z
     580:	22 23       	and	r18, r18
     582:	ec f7       	brge	.-6      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
	OLED_Command(0);
	OLED_Command(127);
	OLED_Command(0x22);
	OLED_Command(0);
	OLED_Command(7);
	TWDR=0x40;
     584:	20 e4       	ldi	r18, 0x40	; 64
     586:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
     58a:	24 e8       	ldi	r18, 0x84	; 132
     58c:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     590:	dc 01       	movw	r26, r24
     592:	9c 01       	movw	r18, r24
     594:	3c 5f       	subi	r19, 0xFC	; 252
     596:	fc 01       	movw	r30, r24

void OLED_Bufer_Clear()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
		oled_bufer[i]=0b00000000;
     598:	11 92       	st	Z+, r1
	}
}

void OLED_Bufer_Clear()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
     59a:	2e 17       	cp	r18, r30
     59c:	3f 07       	cpc	r19, r31
     59e:	e1 f7       	brne	.-8      	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
}


void OLED_Data(int data)
{
	TWDR=data;							
     5a0:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR=(1<<TWINT)|(1<<TWEN);				
     5a4:	84 e8       	ldi	r24, 0x84	; 132
     5a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT))){};
     5aa:	ec eb       	ldi	r30, 0xBC	; 188
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	88 23       	and	r24, r24
     5b2:	ec f7       	brge	.-6      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
}


void OLED_Data(int data)
{
	TWDR=data;							
     5b4:	cb eb       	ldi	r28, 0xBB	; 187
     5b6:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);				
     5b8:	ec eb       	ldi	r30, 0xBC	; 188
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	94 e8       	ldi	r25, 0x84	; 132

void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
			OLED_Data(oled_bufer[i]);
     5be:	8d 91       	ld	r24, X+
}


void OLED_Data(int data)
{
	TWDR=data;							
     5c0:	88 83       	st	Y, r24
	TWCR=(1<<TWINT)|(1<<TWEN);				
     5c2:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))){};
     5c4:	80 81       	ld	r24, Z
     5c6:	88 23       	and	r24, r24
     5c8:	ec f7       	brge	.-6      	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
}


void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
     5ca:	a2 17       	cp	r26, r18
     5cc:	b3 07       	cpc	r27, r19
     5ce:	b9 f7       	brne	.-18     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
	OLED_Bufer_Clear();
	OLED_Data(0b00000000);
	OLED_Write_Bufer();
	//OLED_Data(0b00000000);
	//OLED_Write_Bufer();
}
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>:
			}
		}
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
     5d6:	2f 92       	push	r2
     5d8:	3f 92       	push	r3
     5da:	4f 92       	push	r4
     5dc:	5f 92       	push	r5
     5de:	6f 92       	push	r6
     5e0:	7f 92       	push	r7
     5e2:	8f 92       	push	r8
     5e4:	9f 92       	push	r9
     5e6:	af 92       	push	r10
     5e8:	bf 92       	push	r11
     5ea:	cf 92       	push	r12
     5ec:	df 92       	push	r13
     5ee:	ef 92       	push	r14
     5f0:	ff 92       	push	r15
     5f2:	0f 93       	push	r16
     5f4:	1f 93       	push	r17
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x26>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x28>
     5fe:	00 d0       	rcall	.+0      	; 0x600 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x2a>
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	9e 83       	std	Y+6, r25	; 0x06
     606:	8d 83       	std	Y+5, r24	; 0x05
     608:	3a 01       	movw	r6, r20
     60a:	29 01       	movw	r4, r18
     60c:	18 01       	movw	r2, r16
{
	for(int j=0;j<height;j++)
     60e:	10 16       	cp	r1, r16
     610:	11 06       	cpc	r1, r17
     612:	0c f0       	brlt	.+2      	; 0x616 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x40>
     614:	74 c0       	rjmp	.+232    	; 0x6fe <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x128>
     616:	3c 83       	std	Y+4, r19	; 0x04
     618:	2b 83       	std	Y+3, r18	; 0x03
     61a:	8e 2c       	mov	r8, r14
     61c:	9f 2c       	mov	r9, r15
     61e:	c1 2c       	mov	r12, r1
     620:	d1 2c       	mov	r13, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     622:	0f 2e       	mov	r0, r31
     624:	f7 e0       	ldi	r31, 0x07	; 7
     626:	af 2e       	mov	r10, r31
     628:	b1 2c       	mov	r11, r1
     62a:	f0 2d       	mov	r31, r0
     62c:	c9 01       	movw	r24, r18
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	9b 01       	movw	r18, r22
     63c:	28 0f       	add	r18, r24
     63e:	39 1f       	adc	r19, r25
     640:	3a 83       	std	Y+2, r19	; 0x02
     642:	29 83       	std	Y+1, r18	; 0x01
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     644:	14 14       	cp	r1, r4
     646:	15 04       	cpc	r1, r5
     648:	0c f0       	brlt	.+2      	; 0x64c <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x76>
     64a:	4e c0       	rjmp	.+156    	; 0x6e8 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x112>
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     64c:	c6 01       	movw	r24, r12
     64e:	87 70       	andi	r24, 0x07	; 7
     650:	90 78       	andi	r25, 0x80	; 128
     652:	99 23       	and	r25, r25
     654:	24 f4       	brge	.+8      	; 0x65e <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x88>
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	88 6f       	ori	r24, 0xF8	; 248
     65a:	9f 6f       	ori	r25, 0xFF	; 255
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	85 01       	movw	r16, r10
     660:	08 1b       	sub	r16, r24
     662:	19 0b       	sbc	r17, r25
     664:	76 01       	movw	r14, r12
     666:	dd 20       	and	r13, r13
     668:	1c f4       	brge	.+6      	; 0x670 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x9a>
     66a:	97 e0       	ldi	r25, 0x07	; 7
     66c:	e9 0e       	add	r14, r25
     66e:	f1 1c       	adc	r15, r1
     670:	f5 94       	asr	r15
     672:	e7 94       	ror	r14
     674:	f5 94       	asr	r15
     676:	e7 94       	ror	r14
     678:	f5 94       	asr	r15
     67a:	e7 94       	ror	r14
     67c:	e6 0c       	add	r14, r6
     67e:	f7 1c       	adc	r15, r7
     680:	f6 94       	lsr	r15
     682:	fe 2c       	mov	r15, r14
     684:	ee 24       	eor	r14, r14
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	ab 01       	movw	r20, r22
     68c:	4e 0d       	add	r20, r14
     68e:	5f 1d       	adc	r21, r15
     690:	2d 81       	ldd	r18, Y+5	; 0x05
     692:	3e 81       	ldd	r19, Y+6	; 0x06
     694:	42 0f       	add	r20, r18
     696:	53 1f       	adc	r21, r19
     698:	89 81       	ldd	r24, Y+1	; 0x01
     69a:	9a 81       	ldd	r25, Y+2	; 0x02
     69c:	e8 0e       	add	r14, r24
     69e:	f9 1e       	adc	r15, r25
     6a0:	e2 0e       	add	r14, r18
     6a2:	f3 1e       	adc	r15, r19
     6a4:	d4 01       	movw	r26, r8
     6a6:	fa 01       	movw	r30, r20
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	8c 91       	ld	r24, X
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	02 2e       	mov	r0, r18
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xe2>
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	0a 94       	dec	r0
     6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xde>
     6bc:	80 78       	andi	r24, 0x80	; 128
     6be:	99 27       	eor	r25, r25
     6c0:	00 2e       	mov	r0, r16
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xf2>
     6c4:	95 95       	asr	r25
     6c6:	87 95       	ror	r24
     6c8:	0a 94       	dec	r0
     6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xee>
     6cc:	90 81       	ld	r25, Z
     6ce:	89 2b       	or	r24, r25
     6d0:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     6d2:	2f 5f       	subi	r18, 0xFF	; 255
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
     6d6:	28 30       	cpi	r18, 0x08	; 8
     6d8:	31 05       	cpc	r19, r1
     6da:	41 f7       	brne	.-48     	; 0x6ac <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xd6>
     6dc:	48 5f       	subi	r20, 0xF8	; 248
     6de:	5f 4f       	sbci	r21, 0xFF	; 255
     6e0:	11 96       	adiw	r26, 0x01	; 1
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     6e2:	4e 15       	cp	r20, r14
     6e4:	5f 05       	cpc	r21, r15
     6e6:	f9 f6       	brne	.-66     	; 0x6a6 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0xd0>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     6e8:	3f ef       	ldi	r19, 0xFF	; 255
     6ea:	c3 1a       	sub	r12, r19
     6ec:	d3 0a       	sbc	r13, r19
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	88 0e       	add	r8, r24
     6f4:	99 1e       	adc	r9, r25
     6f6:	2c 14       	cp	r2, r12
     6f8:	3d 04       	cpc	r3, r13
     6fa:	09 f0       	breq	.+2      	; 0x6fe <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x128>
     6fc:	a3 cf       	rjmp	.-186    	; 0x644 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh+0x6e>
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
			}
		}
	}
}
     6fe:	26 96       	adiw	r28, 0x06	; 6
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	de bf       	out	0x3e, r29	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	ff 90       	pop	r15
     714:	ef 90       	pop	r14
     716:	df 90       	pop	r13
     718:	cf 90       	pop	r12
     71a:	bf 90       	pop	r11
     71c:	af 90       	pop	r10
     71e:	9f 90       	pop	r9
     720:	8f 90       	pop	r8
     722:	7f 90       	pop	r7
     724:	6f 90       	pop	r6
     726:	5f 90       	pop	r5
     728:	4f 90       	pop	r4
     72a:	3f 90       	pop	r3
     72c:	2f 90       	pop	r2
     72e:	08 95       	ret

00000730 <__vector_4>:
bool button2=false;
bool button3=false;
bool butonpressed=false;

ISR(PCINT0_vect)
{
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	0b b6       	in	r0, 0x3b	; 59
     73c:	0f 92       	push	r0
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	2f 93       	push	r18
     744:	3f 93       	push	r19
     746:	4f 93       	push	r20
     748:	5f 93       	push	r21
     74a:	6f 93       	push	r22
     74c:	7f 93       	push	r23
     74e:	8f 93       	push	r24
     750:	9f 93       	push	r25
     752:	af 93       	push	r26
     754:	bf 93       	push	r27
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
    cli();
     75e:	f8 94       	cli
	if (num == 1)
     760:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <num>
     764:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <num+0x1>
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	29 f4       	brne	.+10     	; 0x776 <__vector_4+0x46>
	num = 0;
     76c:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <num+0x1>
     770:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <num>
     774:	06 c0       	rjmp	.+12     	; 0x782 <__vector_4+0x52>
	else
    num = 1;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <num+0x1>
     77e:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <num>
//sleep_disable();
	if(PINA==0b00000100 )
     782:	80 b1       	in	r24, 0x00	; 0
     784:	84 30       	cpi	r24, 0x04	; 4
     786:	09 f0       	breq	.+2      	; 0x78a <__vector_4+0x5a>
     788:	5c c2       	rjmp	.+1208   	; 0xc42 <__vector_4+0x512>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	c9 01       	movw	r24, r18
     790:	33 23       	and	r19, r19
     792:	0c f4       	brge	.+2      	; 0x796 <__vector_4+0x66>
     794:	07 96       	adiw	r24, 0x07	; 7
     796:	95 95       	asr	r25
     798:	87 95       	ror	r24
     79a:	95 95       	asr	r25
     79c:	87 95       	ror	r24
     79e:	95 95       	asr	r25
     7a0:	87 95       	ror	r24
     7a2:	96 95       	lsr	r25
     7a4:	98 2f       	mov	r25, r24
     7a6:	88 27       	eor	r24, r24
     7a8:	97 95       	ror	r25
     7aa:	87 95       	ror	r24
     7ac:	fc 01       	movw	r30, r24
     7ae:	ec 58       	subi	r30, 0x8C	; 140
     7b0:	fc 4f       	sbci	r31, 0xFC	; 252
     7b2:	84 58       	subi	r24, 0x84	; 132
     7b4:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     7b6:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     7b8:	8e 17       	cp	r24, r30
     7ba:	9f 07       	cpc	r25, r31
     7bc:	e1 f7       	brne	.-8      	; 0x7b6 <__vector_4+0x86>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     7be:	2f 5f       	subi	r18, 0xFF	; 255
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	28 30       	cpi	r18, 0x08	; 8
     7c4:	31 05       	cpc	r19, r1
     7c6:	19 f7       	brne	.-58     	; 0x78e <__vector_4+0x5e>
     7c8:	ca e6       	ldi	r28, 0x6A	; 106
     7ca:	d3 e0       	ldi	r29, 0x03	; 3
     7cc:	a0 e0       	ldi	r26, 0x00	; 0
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     7d0:	07 e0       	ldi	r16, 0x07	; 7
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	49 91       	ld	r20, Y+
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	cd 01       	movw	r24, r26
     7da:	87 70       	andi	r24, 0x07	; 7
     7dc:	90 78       	andi	r25, 0x80	; 128
     7de:	99 23       	and	r25, r25
     7e0:	24 f4       	brge	.+8      	; 0x7ea <__vector_4+0xba>
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	88 6f       	ori	r24, 0xF8	; 248
     7e6:	9f 6f       	ori	r25, 0xFF	; 255
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	b8 01       	movw	r22, r16
     7ec:	68 1b       	sub	r22, r24
     7ee:	79 0b       	sbc	r23, r25
     7f0:	fd 01       	movw	r30, r26
     7f2:	bb 23       	and	r27, r27
     7f4:	0c f4       	brge	.+2      	; 0x7f8 <__vector_4+0xc8>
     7f6:	37 96       	adiw	r30, 0x07	; 7
     7f8:	f5 95       	asr	r31
     7fa:	e7 95       	ror	r30
     7fc:	f5 95       	asr	r31
     7fe:	e7 95       	ror	r30
     800:	f5 95       	asr	r31
     802:	e7 95       	ror	r30
     804:	f6 95       	lsr	r31
     806:	fe 2f       	mov	r31, r30
     808:	ee 27       	eor	r30, r30
     80a:	f7 95       	ror	r31
     80c:	e7 95       	ror	r30
     80e:	ec 58       	subi	r30, 0x8C	; 140
     810:	fc 4f       	sbci	r31, 0xFC	; 252
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	ca 01       	movw	r24, r20
     818:	02 2e       	mov	r0, r18
     81a:	02 c0       	rjmp	.+4      	; 0x820 <__vector_4+0xf0>
     81c:	88 0f       	add	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	0a 94       	dec	r0
     822:	e2 f7       	brpl	.-8      	; 0x81c <__vector_4+0xec>
     824:	80 78       	andi	r24, 0x80	; 128
     826:	99 27       	eor	r25, r25
     828:	06 2e       	mov	r0, r22
     82a:	02 c0       	rjmp	.+4      	; 0x830 <__vector_4+0x100>
     82c:	95 95       	asr	r25
     82e:	87 95       	ror	r24
     830:	0a 94       	dec	r0
     832:	e2 f7       	brpl	.-8      	; 0x82c <__vector_4+0xfc>
     834:	90 81       	ld	r25, Z
     836:	89 2b       	or	r24, r25
     838:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     83a:	2f 5f       	subi	r18, 0xFF	; 255
     83c:	3f 4f       	sbci	r19, 0xFF	; 255
     83e:	28 30       	cpi	r18, 0x08	; 8
     840:	31 05       	cpc	r19, r1
     842:	49 f7       	brne	.-46     	; 0x816 <__vector_4+0xe6>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     844:	11 96       	adiw	r26, 0x01	; 1
     846:	a8 30       	cpi	r26, 0x08	; 8
     848:	b1 05       	cpc	r27, r1
     84a:	21 f6       	brne	.-120    	; 0x7d4 <__vector_4+0xa4>
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,zero);
		//SMCR|=0b00000000;
	}
	if(PINA==0b00001000)
     84c:	80 b1       	in	r24, 0x00	; 0
     84e:	88 30       	cpi	r24, 0x08	; 8
     850:	09 f0       	breq	.+2      	; 0x854 <__vector_4+0x124>
     852:	fc c1       	rjmp	.+1016   	; 0xc4c <__vector_4+0x51c>
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     854:	20 e0       	ldi	r18, 0x00	; 0
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	c9 01       	movw	r24, r18
     85a:	33 23       	and	r19, r19
     85c:	0c f4       	brge	.+2      	; 0x860 <__vector_4+0x130>
     85e:	07 96       	adiw	r24, 0x07	; 7
     860:	95 95       	asr	r25
     862:	87 95       	ror	r24
     864:	95 95       	asr	r25
     866:	87 95       	ror	r24
     868:	95 95       	asr	r25
     86a:	87 95       	ror	r24
     86c:	96 95       	lsr	r25
     86e:	98 2f       	mov	r25, r24
     870:	88 27       	eor	r24, r24
     872:	97 95       	ror	r25
     874:	87 95       	ror	r24
     876:	fc 01       	movw	r30, r24
     878:	ec 58       	subi	r30, 0x8C	; 140
     87a:	fc 4f       	sbci	r31, 0xFC	; 252
     87c:	84 58       	subi	r24, 0x84	; 132
     87e:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     880:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     882:	8e 17       	cp	r24, r30
     884:	9f 07       	cpc	r25, r31
     886:	e1 f7       	brne	.-8      	; 0x880 <__vector_4+0x150>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     888:	2f 5f       	subi	r18, 0xFF	; 255
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	28 30       	cpi	r18, 0x08	; 8
     88e:	31 05       	cpc	r19, r1
     890:	19 f7       	brne	.-58     	; 0x858 <__vector_4+0x128>
     892:	c2 e6       	ldi	r28, 0x62	; 98
     894:	d3 e0       	ldi	r29, 0x03	; 3
     896:	a0 e0       	ldi	r26, 0x00	; 0
     898:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     89a:	07 e0       	ldi	r16, 0x07	; 7
     89c:	10 e0       	ldi	r17, 0x00	; 0
     89e:	49 91       	ld	r20, Y+
     8a0:	50 e0       	ldi	r21, 0x00	; 0
     8a2:	cd 01       	movw	r24, r26
     8a4:	87 70       	andi	r24, 0x07	; 7
     8a6:	90 78       	andi	r25, 0x80	; 128
     8a8:	99 23       	and	r25, r25
     8aa:	24 f4       	brge	.+8      	; 0x8b4 <__vector_4+0x184>
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	88 6f       	ori	r24, 0xF8	; 248
     8b0:	9f 6f       	ori	r25, 0xFF	; 255
     8b2:	01 96       	adiw	r24, 0x01	; 1
     8b4:	b8 01       	movw	r22, r16
     8b6:	68 1b       	sub	r22, r24
     8b8:	79 0b       	sbc	r23, r25
     8ba:	fd 01       	movw	r30, r26
     8bc:	bb 23       	and	r27, r27
     8be:	0c f4       	brge	.+2      	; 0x8c2 <__vector_4+0x192>
     8c0:	37 96       	adiw	r30, 0x07	; 7
     8c2:	f5 95       	asr	r31
     8c4:	e7 95       	ror	r30
     8c6:	f5 95       	asr	r31
     8c8:	e7 95       	ror	r30
     8ca:	f5 95       	asr	r31
     8cc:	e7 95       	ror	r30
     8ce:	f6 95       	lsr	r31
     8d0:	fe 2f       	mov	r31, r30
     8d2:	ee 27       	eor	r30, r30
     8d4:	f7 95       	ror	r31
     8d6:	e7 95       	ror	r30
     8d8:	ec 58       	subi	r30, 0x8C	; 140
     8da:	fc 4f       	sbci	r31, 0xFC	; 252
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	ca 01       	movw	r24, r20
     8e2:	02 2e       	mov	r0, r18
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__vector_4+0x1ba>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	0a 94       	dec	r0
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__vector_4+0x1b6>
     8ee:	80 78       	andi	r24, 0x80	; 128
     8f0:	99 27       	eor	r25, r25
     8f2:	06 2e       	mov	r0, r22
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__vector_4+0x1ca>
     8f6:	95 95       	asr	r25
     8f8:	87 95       	ror	r24
     8fa:	0a 94       	dec	r0
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <__vector_4+0x1c6>
     8fe:	90 81       	ld	r25, Z
     900:	89 2b       	or	r24, r25
     902:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     904:	2f 5f       	subi	r18, 0xFF	; 255
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	28 30       	cpi	r18, 0x08	; 8
     90a:	31 05       	cpc	r19, r1
     90c:	49 f7       	brne	.-46     	; 0x8e0 <__vector_4+0x1b0>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     90e:	11 96       	adiw	r26, 0x01	; 1
     910:	a8 30       	cpi	r26, 0x08	; 8
     912:	b1 05       	cpc	r27, r1
     914:	21 f6       	brne	.-120    	; 0x89e <__vector_4+0x16e>
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,one);
		//SMCR|=0b00000000;
		
	}
	if(PINA==0b00010000)
     916:	80 b1       	in	r24, 0x00	; 0
     918:	80 31       	cpi	r24, 0x10	; 16
     91a:	09 f0       	breq	.+2      	; 0x91e <__vector_4+0x1ee>
     91c:	9c c1       	rjmp	.+824    	; 0xc56 <__vector_4+0x526>
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	c9 01       	movw	r24, r18
     924:	33 23       	and	r19, r19
     926:	0c f4       	brge	.+2      	; 0x92a <__vector_4+0x1fa>
     928:	07 96       	adiw	r24, 0x07	; 7
     92a:	95 95       	asr	r25
     92c:	87 95       	ror	r24
     92e:	95 95       	asr	r25
     930:	87 95       	ror	r24
     932:	95 95       	asr	r25
     934:	87 95       	ror	r24
     936:	96 95       	lsr	r25
     938:	98 2f       	mov	r25, r24
     93a:	88 27       	eor	r24, r24
     93c:	97 95       	ror	r25
     93e:	87 95       	ror	r24
     940:	fc 01       	movw	r30, r24
     942:	ec 58       	subi	r30, 0x8C	; 140
     944:	fc 4f       	sbci	r31, 0xFC	; 252
     946:	84 58       	subi	r24, 0x84	; 132
     948:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     94a:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     94c:	e8 17       	cp	r30, r24
     94e:	f9 07       	cpc	r31, r25
     950:	e1 f7       	brne	.-8      	; 0x94a <__vector_4+0x21a>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     952:	2f 5f       	subi	r18, 0xFF	; 255
     954:	3f 4f       	sbci	r19, 0xFF	; 255
     956:	28 30       	cpi	r18, 0x08	; 8
     958:	31 05       	cpc	r19, r1
     95a:	19 f7       	brne	.-58     	; 0x922 <__vector_4+0x1f2>
     95c:	ca e5       	ldi	r28, 0x5A	; 90
     95e:	d3 e0       	ldi	r29, 0x03	; 3
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     964:	07 e0       	ldi	r16, 0x07	; 7
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	49 91       	ld	r20, Y+
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	cd 01       	movw	r24, r26
     96e:	87 70       	andi	r24, 0x07	; 7
     970:	90 78       	andi	r25, 0x80	; 128
     972:	99 23       	and	r25, r25
     974:	24 f4       	brge	.+8      	; 0x97e <__vector_4+0x24e>
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	88 6f       	ori	r24, 0xF8	; 248
     97a:	9f 6f       	ori	r25, 0xFF	; 255
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	b8 01       	movw	r22, r16
     980:	68 1b       	sub	r22, r24
     982:	79 0b       	sbc	r23, r25
     984:	fd 01       	movw	r30, r26
     986:	bb 23       	and	r27, r27
     988:	0c f4       	brge	.+2      	; 0x98c <__vector_4+0x25c>
     98a:	37 96       	adiw	r30, 0x07	; 7
     98c:	f5 95       	asr	r31
     98e:	e7 95       	ror	r30
     990:	f5 95       	asr	r31
     992:	e7 95       	ror	r30
     994:	f5 95       	asr	r31
     996:	e7 95       	ror	r30
     998:	f6 95       	lsr	r31
     99a:	fe 2f       	mov	r31, r30
     99c:	ee 27       	eor	r30, r30
     99e:	f7 95       	ror	r31
     9a0:	e7 95       	ror	r30
     9a2:	ec 58       	subi	r30, 0x8C	; 140
     9a4:	fc 4f       	sbci	r31, 0xFC	; 252
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	ca 01       	movw	r24, r20
     9ac:	02 2e       	mov	r0, r18
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__vector_4+0x284>
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	0a 94       	dec	r0
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <__vector_4+0x280>
     9b8:	80 78       	andi	r24, 0x80	; 128
     9ba:	99 27       	eor	r25, r25
     9bc:	06 2e       	mov	r0, r22
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__vector_4+0x294>
     9c0:	95 95       	asr	r25
     9c2:	87 95       	ror	r24
     9c4:	0a 94       	dec	r0
     9c6:	e2 f7       	brpl	.-8      	; 0x9c0 <__vector_4+0x290>
     9c8:	90 81       	ld	r25, Z
     9ca:	89 2b       	or	r24, r25
     9cc:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     9ce:	2f 5f       	subi	r18, 0xFF	; 255
     9d0:	3f 4f       	sbci	r19, 0xFF	; 255
     9d2:	28 30       	cpi	r18, 0x08	; 8
     9d4:	31 05       	cpc	r19, r1
     9d6:	49 f7       	brne	.-46     	; 0x9aa <__vector_4+0x27a>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     9d8:	11 96       	adiw	r26, 0x01	; 1
     9da:	a8 30       	cpi	r26, 0x08	; 8
     9dc:	b1 05       	cpc	r27, r1
     9de:	21 f6       	brne	.-120    	; 0x968 <__vector_4+0x238>
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,two);
		
		//SMCR|=0b00000001;
	}
	if(PINA==0b00100000)
     9e0:	80 b1       	in	r24, 0x00	; 0
     9e2:	80 32       	cpi	r24, 0x20	; 32
     9e4:	09 f0       	breq	.+2      	; 0x9e8 <__vector_4+0x2b8>
     9e6:	3c c1       	rjmp	.+632    	; 0xc60 <__vector_4+0x530>
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	c9 01       	movw	r24, r18
     9ee:	33 23       	and	r19, r19
     9f0:	0c f4       	brge	.+2      	; 0x9f4 <__vector_4+0x2c4>
     9f2:	07 96       	adiw	r24, 0x07	; 7
     9f4:	95 95       	asr	r25
     9f6:	87 95       	ror	r24
     9f8:	95 95       	asr	r25
     9fa:	87 95       	ror	r24
     9fc:	95 95       	asr	r25
     9fe:	87 95       	ror	r24
     a00:	96 95       	lsr	r25
     a02:	98 2f       	mov	r25, r24
     a04:	88 27       	eor	r24, r24
     a06:	97 95       	ror	r25
     a08:	87 95       	ror	r24
     a0a:	fc 01       	movw	r30, r24
     a0c:	ec 58       	subi	r30, 0x8C	; 140
     a0e:	fc 4f       	sbci	r31, 0xFC	; 252
     a10:	84 58       	subi	r24, 0x84	; 132
     a12:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     a14:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     a16:	8e 17       	cp	r24, r30
     a18:	9f 07       	cpc	r25, r31
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <__vector_4+0x2e4>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     a1c:	2f 5f       	subi	r18, 0xFF	; 255
     a1e:	3f 4f       	sbci	r19, 0xFF	; 255
     a20:	28 30       	cpi	r18, 0x08	; 8
     a22:	31 05       	cpc	r19, r1
     a24:	19 f7       	brne	.-58     	; 0x9ec <__vector_4+0x2bc>
     a26:	c2 e5       	ldi	r28, 0x52	; 82
     a28:	d3 e0       	ldi	r29, 0x03	; 3
     a2a:	a0 e0       	ldi	r26, 0x00	; 0
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     a2e:	07 e0       	ldi	r16, 0x07	; 7
     a30:	10 e0       	ldi	r17, 0x00	; 0
     a32:	49 91       	ld	r20, Y+
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	cd 01       	movw	r24, r26
     a38:	87 70       	andi	r24, 0x07	; 7
     a3a:	90 78       	andi	r25, 0x80	; 128
     a3c:	99 23       	and	r25, r25
     a3e:	24 f4       	brge	.+8      	; 0xa48 <__vector_4+0x318>
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	88 6f       	ori	r24, 0xF8	; 248
     a44:	9f 6f       	ori	r25, 0xFF	; 255
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	b8 01       	movw	r22, r16
     a4a:	68 1b       	sub	r22, r24
     a4c:	79 0b       	sbc	r23, r25
     a4e:	fd 01       	movw	r30, r26
     a50:	bb 23       	and	r27, r27
     a52:	0c f4       	brge	.+2      	; 0xa56 <__vector_4+0x326>
     a54:	37 96       	adiw	r30, 0x07	; 7
     a56:	f5 95       	asr	r31
     a58:	e7 95       	ror	r30
     a5a:	f5 95       	asr	r31
     a5c:	e7 95       	ror	r30
     a5e:	f5 95       	asr	r31
     a60:	e7 95       	ror	r30
     a62:	f6 95       	lsr	r31
     a64:	fe 2f       	mov	r31, r30
     a66:	ee 27       	eor	r30, r30
     a68:	f7 95       	ror	r31
     a6a:	e7 95       	ror	r30
     a6c:	ec 58       	subi	r30, 0x8C	; 140
     a6e:	fc 4f       	sbci	r31, 0xFC	; 252
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	ca 01       	movw	r24, r20
     a76:	02 2e       	mov	r0, r18
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <__vector_4+0x34e>
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	0a 94       	dec	r0
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <__vector_4+0x34a>
     a82:	80 78       	andi	r24, 0x80	; 128
     a84:	99 27       	eor	r25, r25
     a86:	06 2e       	mov	r0, r22
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <__vector_4+0x35e>
     a8a:	95 95       	asr	r25
     a8c:	87 95       	ror	r24
     a8e:	0a 94       	dec	r0
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <__vector_4+0x35a>
     a92:	90 81       	ld	r25, Z
     a94:	89 2b       	or	r24, r25
     a96:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     a98:	2f 5f       	subi	r18, 0xFF	; 255
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	28 30       	cpi	r18, 0x08	; 8
     a9e:	31 05       	cpc	r19, r1
     aa0:	49 f7       	brne	.-46     	; 0xa74 <__vector_4+0x344>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     aa2:	11 96       	adiw	r26, 0x01	; 1
     aa4:	a8 30       	cpi	r26, 0x08	; 8
     aa6:	b1 05       	cpc	r27, r1
     aa8:	21 f6       	brne	.-120    	; 0xa32 <__vector_4+0x302>
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,three);
		
		//SMCR|=0b00000001;
	}
		if(PINA==0b00011000)
     aaa:	80 b1       	in	r24, 0x00	; 0
     aac:	88 31       	cpi	r24, 0x18	; 24
     aae:	09 f0       	breq	.+2      	; 0xab2 <__vector_4+0x382>
     ab0:	dc c0       	rjmp	.+440    	; 0xc6a <__vector_4+0x53a>
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	c9 01       	movw	r24, r18
     ab8:	33 23       	and	r19, r19
     aba:	0c f4       	brge	.+2      	; 0xabe <__vector_4+0x38e>
     abc:	07 96       	adiw	r24, 0x07	; 7
     abe:	95 95       	asr	r25
     ac0:	87 95       	ror	r24
     ac2:	95 95       	asr	r25
     ac4:	87 95       	ror	r24
     ac6:	95 95       	asr	r25
     ac8:	87 95       	ror	r24
     aca:	96 95       	lsr	r25
     acc:	98 2f       	mov	r25, r24
     ace:	88 27       	eor	r24, r24
     ad0:	97 95       	ror	r25
     ad2:	87 95       	ror	r24
     ad4:	fc 01       	movw	r30, r24
     ad6:	ec 58       	subi	r30, 0x8C	; 140
     ad8:	fc 4f       	sbci	r31, 0xFC	; 252
     ada:	84 58       	subi	r24, 0x84	; 132
     adc:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     ade:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     ae0:	e8 17       	cp	r30, r24
     ae2:	f9 07       	cpc	r31, r25
     ae4:	e1 f7       	brne	.-8      	; 0xade <__vector_4+0x3ae>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     ae6:	2f 5f       	subi	r18, 0xFF	; 255
     ae8:	3f 4f       	sbci	r19, 0xFF	; 255
     aea:	28 30       	cpi	r18, 0x08	; 8
     aec:	31 05       	cpc	r19, r1
     aee:	19 f7       	brne	.-58     	; 0xab6 <__vector_4+0x386>
     af0:	ca e4       	ldi	r28, 0x4A	; 74
     af2:	d3 e0       	ldi	r29, 0x03	; 3
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     af8:	07 e0       	ldi	r16, 0x07	; 7
     afa:	10 e0       	ldi	r17, 0x00	; 0
     afc:	49 91       	ld	r20, Y+
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	cd 01       	movw	r24, r26
     b02:	87 70       	andi	r24, 0x07	; 7
     b04:	90 78       	andi	r25, 0x80	; 128
     b06:	99 23       	and	r25, r25
     b08:	24 f4       	brge	.+8      	; 0xb12 <__vector_4+0x3e2>
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	88 6f       	ori	r24, 0xF8	; 248
     b0e:	9f 6f       	ori	r25, 0xFF	; 255
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	b8 01       	movw	r22, r16
     b14:	68 1b       	sub	r22, r24
     b16:	79 0b       	sbc	r23, r25
     b18:	fd 01       	movw	r30, r26
     b1a:	bb 23       	and	r27, r27
     b1c:	0c f4       	brge	.+2      	; 0xb20 <__vector_4+0x3f0>
     b1e:	37 96       	adiw	r30, 0x07	; 7
     b20:	f5 95       	asr	r31
     b22:	e7 95       	ror	r30
     b24:	f5 95       	asr	r31
     b26:	e7 95       	ror	r30
     b28:	f5 95       	asr	r31
     b2a:	e7 95       	ror	r30
     b2c:	f6 95       	lsr	r31
     b2e:	fe 2f       	mov	r31, r30
     b30:	ee 27       	eor	r30, r30
     b32:	f7 95       	ror	r31
     b34:	e7 95       	ror	r30
     b36:	ec 58       	subi	r30, 0x8C	; 140
     b38:	fc 4f       	sbci	r31, 0xFC	; 252
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	ca 01       	movw	r24, r20
     b40:	02 2e       	mov	r0, r18
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <__vector_4+0x418>
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	0a 94       	dec	r0
     b4a:	e2 f7       	brpl	.-8      	; 0xb44 <__vector_4+0x414>
     b4c:	80 78       	andi	r24, 0x80	; 128
     b4e:	99 27       	eor	r25, r25
     b50:	06 2e       	mov	r0, r22
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <__vector_4+0x428>
     b54:	95 95       	asr	r25
     b56:	87 95       	ror	r24
     b58:	0a 94       	dec	r0
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <__vector_4+0x424>
     b5c:	90 81       	ld	r25, Z
     b5e:	89 2b       	or	r24, r25
     b60:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     b62:	2f 5f       	subi	r18, 0xFF	; 255
     b64:	3f 4f       	sbci	r19, 0xFF	; 255
     b66:	28 30       	cpi	r18, 0x08	; 8
     b68:	31 05       	cpc	r19, r1
     b6a:	49 f7       	brne	.-46     	; 0xb3e <__vector_4+0x40e>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     b6c:	11 96       	adiw	r26, 0x01	; 1
     b6e:	a8 30       	cpi	r26, 0x08	; 8
     b70:	b1 05       	cpc	r27, r1
     b72:	21 f6       	brne	.-120    	; 0xafc <__vector_4+0x3cc>
		if(PINA==0b00011000)
		{
			oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,four);	
		}
		if(PINA==0b00100100)
     b74:	80 b1       	in	r24, 0x00	; 0
     b76:	84 32       	cpi	r24, 0x24	; 36
     b78:	09 f0       	breq	.+2      	; 0xb7c <__vector_4+0x44c>
     b7a:	61 c0       	rjmp	.+194    	; 0xc3e <__vector_4+0x50e>
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	c9 01       	movw	r24, r18
     b82:	33 23       	and	r19, r19
     b84:	0c f4       	brge	.+2      	; 0xb88 <__vector_4+0x458>
     b86:	07 96       	adiw	r24, 0x07	; 7
     b88:	95 95       	asr	r25
     b8a:	87 95       	ror	r24
     b8c:	95 95       	asr	r25
     b8e:	87 95       	ror	r24
     b90:	95 95       	asr	r25
     b92:	87 95       	ror	r24
     b94:	96 95       	lsr	r25
     b96:	98 2f       	mov	r25, r24
     b98:	88 27       	eor	r24, r24
     b9a:	97 95       	ror	r25
     b9c:	87 95       	ror	r24
     b9e:	fc 01       	movw	r30, r24
     ba0:	ec 58       	subi	r30, 0x8C	; 140
     ba2:	fc 4f       	sbci	r31, 0xFC	; 252
     ba4:	84 58       	subi	r24, 0x84	; 132
     ba6:	9c 4f       	sbci	r25, 0xFC	; 252
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
			{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]=0b00000000;
     ba8:	11 92       	st	Z+, r1
	for(int j=0;j<height;j++)
	{
		
		for(int i=0;i<width;i++)
		{
			for(int k=0;k<8;k++)
     baa:	8e 17       	cp	r24, r30
     bac:	9f 07       	cpc	r25, r31
     bae:	e1 f7       	brne	.-8      	; 0xba8 <__vector_4+0x478>
}


void OLED_Clear_Bufer_part(int x,int y,int width,int height)
{
	for(int j=0;j<height;j++)
     bb0:	2f 5f       	subi	r18, 0xFF	; 255
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
     bb4:	28 30       	cpi	r18, 0x08	; 8
     bb6:	31 05       	cpc	r19, r1
     bb8:	19 f7       	brne	.-58     	; 0xb80 <__vector_4+0x450>
     bba:	c2 e4       	ldi	r28, 0x42	; 66
     bbc:	d3 e0       	ldi	r29, 0x03	; 3
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     bc2:	07 e0       	ldi	r16, 0x07	; 7
     bc4:	10 e0       	ldi	r17, 0x00	; 0
     bc6:	49 91       	ld	r20, Y+
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	cd 01       	movw	r24, r26
     bcc:	87 70       	andi	r24, 0x07	; 7
     bce:	90 78       	andi	r25, 0x80	; 128
     bd0:	99 23       	and	r25, r25
     bd2:	24 f4       	brge	.+8      	; 0xbdc <__vector_4+0x4ac>
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	88 6f       	ori	r24, 0xF8	; 248
     bd8:	9f 6f       	ori	r25, 0xFF	; 255
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	b8 01       	movw	r22, r16
     bde:	68 1b       	sub	r22, r24
     be0:	79 0b       	sbc	r23, r25
     be2:	fd 01       	movw	r30, r26
     be4:	bb 23       	and	r27, r27
     be6:	0c f4       	brge	.+2      	; 0xbea <__vector_4+0x4ba>
     be8:	37 96       	adiw	r30, 0x07	; 7
     bea:	f5 95       	asr	r31
     bec:	e7 95       	ror	r30
     bee:	f5 95       	asr	r31
     bf0:	e7 95       	ror	r30
     bf2:	f5 95       	asr	r31
     bf4:	e7 95       	ror	r30
     bf6:	f6 95       	lsr	r31
     bf8:	fe 2f       	mov	r31, r30
     bfa:	ee 27       	eor	r30, r30
     bfc:	f7 95       	ror	r31
     bfe:	e7 95       	ror	r30
     c00:	ec 58       	subi	r30, 0x8C	; 140
     c02:	fc 4f       	sbci	r31, 0xFC	; 252
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	ca 01       	movw	r24, r20
     c0a:	02 2e       	mov	r0, r18
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <__vector_4+0x4e2>
     c0e:	88 0f       	add	r24, r24
     c10:	99 1f       	adc	r25, r25
     c12:	0a 94       	dec	r0
     c14:	e2 f7       	brpl	.-8      	; 0xc0e <__vector_4+0x4de>
     c16:	80 78       	andi	r24, 0x80	; 128
     c18:	99 27       	eor	r25, r25
     c1a:	06 2e       	mov	r0, r22
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <__vector_4+0x4f2>
     c1e:	95 95       	asr	r25
     c20:	87 95       	ror	r24
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <__vector_4+0x4ee>
     c26:	90 81       	ld	r25, Z
     c28:	89 2b       	or	r24, r25
     c2a:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     c2c:	2f 5f       	subi	r18, 0xFF	; 255
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	28 30       	cpi	r18, 0x08	; 8
     c32:	31 05       	cpc	r19, r1
     c34:	49 f7       	brne	.-46     	; 0xc08 <__vector_4+0x4d8>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     c36:	11 96       	adiw	r26, 0x01	; 1
     c38:	a8 30       	cpi	r26, 0x08	; 8
     c3a:	b1 05       	cpc	r27, r1
     c3c:	21 f6       	brne	.-120    	; 0xbc6 <__vector_4+0x496>
		if(PINA==0b00100100)
		{
			oled.OLED_Clear_Bufer_part(0,0,1,8);
			oled.OLED_Write_To_Bufer(0,0,1,8,five);
		}
	sei();
     c3e:	78 94       	sei

}
     c40:	18 c0       	rjmp	.+48     	; 0xc72 <__vector_4+0x542>
	{
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,zero);
		//SMCR|=0b00000000;
	}
	if(PINA==0b00001000)
     c42:	80 b1       	in	r24, 0x00	; 0
     c44:	88 30       	cpi	r24, 0x08	; 8
     c46:	09 f0       	breq	.+2      	; 0xc4a <__vector_4+0x51a>
     c48:	66 ce       	rjmp	.-820    	; 0x916 <__vector_4+0x1e6>
     c4a:	04 ce       	rjmp	.-1016   	; 0x854 <__vector_4+0x124>
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,one);
		//SMCR|=0b00000000;
		
	}
	if(PINA==0b00010000)
     c4c:	80 b1       	in	r24, 0x00	; 0
     c4e:	80 31       	cpi	r24, 0x10	; 16
     c50:	09 f0       	breq	.+2      	; 0xc54 <__vector_4+0x524>
     c52:	c6 ce       	rjmp	.-628    	; 0x9e0 <__vector_4+0x2b0>
     c54:	64 ce       	rjmp	.-824    	; 0x91e <__vector_4+0x1ee>
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,two);
		
		//SMCR|=0b00000001;
	}
	if(PINA==0b00100000)
     c56:	80 b1       	in	r24, 0x00	; 0
     c58:	80 32       	cpi	r24, 0x20	; 32
     c5a:	09 f0       	breq	.+2      	; 0xc5e <__vector_4+0x52e>
     c5c:	26 cf       	rjmp	.-436    	; 0xaaa <__vector_4+0x37a>
     c5e:	c4 ce       	rjmp	.-632    	; 0x9e8 <__vector_4+0x2b8>
		oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,three);
		
		//SMCR|=0b00000001;
	}
		if(PINA==0b00011000)
     c60:	80 b1       	in	r24, 0x00	; 0
     c62:	88 31       	cpi	r24, 0x18	; 24
     c64:	09 f0       	breq	.+2      	; 0xc68 <__vector_4+0x538>
     c66:	86 cf       	rjmp	.-244    	; 0xb74 <__vector_4+0x444>
     c68:	24 cf       	rjmp	.-440    	; 0xab2 <__vector_4+0x382>
		{
			oled.OLED_Clear_Bufer_part(0,0,1,8);
		oled.OLED_Write_To_Bufer(0,0,1,8,four);	
		}
		if(PINA==0b00100100)
     c6a:	80 b1       	in	r24, 0x00	; 0
     c6c:	84 32       	cpi	r24, 0x24	; 36
     c6e:	39 f7       	brne	.-50     	; 0xc3e <__vector_4+0x50e>
     c70:	85 cf       	rjmp	.-246    	; 0xb7c <__vector_4+0x44c>
			oled.OLED_Clear_Bufer_part(0,0,1,8);
			oled.OLED_Write_To_Bufer(0,0,1,8,five);
		}
	sei();

}
     c72:	ff 91       	pop	r31
     c74:	ef 91       	pop	r30
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	bf 91       	pop	r27
     c7c:	af 91       	pop	r26
     c7e:	9f 91       	pop	r25
     c80:	8f 91       	pop	r24
     c82:	7f 91       	pop	r23
     c84:	6f 91       	pop	r22
     c86:	5f 91       	pop	r21
     c88:	4f 91       	pop	r20
     c8a:	3f 91       	pop	r19
     c8c:	2f 91       	pop	r18
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	0f 90       	pop	r0
     c94:	0b be       	out	0x3b, r0	; 59
     c96:	0f 90       	pop	r0
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	0f 90       	pop	r0
     c9c:	1f 90       	pop	r1
     c9e:	18 95       	reti

00000ca0 <_ZN6Batary19printlvltoOLEDbuferEv>:
	if((PINB>>2)&0b00000001==1) kf++;
	if((PINB>>3)&0b00000001==1) kf++;
	curlvl=kf;
}

void printlvltoOLEDbufer()
     ca0:	8f 92       	push	r8
     ca2:	9f 92       	push	r9
     ca4:	af 92       	push	r10
     ca6:	bf 92       	push	r11
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	4c 01       	movw	r8, r24
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <_ZN6Batary19printlvltoOLEDbuferEv+0x26>
     cc4:	de c1       	rjmp	.+956    	; 0x1082 <_ZN6Batary19printlvltoOLEDbuferEv+0x3e2>
     cc6:	0f 2e       	mov	r0, r31
     cc8:	f0 e9       	ldi	r31, 0x90	; 144
     cca:	af 2e       	mov	r10, r31
     ccc:	f1 e0       	ldi	r31, 0x01	; 1
     cce:	bf 2e       	mov	r11, r31
     cd0:	f0 2d       	mov	r31, r0
     cd2:	e1 2c       	mov	r14, r1
     cd4:	f1 2c       	mov	r15, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     cd6:	0f 2e       	mov	r0, r31
     cd8:	f7 e0       	ldi	r31, 0x07	; 7
     cda:	cf 2e       	mov	r12, r31
     cdc:	d1 2c       	mov	r13, r1
     cde:	f0 2d       	mov	r31, r0
     ce0:	c7 01       	movw	r24, r14
     ce2:	87 70       	andi	r24, 0x07	; 7
     ce4:	90 78       	andi	r25, 0x80	; 128
     ce6:	99 23       	and	r25, r25
     ce8:	24 f4       	brge	.+8      	; 0xcf2 <_ZN6Batary19printlvltoOLEDbuferEv+0x52>
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	88 6f       	ori	r24, 0xF8	; 248
     cee:	9f 6f       	ori	r25, 0xFF	; 255
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	b6 01       	movw	r22, r12
     cf4:	68 1b       	sub	r22, r24
     cf6:	79 0b       	sbc	r23, r25
     cf8:	87 01       	movw	r16, r14
     cfa:	ff 20       	and	r15, r15
     cfc:	14 f4       	brge	.+4      	; 0xd02 <_ZN6Batary19printlvltoOLEDbuferEv+0x62>
     cfe:	09 5f       	subi	r16, 0xF9	; 249
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	15 95       	asr	r17
     d04:	07 95       	ror	r16
     d06:	15 95       	asr	r17
     d08:	07 95       	ror	r16
     d0a:	15 95       	asr	r17
     d0c:	07 95       	ror	r16
     d0e:	16 95       	lsr	r17
     d10:	10 2f       	mov	r17, r16
     d12:	00 27       	eor	r16, r16
     d14:	17 95       	ror	r17
     d16:	07 95       	ror	r16
     d18:	d8 01       	movw	r26, r16
     d1a:	ac 52       	subi	r26, 0x2C	; 44
     d1c:	bc 4f       	sbci	r27, 0xFC	; 252
     d1e:	0c 50       	subi	r16, 0x0C	; 12
     d20:	1c 4f       	sbci	r17, 0xFC	; 252
     d22:	e5 01       	movw	r28, r10
     d24:	49 91       	ld	r20, Y+
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	fd 01       	movw	r30, r26
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	ca 01       	movw	r24, r20
     d30:	02 2e       	mov	r0, r18
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <_ZN6Batary19printlvltoOLEDbuferEv+0x98>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <_ZN6Batary19printlvltoOLEDbuferEv+0x94>
     d3c:	80 78       	andi	r24, 0x80	; 128
     d3e:	99 27       	eor	r25, r25
     d40:	06 2e       	mov	r0, r22
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <_ZN6Batary19printlvltoOLEDbuferEv+0xa8>
     d44:	95 95       	asr	r25
     d46:	87 95       	ror	r24
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <_ZN6Batary19printlvltoOLEDbuferEv+0xa4>
     d4c:	90 81       	ld	r25, Z
     d4e:	89 2b       	or	r24, r25
     d50:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     d52:	2f 5f       	subi	r18, 0xFF	; 255
     d54:	3f 4f       	sbci	r19, 0xFF	; 255
     d56:	28 30       	cpi	r18, 0x08	; 8
     d58:	31 05       	cpc	r19, r1
     d5a:	49 f7       	brne	.-46     	; 0xd2e <_ZN6Batary19printlvltoOLEDbuferEv+0x8e>
     d5c:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     d5e:	a0 17       	cp	r26, r16
     d60:	b1 07       	cpc	r27, r17
     d62:	01 f7       	brne	.-64     	; 0xd24 <_ZN6Batary19printlvltoOLEDbuferEv+0x84>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     d64:	ff ef       	ldi	r31, 0xFF	; 255
     d66:	ef 1a       	sub	r14, r31
     d68:	ff 0a       	sbc	r15, r31
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	a8 0e       	add	r10, r24
     d6e:	b1 1c       	adc	r11, r1
     d70:	e8 e0       	ldi	r30, 0x08	; 8
     d72:	ee 16       	cp	r14, r30
     d74:	f1 04       	cpc	r15, r1
     d76:	09 f0       	breq	.+2      	; 0xd7a <_ZN6Batary19printlvltoOLEDbuferEv+0xda>
     d78:	b3 cf       	rjmp	.-154    	; 0xce0 <_ZN6Batary19printlvltoOLEDbuferEv+0x40>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
     d7a:	f4 01       	movw	r30, r8
     d7c:	80 81       	ld	r24, Z
     d7e:	91 81       	ldd	r25, Z+1	; 0x01
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	91 05       	cpc	r25, r1
     d84:	09 f0       	breq	.+2      	; 0xd88 <_ZN6Batary19printlvltoOLEDbuferEv+0xe8>
     d86:	81 c1       	rjmp	.+770    	; 0x108a <_ZN6Batary19printlvltoOLEDbuferEv+0x3ea>
     d88:	0f 2e       	mov	r0, r31
     d8a:	f0 e7       	ldi	r31, 0x70	; 112
     d8c:	af 2e       	mov	r10, r31
     d8e:	f1 e0       	ldi	r31, 0x01	; 1
     d90:	bf 2e       	mov	r11, r31
     d92:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     d94:	e1 2c       	mov	r14, r1
     d96:	f1 2c       	mov	r15, r1
     d98:	0f 2e       	mov	r0, r31
     d9a:	f7 e0       	ldi	r31, 0x07	; 7
     d9c:	cf 2e       	mov	r12, r31
     d9e:	d1 2c       	mov	r13, r1
     da0:	f0 2d       	mov	r31, r0
     da2:	c7 01       	movw	r24, r14
     da4:	87 70       	andi	r24, 0x07	; 7
     da6:	90 78       	andi	r25, 0x80	; 128
     da8:	99 23       	and	r25, r25
     daa:	24 f4       	brge	.+8      	; 0xdb4 <_ZN6Batary19printlvltoOLEDbuferEv+0x114>
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	88 6f       	ori	r24, 0xF8	; 248
     db0:	9f 6f       	ori	r25, 0xFF	; 255
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	b6 01       	movw	r22, r12
     db6:	68 1b       	sub	r22, r24
     db8:	79 0b       	sbc	r23, r25
     dba:	87 01       	movw	r16, r14
     dbc:	ff 20       	and	r15, r15
     dbe:	14 f4       	brge	.+4      	; 0xdc4 <_ZN6Batary19printlvltoOLEDbuferEv+0x124>
     dc0:	09 5f       	subi	r16, 0xF9	; 249
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	15 95       	asr	r17
     dc6:	07 95       	ror	r16
     dc8:	15 95       	asr	r17
     dca:	07 95       	ror	r16
     dcc:	15 95       	asr	r17
     dce:	07 95       	ror	r16
     dd0:	16 95       	lsr	r17
     dd2:	10 2f       	mov	r17, r16
     dd4:	00 27       	eor	r16, r16
     dd6:	17 95       	ror	r17
     dd8:	07 95       	ror	r16
     dda:	d8 01       	movw	r26, r16
     ddc:	ac 52       	subi	r26, 0x2C	; 44
     dde:	bc 4f       	sbci	r27, 0xFC	; 252
     de0:	0c 50       	subi	r16, 0x0C	; 12
     de2:	1c 4f       	sbci	r17, 0xFC	; 252
     de4:	e5 01       	movw	r28, r10
     de6:	49 91       	ld	r20, Y+
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	fd 01       	movw	r30, r26
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	ca 01       	movw	r24, r20
     df2:	02 2e       	mov	r0, r18
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <_ZN6Batary19printlvltoOLEDbuferEv+0x15a>
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	0a 94       	dec	r0
     dfc:	e2 f7       	brpl	.-8      	; 0xdf6 <_ZN6Batary19printlvltoOLEDbuferEv+0x156>
     dfe:	80 78       	andi	r24, 0x80	; 128
     e00:	99 27       	eor	r25, r25
     e02:	06 2e       	mov	r0, r22
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <_ZN6Batary19printlvltoOLEDbuferEv+0x16a>
     e06:	95 95       	asr	r25
     e08:	87 95       	ror	r24
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <_ZN6Batary19printlvltoOLEDbuferEv+0x166>
     e0e:	90 81       	ld	r25, Z
     e10:	89 2b       	or	r24, r25
     e12:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     e14:	2f 5f       	subi	r18, 0xFF	; 255
     e16:	3f 4f       	sbci	r19, 0xFF	; 255
     e18:	28 30       	cpi	r18, 0x08	; 8
     e1a:	31 05       	cpc	r19, r1
     e1c:	49 f7       	brne	.-46     	; 0xdf0 <_ZN6Batary19printlvltoOLEDbuferEv+0x150>
     e1e:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     e20:	a0 17       	cp	r26, r16
     e22:	b1 07       	cpc	r27, r17
     e24:	01 f7       	brne	.-64     	; 0xde6 <_ZN6Batary19printlvltoOLEDbuferEv+0x146>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     e26:	ff ef       	ldi	r31, 0xFF	; 255
     e28:	ef 1a       	sub	r14, r31
     e2a:	ff 0a       	sbc	r15, r31
     e2c:	84 e0       	ldi	r24, 0x04	; 4
     e2e:	a8 0e       	add	r10, r24
     e30:	b1 1c       	adc	r11, r1
     e32:	e8 e0       	ldi	r30, 0x08	; 8
     e34:	ee 16       	cp	r14, r30
     e36:	f1 04       	cpc	r15, r1
     e38:	09 f0       	breq	.+2      	; 0xe3c <_ZN6Batary19printlvltoOLEDbuferEv+0x19c>
     e3a:	b3 cf       	rjmp	.-154    	; 0xda2 <_ZN6Batary19printlvltoOLEDbuferEv+0x102>

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
     e3c:	f4 01       	movw	r30, r8
     e3e:	80 81       	ld	r24, Z
     e40:	91 81       	ldd	r25, Z+1	; 0x01
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	91 05       	cpc	r25, r1
     e46:	09 f0       	breq	.+2      	; 0xe4a <_ZN6Batary19printlvltoOLEDbuferEv+0x1aa>
     e48:	24 c1       	rjmp	.+584    	; 0x1092 <_ZN6Batary19printlvltoOLEDbuferEv+0x3f2>
     e4a:	0f 2e       	mov	r0, r31
     e4c:	f0 e5       	ldi	r31, 0x50	; 80
     e4e:	af 2e       	mov	r10, r31
     e50:	f1 e0       	ldi	r31, 0x01	; 1
     e52:	bf 2e       	mov	r11, r31
     e54:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     e56:	e1 2c       	mov	r14, r1
     e58:	f1 2c       	mov	r15, r1
     e5a:	0f 2e       	mov	r0, r31
     e5c:	f7 e0       	ldi	r31, 0x07	; 7
     e5e:	cf 2e       	mov	r12, r31
     e60:	d1 2c       	mov	r13, r1
     e62:	f0 2d       	mov	r31, r0
     e64:	c7 01       	movw	r24, r14
     e66:	87 70       	andi	r24, 0x07	; 7
     e68:	90 78       	andi	r25, 0x80	; 128
     e6a:	99 23       	and	r25, r25
     e6c:	24 f4       	brge	.+8      	; 0xe76 <_ZN6Batary19printlvltoOLEDbuferEv+0x1d6>
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	88 6f       	ori	r24, 0xF8	; 248
     e72:	9f 6f       	ori	r25, 0xFF	; 255
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	b6 01       	movw	r22, r12
     e78:	68 1b       	sub	r22, r24
     e7a:	79 0b       	sbc	r23, r25
     e7c:	87 01       	movw	r16, r14
     e7e:	ff 20       	and	r15, r15
     e80:	14 f4       	brge	.+4      	; 0xe86 <_ZN6Batary19printlvltoOLEDbuferEv+0x1e6>
     e82:	09 5f       	subi	r16, 0xF9	; 249
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
     e86:	15 95       	asr	r17
     e88:	07 95       	ror	r16
     e8a:	15 95       	asr	r17
     e8c:	07 95       	ror	r16
     e8e:	15 95       	asr	r17
     e90:	07 95       	ror	r16
     e92:	16 95       	lsr	r17
     e94:	10 2f       	mov	r17, r16
     e96:	00 27       	eor	r16, r16
     e98:	17 95       	ror	r17
     e9a:	07 95       	ror	r16
     e9c:	d8 01       	movw	r26, r16
     e9e:	ac 52       	subi	r26, 0x2C	; 44
     ea0:	bc 4f       	sbci	r27, 0xFC	; 252
     ea2:	0c 50       	subi	r16, 0x0C	; 12
     ea4:	1c 4f       	sbci	r17, 0xFC	; 252
     ea6:	e5 01       	movw	r28, r10
     ea8:	49 91       	ld	r20, Y+
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	fd 01       	movw	r30, r26
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	ca 01       	movw	r24, r20
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <_ZN6Batary19printlvltoOLEDbuferEv+0x21c>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <_ZN6Batary19printlvltoOLEDbuferEv+0x218>
     ec0:	80 78       	andi	r24, 0x80	; 128
     ec2:	99 27       	eor	r25, r25
     ec4:	06 2e       	mov	r0, r22
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <_ZN6Batary19printlvltoOLEDbuferEv+0x22c>
     ec8:	95 95       	asr	r25
     eca:	87 95       	ror	r24
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <_ZN6Batary19printlvltoOLEDbuferEv+0x228>
     ed0:	90 81       	ld	r25, Z
     ed2:	89 2b       	or	r24, r25
     ed4:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     ed6:	2f 5f       	subi	r18, 0xFF	; 255
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	28 30       	cpi	r18, 0x08	; 8
     edc:	31 05       	cpc	r19, r1
     ede:	49 f7       	brne	.-46     	; 0xeb2 <_ZN6Batary19printlvltoOLEDbuferEv+0x212>
     ee0:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     ee2:	a0 17       	cp	r26, r16
     ee4:	b1 07       	cpc	r27, r17
     ee6:	01 f7       	brne	.-64     	; 0xea8 <_ZN6Batary19printlvltoOLEDbuferEv+0x208>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     ee8:	ff ef       	ldi	r31, 0xFF	; 255
     eea:	ef 1a       	sub	r14, r31
     eec:	ff 0a       	sbc	r15, r31
     eee:	84 e0       	ldi	r24, 0x04	; 4
     ef0:	a8 0e       	add	r10, r24
     ef2:	b1 1c       	adc	r11, r1
     ef4:	e8 e0       	ldi	r30, 0x08	; 8
     ef6:	ee 16       	cp	r14, r30
     ef8:	f1 04       	cpc	r15, r1
     efa:	09 f0       	breq	.+2      	; 0xefe <_ZN6Batary19printlvltoOLEDbuferEv+0x25e>
     efc:	b3 cf       	rjmp	.-154    	; 0xe64 <_ZN6Batary19printlvltoOLEDbuferEv+0x1c4>
void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
     efe:	f4 01       	movw	r30, r8
     f00:	80 81       	ld	r24, Z
     f02:	91 81       	ldd	r25, Z+1	; 0x01
     f04:	83 30       	cpi	r24, 0x03	; 3
     f06:	91 05       	cpc	r25, r1
     f08:	09 f0       	breq	.+2      	; 0xf0c <_ZN6Batary19printlvltoOLEDbuferEv+0x26c>
     f0a:	c7 c0       	rjmp	.+398    	; 0x109a <_ZN6Batary19printlvltoOLEDbuferEv+0x3fa>
     f0c:	0f 2e       	mov	r0, r31
     f0e:	f0 e3       	ldi	r31, 0x30	; 48
     f10:	af 2e       	mov	r10, r31
     f12:	f1 e0       	ldi	r31, 0x01	; 1
     f14:	bf 2e       	mov	r11, r31
     f16:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     f18:	e1 2c       	mov	r14, r1
     f1a:	f1 2c       	mov	r15, r1
     f1c:	0f 2e       	mov	r0, r31
     f1e:	f7 e0       	ldi	r31, 0x07	; 7
     f20:	cf 2e       	mov	r12, r31
     f22:	d1 2c       	mov	r13, r1
     f24:	f0 2d       	mov	r31, r0
     f26:	c7 01       	movw	r24, r14
     f28:	87 70       	andi	r24, 0x07	; 7
     f2a:	90 78       	andi	r25, 0x80	; 128
     f2c:	99 23       	and	r25, r25
     f2e:	24 f4       	brge	.+8      	; 0xf38 <_ZN6Batary19printlvltoOLEDbuferEv+0x298>
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	88 6f       	ori	r24, 0xF8	; 248
     f34:	9f 6f       	ori	r25, 0xFF	; 255
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	b6 01       	movw	r22, r12
     f3a:	68 1b       	sub	r22, r24
     f3c:	79 0b       	sbc	r23, r25
     f3e:	87 01       	movw	r16, r14
     f40:	ff 20       	and	r15, r15
     f42:	14 f4       	brge	.+4      	; 0xf48 <_ZN6Batary19printlvltoOLEDbuferEv+0x2a8>
     f44:	09 5f       	subi	r16, 0xF9	; 249
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	15 95       	asr	r17
     f4a:	07 95       	ror	r16
     f4c:	15 95       	asr	r17
     f4e:	07 95       	ror	r16
     f50:	15 95       	asr	r17
     f52:	07 95       	ror	r16
     f54:	16 95       	lsr	r17
     f56:	10 2f       	mov	r17, r16
     f58:	00 27       	eor	r16, r16
     f5a:	17 95       	ror	r17
     f5c:	07 95       	ror	r16
     f5e:	d8 01       	movw	r26, r16
     f60:	ac 52       	subi	r26, 0x2C	; 44
     f62:	bc 4f       	sbci	r27, 0xFC	; 252
     f64:	0c 50       	subi	r16, 0x0C	; 12
     f66:	1c 4f       	sbci	r17, 0xFC	; 252
     f68:	e5 01       	movw	r28, r10
     f6a:	49 91       	ld	r20, Y+
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	fd 01       	movw	r30, r26
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	ca 01       	movw	r24, r20
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <_ZN6Batary19printlvltoOLEDbuferEv+0x2de>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <_ZN6Batary19printlvltoOLEDbuferEv+0x2da>
     f82:	80 78       	andi	r24, 0x80	; 128
     f84:	99 27       	eor	r25, r25
     f86:	06 2e       	mov	r0, r22
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <_ZN6Batary19printlvltoOLEDbuferEv+0x2ee>
     f8a:	95 95       	asr	r25
     f8c:	87 95       	ror	r24
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <_ZN6Batary19printlvltoOLEDbuferEv+0x2ea>
     f92:	90 81       	ld	r25, Z
     f94:	89 2b       	or	r24, r25
     f96:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
     f98:	2f 5f       	subi	r18, 0xFF	; 255
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	28 30       	cpi	r18, 0x08	; 8
     f9e:	31 05       	cpc	r19, r1
     fa0:	49 f7       	brne	.-46     	; 0xf74 <_ZN6Batary19printlvltoOLEDbuferEv+0x2d4>
     fa2:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
     fa4:	0a 17       	cp	r16, r26
     fa6:	1b 07       	cpc	r17, r27
     fa8:	01 f7       	brne	.-64     	; 0xf6a <_ZN6Batary19printlvltoOLEDbuferEv+0x2ca>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
     faa:	ff ef       	ldi	r31, 0xFF	; 255
     fac:	ef 1a       	sub	r14, r31
     fae:	ff 0a       	sbc	r15, r31
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	a8 0e       	add	r10, r24
     fb4:	b1 1c       	adc	r11, r1
     fb6:	e8 e0       	ldi	r30, 0x08	; 8
     fb8:	ee 16       	cp	r14, r30
     fba:	f1 04       	cpc	r15, r1
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <_ZN6Batary19printlvltoOLEDbuferEv+0x320>
     fbe:	b3 cf       	rjmp	.-154    	; 0xf26 <_ZN6Batary19printlvltoOLEDbuferEv+0x286>
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
     fc0:	f4 01       	movw	r30, r8
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01
     fc6:	04 97       	sbiw	r24, 0x04	; 4
     fc8:	09 f0       	breq	.+2      	; 0xfcc <_ZN6Batary19printlvltoOLEDbuferEv+0x32c>
     fca:	6a c0       	rjmp	.+212    	; 0x10a0 <_ZN6Batary19printlvltoOLEDbuferEv+0x400>
     fcc:	0f 2e       	mov	r0, r31
     fce:	f0 e1       	ldi	r31, 0x10	; 16
     fd0:	af 2e       	mov	r10, r31
     fd2:	f1 e0       	ldi	r31, 0x01	; 1
     fd4:	bf 2e       	mov	r11, r31
     fd6:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
     fd8:	e1 2c       	mov	r14, r1
     fda:	f1 2c       	mov	r15, r1
     fdc:	0f 2e       	mov	r0, r31
     fde:	f7 e0       	ldi	r31, 0x07	; 7
     fe0:	cf 2e       	mov	r12, r31
     fe2:	d1 2c       	mov	r13, r1
     fe4:	f0 2d       	mov	r31, r0
     fe6:	c7 01       	movw	r24, r14
     fe8:	87 70       	andi	r24, 0x07	; 7
     fea:	90 78       	andi	r25, 0x80	; 128
     fec:	99 23       	and	r25, r25
     fee:	24 f4       	brge	.+8      	; 0xff8 <_ZN6Batary19printlvltoOLEDbuferEv+0x358>
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	88 6f       	ori	r24, 0xF8	; 248
     ff4:	9f 6f       	ori	r25, 0xFF	; 255
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	b6 01       	movw	r22, r12
     ffa:	68 1b       	sub	r22, r24
     ffc:	79 0b       	sbc	r23, r25
     ffe:	87 01       	movw	r16, r14
    1000:	ff 20       	and	r15, r15
    1002:	14 f4       	brge	.+4      	; 0x1008 <_ZN6Batary19printlvltoOLEDbuferEv+0x368>
    1004:	09 5f       	subi	r16, 0xF9	; 249
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	15 95       	asr	r17
    100a:	07 95       	ror	r16
    100c:	15 95       	asr	r17
    100e:	07 95       	ror	r16
    1010:	15 95       	asr	r17
    1012:	07 95       	ror	r16
    1014:	16 95       	lsr	r17
    1016:	10 2f       	mov	r17, r16
    1018:	00 27       	eor	r16, r16
    101a:	17 95       	ror	r17
    101c:	07 95       	ror	r16
    101e:	d8 01       	movw	r26, r16
    1020:	ac 52       	subi	r26, 0x2C	; 44
    1022:	bc 4f       	sbci	r27, 0xFC	; 252
    1024:	0c 50       	subi	r16, 0x0C	; 12
    1026:	1c 4f       	sbci	r17, 0xFC	; 252
    1028:	e5 01       	movw	r28, r10
    102a:	49 91       	ld	r20, Y+
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	fd 01       	movw	r30, r26
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	ca 01       	movw	r24, r20
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <_ZN6Batary19printlvltoOLEDbuferEv+0x39e>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <_ZN6Batary19printlvltoOLEDbuferEv+0x39a>
    1042:	80 78       	andi	r24, 0x80	; 128
    1044:	99 27       	eor	r25, r25
    1046:	06 2e       	mov	r0, r22
    1048:	02 c0       	rjmp	.+4      	; 0x104e <_ZN6Batary19printlvltoOLEDbuferEv+0x3ae>
    104a:	95 95       	asr	r25
    104c:	87 95       	ror	r24
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <_ZN6Batary19printlvltoOLEDbuferEv+0x3aa>
    1052:	90 81       	ld	r25, Z
    1054:	89 2b       	or	r24, r25
    1056:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1058:	2f 5f       	subi	r18, 0xFF	; 255
    105a:	3f 4f       	sbci	r19, 0xFF	; 255
    105c:	28 30       	cpi	r18, 0x08	; 8
    105e:	31 05       	cpc	r19, r1
    1060:	49 f7       	brne	.-46     	; 0x1034 <_ZN6Batary19printlvltoOLEDbuferEv+0x394>
    1062:	18 96       	adiw	r26, 0x08	; 8
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    1064:	a0 17       	cp	r26, r16
    1066:	b1 07       	cpc	r27, r17
    1068:	01 f7       	brne	.-64     	; 0x102a <_ZN6Batary19printlvltoOLEDbuferEv+0x38a>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    106a:	ff ef       	ldi	r31, 0xFF	; 255
    106c:	ef 1a       	sub	r14, r31
    106e:	ff 0a       	sbc	r15, r31
    1070:	84 e0       	ldi	r24, 0x04	; 4
    1072:	a8 0e       	add	r10, r24
    1074:	b1 1c       	adc	r11, r1
    1076:	e8 e0       	ldi	r30, 0x08	; 8
    1078:	ee 16       	cp	r14, r30
    107a:	f1 04       	cpc	r15, r1
    107c:	09 f0       	breq	.+2      	; 0x1080 <_ZN6Batary19printlvltoOLEDbuferEv+0x3e0>
    107e:	b3 cf       	rjmp	.-154    	; 0xfe6 <_ZN6Batary19printlvltoOLEDbuferEv+0x346>
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <_ZN6Batary19printlvltoOLEDbuferEv+0x400>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	09 f0       	breq	.+2      	; 0x1088 <_ZN6Batary19printlvltoOLEDbuferEv+0x3e8>
    1086:	da ce       	rjmp	.-588    	; 0xe3c <_ZN6Batary19printlvltoOLEDbuferEv+0x19c>
    1088:	7f ce       	rjmp	.-770    	; 0xd88 <_ZN6Batary19printlvltoOLEDbuferEv+0xe8>
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
    108a:	02 97       	sbiw	r24, 0x02	; 2
    108c:	09 f0       	breq	.+2      	; 0x1090 <_ZN6Batary19printlvltoOLEDbuferEv+0x3f0>
    108e:	37 cf       	rjmp	.-402    	; 0xefe <_ZN6Batary19printlvltoOLEDbuferEv+0x25e>
    1090:	dc ce       	rjmp	.-584    	; 0xe4a <_ZN6Batary19printlvltoOLEDbuferEv+0x1aa>
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
    1092:	03 97       	sbiw	r24, 0x03	; 3
    1094:	09 f0       	breq	.+2      	; 0x1098 <_ZN6Batary19printlvltoOLEDbuferEv+0x3f8>
    1096:	94 cf       	rjmp	.-216    	; 0xfc0 <_ZN6Batary19printlvltoOLEDbuferEv+0x320>
    1098:	39 cf       	rjmp	.-398    	; 0xf0c <_ZN6Batary19printlvltoOLEDbuferEv+0x26c>
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
    109a:	04 97       	sbiw	r24, 0x04	; 4
    109c:	09 f4       	brne	.+2      	; 0x10a0 <_ZN6Batary19printlvltoOLEDbuferEv+0x400>
    109e:	96 cf       	rjmp	.-212    	; 0xfcc <_ZN6Batary19printlvltoOLEDbuferEv+0x32c>
}
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	cf 90       	pop	r12
    10b0:	bf 90       	pop	r11
    10b2:	af 90       	pop	r10
    10b4:	9f 90       	pop	r9
    10b6:	8f 90       	pop	r8
    10b8:	08 95       	ret

000010ba <main>:
		//OLED oled(wire);
		//oled.OLED_Write_Bufer();
		//_delay_ms(1000);
		//oled.OLED_Write_To_Bufer(0,0,0b11111111);
		
		oled.OLED_Write_To_Bufer(0,2,4,32,gear);
    10ba:	0f 2e       	mov	r0, r31
    10bc:	f0 eb       	ldi	r31, 0xB0	; 176
    10be:	ef 2e       	mov	r14, r31
    10c0:	f2 e0       	ldi	r31, 0x02	; 2
    10c2:	ff 2e       	mov	r15, r31
    10c4:	f0 2d       	mov	r31, r0
    10c6:	00 e2       	ldi	r16, 0x20	; 32
    10c8:	10 e0       	ldi	r17, 0x00	; 0
    10ca:	24 e0       	ldi	r18, 0x04	; 4
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	42 e0       	ldi	r20, 0x02	; 2
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	84 e7       	ldi	r24, 0x74	; 116
    10d8:	93 e0       	ldi	r25, 0x03	; 3
    10da:	7d da       	rcall	.-2822   	; 0x5d6 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.OLED_Write_To_Bufer(33,2,4,32,lock);
    10dc:	0f 2e       	mov	r0, r31
    10de:	f0 e3       	ldi	r31, 0x30	; 48
    10e0:	ef 2e       	mov	r14, r31
    10e2:	f2 e0       	ldi	r31, 0x02	; 2
    10e4:	ff 2e       	mov	r15, r31
    10e6:	f0 2d       	mov	r31, r0
    10e8:	24 e0       	ldi	r18, 0x04	; 4
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	42 e0       	ldi	r20, 0x02	; 2
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	61 e2       	ldi	r22, 0x21	; 33
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	84 e7       	ldi	r24, 0x74	; 116
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	6e da       	rcall	.-2852   	; 0x5d6 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
		oled.OLED_Write_To_Bufer(80,2,4,32,unlock);
    10fa:	0f 2e       	mov	r0, r31
    10fc:	f0 eb       	ldi	r31, 0xB0	; 176
    10fe:	ef 2e       	mov	r14, r31
    1100:	f1 e0       	ldi	r31, 0x01	; 1
    1102:	ff 2e       	mov	r15, r31
    1104:	f0 2d       	mov	r31, r0
    1106:	24 e0       	ldi	r18, 0x04	; 4
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	42 e0       	ldi	r20, 0x02	; 2
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	60 e5       	ldi	r22, 0x50	; 80
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	84 e7       	ldi	r24, 0x74	; 116
    1114:	93 e0       	ldi	r25, 0x03	; 3
    1116:	5f da       	rcall	.-2882   	; 0x5d6 <_ZN4OLED19OLED_Write_To_BuferEiiiiPh>
    1118:	0f 2e       	mov	r0, r31
    111a:	f4 e7       	ldi	r31, 0x74	; 116
    111c:	8f 2e       	mov	r8, r31
    111e:	f7 e0       	ldi	r31, 0x07	; 7
    1120:	9f 2e       	mov	r9, r31
    1122:	f0 2d       	mov	r31, r0
    1124:	e4 e7       	ldi	r30, 0x74	; 116
    1126:	f3 e0       	ldi	r31, 0x03	; 3
}


void OLED_Data(int data)
{
	TWDR=data;							
    1128:	cb eb       	ldi	r28, 0xBB	; 187
    112a:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);				
    112c:	ac eb       	ldi	r26, 0xBC	; 188
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	84 e8       	ldi	r24, 0x84	; 132

void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
			OLED_Data(oled_bufer[i]);
    1132:	91 91       	ld	r25, Z+
}


void OLED_Data(int data)
{
	TWDR=data;							
    1134:	98 83       	st	Y, r25
	TWCR=(1<<TWINT)|(1<<TWEN);				
    1136:	8c 93       	st	X, r24
	while(!(TWCR & (1<<TWINT))){};
    1138:	9c 91       	ld	r25, X
    113a:	99 23       	and	r25, r25
    113c:	ec f7       	brge	.-6      	; 0x1138 <main+0x7e>
}


void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
    113e:	8e 16       	cp	r8, r30
    1140:	9f 06       	cpc	r9, r31
    1142:	b9 f7       	brne	.-18     	; 0x1132 <main+0x78>
		//oled.OLED_Write_Bufer();
		//oled.oled_bufer[1]=0b11111111;
		oled.OLED_Write_Bufer();
		//Interupts

	DDRA = 0x00;
    1144:	11 b8       	out	0x01, r1	; 1
		PORTA=0x00;
    1146:	12 b8       	out	0x02, r1	; 2
		PCMSK0=0b00111100;
    1148:	8c e3       	ldi	r24, 0x3C	; 60
    114a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
		PCICR|=0b00000001;
    114e:	e8 e6       	ldi	r30, 0x68	; 104
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	81 60       	ori	r24, 0x01	; 1
    1156:	80 83       	st	Z, r24
		sei();
    1158:	78 94       	sei
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    115a:	0f 2e       	mov	r0, r31
    115c:	f7 e0       	ldi	r31, 0x07	; 7
    115e:	af 2e       	mov	r10, r31
    1160:	b1 2c       	mov	r11, r1
    1162:	f0 2d       	mov	r31, r0
}


void OLED_Data(int data)
{
	TWDR=data;							
    1164:	0f 2e       	mov	r0, r31
    1166:	fb eb       	ldi	r31, 0xBB	; 187
    1168:	4f 2e       	mov	r4, r31
    116a:	51 2c       	mov	r5, r1
    116c:	f0 2d       	mov	r31, r0
	TWCR=(1<<TWINT)|(1<<TWEN);				
    116e:	0f 2e       	mov	r0, r31
    1170:	fc eb       	ldi	r31, 0xBC	; 188
    1172:	2f 2e       	mov	r2, r31
    1174:	31 2c       	mov	r3, r1
    1176:	f0 2d       	mov	r31, r0
}

void refreshlvl()
{
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
    1178:	83 b1       	in	r24, 0x03	; 3
	printlvltoOLEDbufer();
}

void refreshlvl()
{
	int kf=0;
    117a:	80 fb       	bst	r24, 0
    117c:	66 24       	eor	r6, r6
    117e:	60 f8       	bld	r6, 0
    1180:	71 2c       	mov	r7, r1
    1182:	c3 01       	movw	r24, r6
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
    1184:	19 99       	sbic	0x03, 1	; 3
    1186:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>2)&0b00000001==1) kf++;
    1188:	1a 99       	sbic	0x03, 2	; 3
    118a:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>3)&0b00000001==1) kf++;
    118c:	1b 9b       	sbis	0x03, 3	; 3
    118e:	44 c2       	rjmp	.+1160   	; 0x1618 <main+0x55e>
    1190:	01 96       	adiw	r24, 0x01	; 1
	curlvl=kf;
    1192:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <__data_end+0x1>
    1196:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	09 f0       	breq	.+2      	; 0x11a0 <main+0xe6>
    119e:	44 c2       	rjmp	.+1160   	; 0x1628 <main+0x56e>
    11a0:	0f 2e       	mov	r0, r31
    11a2:	f0 e9       	ldi	r31, 0x90	; 144
    11a4:	cf 2e       	mov	r12, r31
    11a6:	f1 e0       	ldi	r31, 0x01	; 1
    11a8:	df 2e       	mov	r13, r31
    11aa:	f0 2d       	mov	r31, r0
		//_delay_ms(1000);
		//oled.OLED_Write_To_Bufer(0,0,0b11111111);
		
		oled.OLED_Write_To_Bufer(0,2,4,32,gear);
		oled.OLED_Write_To_Bufer(33,2,4,32,lock);
		oled.OLED_Write_To_Bufer(80,2,4,32,unlock);
    11ac:	e1 2c       	mov	r14, r1
    11ae:	f1 2c       	mov	r15, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    11b0:	c7 01       	movw	r24, r14
    11b2:	87 70       	andi	r24, 0x07	; 7
    11b4:	90 78       	andi	r25, 0x80	; 128
    11b6:	99 23       	and	r25, r25
    11b8:	24 f4       	brge	.+8      	; 0x11c2 <main+0x108>
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	88 6f       	ori	r24, 0xF8	; 248
    11be:	9f 6f       	ori	r25, 0xFF	; 255
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	d5 01       	movw	r26, r10
    11c4:	a8 1b       	sub	r26, r24
    11c6:	b9 0b       	sbc	r27, r25
    11c8:	87 01       	movw	r16, r14
    11ca:	ff 20       	and	r15, r15
    11cc:	14 f4       	brge	.+4      	; 0x11d2 <main+0x118>
    11ce:	09 5f       	subi	r16, 0xF9	; 249
    11d0:	1f 4f       	sbci	r17, 0xFF	; 255
    11d2:	15 95       	asr	r17
    11d4:	07 95       	ror	r16
    11d6:	15 95       	asr	r17
    11d8:	07 95       	ror	r16
    11da:	15 95       	asr	r17
    11dc:	07 95       	ror	r16
    11de:	16 95       	lsr	r17
    11e0:	10 2f       	mov	r17, r16
    11e2:	00 27       	eor	r16, r16
    11e4:	17 95       	ror	r17
    11e6:	07 95       	ror	r16
    11e8:	b8 01       	movw	r22, r16
    11ea:	6c 52       	subi	r22, 0x2C	; 44
    11ec:	7c 4f       	sbci	r23, 0xFC	; 252
    11ee:	0c 50       	subi	r16, 0x0C	; 12
    11f0:	1c 4f       	sbci	r17, 0xFC	; 252
    11f2:	e6 01       	movw	r28, r12
    11f4:	49 91       	ld	r20, Y+
    11f6:	50 e0       	ldi	r21, 0x00	; 0
    11f8:	fb 01       	movw	r30, r22
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	ca 01       	movw	r24, r20
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <main+0x14e>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <main+0x14a>
    120c:	80 78       	andi	r24, 0x80	; 128
    120e:	99 27       	eor	r25, r25
    1210:	0a 2e       	mov	r0, r26
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <main+0x15e>
    1214:	95 95       	asr	r25
    1216:	87 95       	ror	r24
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <main+0x15a>
    121c:	90 81       	ld	r25, Z
    121e:	89 2b       	or	r24, r25
    1220:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1222:	2f 5f       	subi	r18, 0xFF	; 255
    1224:	3f 4f       	sbci	r19, 0xFF	; 255
    1226:	28 30       	cpi	r18, 0x08	; 8
    1228:	31 05       	cpc	r19, r1
    122a:	49 f7       	brne	.-46     	; 0x11fe <main+0x144>
    122c:	68 5f       	subi	r22, 0xF8	; 248
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    1230:	06 17       	cp	r16, r22
    1232:	17 07       	cpc	r17, r23
    1234:	f9 f6       	brne	.-66     	; 0x11f4 <main+0x13a>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	e8 1a       	sub	r14, r24
    123a:	f8 0a       	sbc	r15, r24
    123c:	a4 e0       	ldi	r26, 0x04	; 4
    123e:	ca 0e       	add	r12, r26
    1240:	d1 1c       	adc	r13, r1
    1242:	b8 e0       	ldi	r27, 0x08	; 8
    1244:	eb 16       	cp	r14, r27
    1246:	f1 04       	cpc	r15, r1
    1248:	09 f0       	breq	.+2      	; 0x124c <main+0x192>
    124a:	b2 cf       	rjmp	.-156    	; 0x11b0 <main+0xf6>
    124c:	11 c1       	rjmp	.+546    	; 0x1470 <main+0x3b6>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	09 f0       	breq	.+2      	; 0x1256 <main+0x19c>
    1254:	ee c1       	rjmp	.+988    	; 0x1632 <main+0x578>
    1256:	0f 2e       	mov	r0, r31
    1258:	f0 e7       	ldi	r31, 0x70	; 112
    125a:	cf 2e       	mov	r12, r31
    125c:	f1 e0       	ldi	r31, 0x01	; 1
    125e:	df 2e       	mov	r13, r31
    1260:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1262:	e1 2c       	mov	r14, r1
    1264:	f1 2c       	mov	r15, r1
    1266:	c7 01       	movw	r24, r14
    1268:	87 70       	andi	r24, 0x07	; 7
    126a:	90 78       	andi	r25, 0x80	; 128
    126c:	99 23       	and	r25, r25
    126e:	24 f4       	brge	.+8      	; 0x1278 <main+0x1be>
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	88 6f       	ori	r24, 0xF8	; 248
    1274:	9f 6f       	ori	r25, 0xFF	; 255
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	d5 01       	movw	r26, r10
    127a:	a8 1b       	sub	r26, r24
    127c:	b9 0b       	sbc	r27, r25
    127e:	c7 01       	movw	r24, r14
    1280:	ff 20       	and	r15, r15
    1282:	0c f4       	brge	.+2      	; 0x1286 <main+0x1cc>
    1284:	07 96       	adiw	r24, 0x07	; 7
    1286:	8c 01       	movw	r16, r24
    1288:	15 95       	asr	r17
    128a:	07 95       	ror	r16
    128c:	15 95       	asr	r17
    128e:	07 95       	ror	r16
    1290:	15 95       	asr	r17
    1292:	07 95       	ror	r16
    1294:	16 95       	lsr	r17
    1296:	10 2f       	mov	r17, r16
    1298:	00 27       	eor	r16, r16
    129a:	17 95       	ror	r17
    129c:	07 95       	ror	r16
    129e:	b8 01       	movw	r22, r16
    12a0:	6c 52       	subi	r22, 0x2C	; 44
    12a2:	7c 4f       	sbci	r23, 0xFC	; 252
    12a4:	0c 50       	subi	r16, 0x0C	; 12
    12a6:	1c 4f       	sbci	r17, 0xFC	; 252
    12a8:	e6 01       	movw	r28, r12
    12aa:	49 91       	ld	r20, Y+
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	fb 01       	movw	r30, r22
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	ca 01       	movw	r24, r20
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <main+0x204>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <main+0x200>
    12c2:	80 78       	andi	r24, 0x80	; 128
    12c4:	99 27       	eor	r25, r25
    12c6:	0a 2e       	mov	r0, r26
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <main+0x214>
    12ca:	95 95       	asr	r25
    12cc:	87 95       	ror	r24
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <main+0x210>
    12d2:	90 81       	ld	r25, Z
    12d4:	89 2b       	or	r24, r25
    12d6:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    12d8:	2f 5f       	subi	r18, 0xFF	; 255
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	28 30       	cpi	r18, 0x08	; 8
    12de:	31 05       	cpc	r19, r1
    12e0:	49 f7       	brne	.-46     	; 0x12b4 <main+0x1fa>
    12e2:	68 5f       	subi	r22, 0xF8	; 248
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    12e6:	60 17       	cp	r22, r16
    12e8:	71 07       	cpc	r23, r17
    12ea:	f9 f6       	brne	.-66     	; 0x12aa <main+0x1f0>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    12ec:	ef ef       	ldi	r30, 0xFF	; 255
    12ee:	ee 1a       	sub	r14, r30
    12f0:	fe 0a       	sbc	r15, r30
    12f2:	f4 e0       	ldi	r31, 0x04	; 4
    12f4:	cf 0e       	add	r12, r31
    12f6:	d1 1c       	adc	r13, r1
    12f8:	88 e0       	ldi	r24, 0x08	; 8
    12fa:	e8 16       	cp	r14, r24
    12fc:	f1 04       	cpc	r15, r1
    12fe:	09 f0       	breq	.+2      	; 0x1302 <main+0x248>
    1300:	b2 cf       	rjmp	.-156    	; 0x1266 <main+0x1ac>
    1302:	11 c1       	rjmp	.+546    	; 0x1526 <main+0x46c>

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	91 05       	cpc	r25, r1
    1308:	09 f0       	breq	.+2      	; 0x130c <main+0x252>
    130a:	98 c1       	rjmp	.+816    	; 0x163c <main+0x582>
    130c:	0f 2e       	mov	r0, r31
    130e:	f0 e5       	ldi	r31, 0x50	; 80
    1310:	cf 2e       	mov	r12, r31
    1312:	f1 e0       	ldi	r31, 0x01	; 1
    1314:	df 2e       	mov	r13, r31
    1316:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1318:	e1 2c       	mov	r14, r1
    131a:	f1 2c       	mov	r15, r1
    131c:	c7 01       	movw	r24, r14
    131e:	87 70       	andi	r24, 0x07	; 7
    1320:	90 78       	andi	r25, 0x80	; 128
    1322:	99 23       	and	r25, r25
    1324:	24 f4       	brge	.+8      	; 0x132e <main+0x274>
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	88 6f       	ori	r24, 0xF8	; 248
    132a:	9f 6f       	ori	r25, 0xFF	; 255
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	d5 01       	movw	r26, r10
    1330:	a8 1b       	sub	r26, r24
    1332:	b9 0b       	sbc	r27, r25
    1334:	c7 01       	movw	r24, r14
    1336:	ff 20       	and	r15, r15
    1338:	0c f4       	brge	.+2      	; 0x133c <main+0x282>
    133a:	07 96       	adiw	r24, 0x07	; 7
    133c:	8c 01       	movw	r16, r24
    133e:	15 95       	asr	r17
    1340:	07 95       	ror	r16
    1342:	15 95       	asr	r17
    1344:	07 95       	ror	r16
    1346:	15 95       	asr	r17
    1348:	07 95       	ror	r16
    134a:	16 95       	lsr	r17
    134c:	10 2f       	mov	r17, r16
    134e:	00 27       	eor	r16, r16
    1350:	17 95       	ror	r17
    1352:	07 95       	ror	r16
    1354:	b8 01       	movw	r22, r16
    1356:	6c 52       	subi	r22, 0x2C	; 44
    1358:	7c 4f       	sbci	r23, 0xFC	; 252
    135a:	0c 50       	subi	r16, 0x0C	; 12
    135c:	1c 4f       	sbci	r17, 0xFC	; 252
    135e:	e6 01       	movw	r28, r12
    1360:	49 91       	ld	r20, Y+
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	fb 01       	movw	r30, r22
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	ca 01       	movw	r24, r20
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <main+0x2ba>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <main+0x2b6>
    1378:	80 78       	andi	r24, 0x80	; 128
    137a:	99 27       	eor	r25, r25
    137c:	0a 2e       	mov	r0, r26
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <main+0x2ca>
    1380:	95 95       	asr	r25
    1382:	87 95       	ror	r24
    1384:	0a 94       	dec	r0
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <main+0x2c6>
    1388:	90 81       	ld	r25, Z
    138a:	89 2b       	or	r24, r25
    138c:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    138e:	2f 5f       	subi	r18, 0xFF	; 255
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	28 30       	cpi	r18, 0x08	; 8
    1394:	31 05       	cpc	r19, r1
    1396:	49 f7       	brne	.-46     	; 0x136a <main+0x2b0>
    1398:	68 5f       	subi	r22, 0xF8	; 248
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    139c:	60 17       	cp	r22, r16
    139e:	71 07       	cpc	r23, r17
    13a0:	f9 f6       	brne	.-66     	; 0x1360 <main+0x2a6>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    13a2:	af ef       	ldi	r26, 0xFF	; 255
    13a4:	ea 1a       	sub	r14, r26
    13a6:	fa 0a       	sbc	r15, r26
    13a8:	b4 e0       	ldi	r27, 0x04	; 4
    13aa:	cb 0e       	add	r12, r27
    13ac:	d1 1c       	adc	r13, r1
    13ae:	e8 e0       	ldi	r30, 0x08	; 8
    13b0:	ee 16       	cp	r14, r30
    13b2:	f1 04       	cpc	r15, r1
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <main+0x2fe>
    13b6:	b2 cf       	rjmp	.-156    	; 0x131c <main+0x262>
    13b8:	b6 c0       	rjmp	.+364    	; 0x1526 <main+0x46c>
void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	91 05       	cpc	r25, r1
    13be:	09 f0       	breq	.+2      	; 0x13c2 <main+0x308>
    13c0:	42 c1       	rjmp	.+644    	; 0x1646 <main+0x58c>
    13c2:	0f 2e       	mov	r0, r31
    13c4:	f0 e3       	ldi	r31, 0x30	; 48
    13c6:	cf 2e       	mov	r12, r31
    13c8:	f1 e0       	ldi	r31, 0x01	; 1
    13ca:	df 2e       	mov	r13, r31
    13cc:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    13ce:	e1 2c       	mov	r14, r1
    13d0:	f1 2c       	mov	r15, r1
    13d2:	c7 01       	movw	r24, r14
    13d4:	87 70       	andi	r24, 0x07	; 7
    13d6:	90 78       	andi	r25, 0x80	; 128
    13d8:	99 23       	and	r25, r25
    13da:	24 f4       	brge	.+8      	; 0x13e4 <main+0x32a>
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	88 6f       	ori	r24, 0xF8	; 248
    13e0:	9f 6f       	ori	r25, 0xFF	; 255
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	d5 01       	movw	r26, r10
    13e6:	a8 1b       	sub	r26, r24
    13e8:	b9 0b       	sbc	r27, r25
    13ea:	c7 01       	movw	r24, r14
    13ec:	ff 20       	and	r15, r15
    13ee:	0c f4       	brge	.+2      	; 0x13f2 <main+0x338>
    13f0:	07 96       	adiw	r24, 0x07	; 7
    13f2:	8c 01       	movw	r16, r24
    13f4:	15 95       	asr	r17
    13f6:	07 95       	ror	r16
    13f8:	15 95       	asr	r17
    13fa:	07 95       	ror	r16
    13fc:	15 95       	asr	r17
    13fe:	07 95       	ror	r16
    1400:	16 95       	lsr	r17
    1402:	10 2f       	mov	r17, r16
    1404:	00 27       	eor	r16, r16
    1406:	17 95       	ror	r17
    1408:	07 95       	ror	r16
    140a:	b8 01       	movw	r22, r16
    140c:	6c 52       	subi	r22, 0x2C	; 44
    140e:	7c 4f       	sbci	r23, 0xFC	; 252
    1410:	0c 50       	subi	r16, 0x0C	; 12
    1412:	1c 4f       	sbci	r17, 0xFC	; 252
    1414:	e6 01       	movw	r28, r12
    1416:	49 91       	ld	r20, Y+
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	fb 01       	movw	r30, r22
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	ca 01       	movw	r24, r20
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <main+0x370>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <main+0x36c>
    142e:	80 78       	andi	r24, 0x80	; 128
    1430:	99 27       	eor	r25, r25
    1432:	0a 2e       	mov	r0, r26
    1434:	02 c0       	rjmp	.+4      	; 0x143a <main+0x380>
    1436:	95 95       	asr	r25
    1438:	87 95       	ror	r24
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <main+0x37c>
    143e:	90 81       	ld	r25, Z
    1440:	89 2b       	or	r24, r25
    1442:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    1444:	2f 5f       	subi	r18, 0xFF	; 255
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	28 30       	cpi	r18, 0x08	; 8
    144a:	31 05       	cpc	r19, r1
    144c:	49 f7       	brne	.-46     	; 0x1420 <main+0x366>
    144e:	68 5f       	subi	r22, 0xF8	; 248
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    1452:	06 17       	cp	r16, r22
    1454:	17 07       	cpc	r17, r23
    1456:	f9 f6       	brne	.-66     	; 0x1416 <main+0x35c>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1458:	ff ef       	ldi	r31, 0xFF	; 255
    145a:	ef 1a       	sub	r14, r31
    145c:	ff 0a       	sbc	r15, r31
    145e:	84 e0       	ldi	r24, 0x04	; 4
    1460:	c8 0e       	add	r12, r24
    1462:	d1 1c       	adc	r13, r1
    1464:	a8 e0       	ldi	r26, 0x08	; 8
    1466:	ea 16       	cp	r14, r26
    1468:	f1 04       	cpc	r15, r1
    146a:	09 f0       	breq	.+2      	; 0x146e <main+0x3b4>
    146c:	b2 cf       	rjmp	.-156    	; 0x13d2 <main+0x318>
    146e:	5b c0       	rjmp	.+182    	; 0x1526 <main+0x46c>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
    1474:	04 97       	sbiw	r24, 0x04	; 4
    1476:	09 f0       	breq	.+2      	; 0x147a <main+0x3c0>
    1478:	56 c0       	rjmp	.+172    	; 0x1526 <main+0x46c>
    147a:	0f 2e       	mov	r0, r31
    147c:	f0 e1       	ldi	r31, 0x10	; 16
    147e:	cf 2e       	mov	r12, r31
    1480:	f1 e0       	ldi	r31, 0x01	; 1
    1482:	df 2e       	mov	r13, r31
    1484:	f0 2d       	mov	r31, r0
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1486:	e1 2c       	mov	r14, r1
    1488:	f1 2c       	mov	r15, r1
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    148a:	c7 01       	movw	r24, r14
    148c:	87 70       	andi	r24, 0x07	; 7
    148e:	90 78       	andi	r25, 0x80	; 128
    1490:	99 23       	and	r25, r25
    1492:	24 f4       	brge	.+8      	; 0x149c <main+0x3e2>
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	88 6f       	ori	r24, 0xF8	; 248
    1498:	9f 6f       	ori	r25, 0xFF	; 255
    149a:	01 96       	adiw	r24, 0x01	; 1
    149c:	d5 01       	movw	r26, r10
    149e:	a8 1b       	sub	r26, r24
    14a0:	b9 0b       	sbc	r27, r25
    14a2:	87 01       	movw	r16, r14
    14a4:	ff 20       	and	r15, r15
    14a6:	14 f4       	brge	.+4      	; 0x14ac <main+0x3f2>
    14a8:	09 5f       	subi	r16, 0xF9	; 249
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	15 95       	asr	r17
    14ae:	07 95       	ror	r16
    14b0:	15 95       	asr	r17
    14b2:	07 95       	ror	r16
    14b4:	15 95       	asr	r17
    14b6:	07 95       	ror	r16
    14b8:	16 95       	lsr	r17
    14ba:	10 2f       	mov	r17, r16
    14bc:	00 27       	eor	r16, r16
    14be:	17 95       	ror	r17
    14c0:	07 95       	ror	r16
    14c2:	b8 01       	movw	r22, r16
    14c4:	6c 52       	subi	r22, 0x2C	; 44
    14c6:	7c 4f       	sbci	r23, 0xFC	; 252
    14c8:	0c 50       	subi	r16, 0x0C	; 12
    14ca:	1c 4f       	sbci	r17, 0xFC	; 252
    14cc:	e6 01       	movw	r28, r12
    14ce:	49 91       	ld	r20, Y+
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	fb 01       	movw	r30, r22
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	ca 01       	movw	r24, r20
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <main+0x428>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <main+0x424>
    14e6:	80 78       	andi	r24, 0x80	; 128
    14e8:	99 27       	eor	r25, r25
    14ea:	0a 2e       	mov	r0, r26
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <main+0x438>
    14ee:	95 95       	asr	r25
    14f0:	87 95       	ror	r24
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <main+0x434>
    14f6:	90 81       	ld	r25, Z
    14f8:	89 2b       	or	r24, r25
    14fa:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    14fc:	2f 5f       	subi	r18, 0xFF	; 255
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	28 30       	cpi	r18, 0x08	; 8
    1502:	31 05       	cpc	r19, r1
    1504:	49 f7       	brne	.-46     	; 0x14d8 <main+0x41e>
    1506:	68 5f       	subi	r22, 0xF8	; 248
    1508:	7f 4f       	sbci	r23, 0xFF	; 255
void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
    150a:	60 17       	cp	r22, r16
    150c:	71 07       	cpc	r23, r17
    150e:	f9 f6       	brne	.-66     	; 0x14ce <main+0x414>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    1510:	bf ef       	ldi	r27, 0xFF	; 255
    1512:	eb 1a       	sub	r14, r27
    1514:	fb 0a       	sbc	r15, r27
    1516:	e4 e0       	ldi	r30, 0x04	; 4
    1518:	ce 0e       	add	r12, r30
    151a:	d1 1c       	adc	r13, r1
    151c:	f8 e0       	ldi	r31, 0x08	; 8
    151e:	ef 16       	cp	r14, r31
    1520:	f1 04       	cpc	r15, r1
    1522:	09 f0       	breq	.+2      	; 0x1526 <main+0x46c>
    1524:	b2 cf       	rjmp	.-156    	; 0x148a <main+0x3d0>
    1526:	0f 2e       	mov	r0, r31
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	ef 2e       	mov	r14, r31
    152c:	f1 e0       	ldi	r31, 0x01	; 1
    152e:	ff 2e       	mov	r15, r31
    1530:	f0 2d       	mov	r31, r0
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    1532:	00 e0       	ldi	r16, 0x00	; 0
    1534:	10 e0       	ldi	r17, 0x00	; 0
    1536:	c8 01       	movw	r24, r16
    1538:	87 70       	andi	r24, 0x07	; 7
    153a:	90 78       	andi	r25, 0x80	; 128
    153c:	99 23       	and	r25, r25
    153e:	24 f4       	brge	.+8      	; 0x1548 <main+0x48e>
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	88 6f       	ori	r24, 0xF8	; 248
    1544:	9f 6f       	ori	r25, 0xFF	; 255
    1546:	01 96       	adiw	r24, 0x01	; 1
    1548:	a5 01       	movw	r20, r10
    154a:	48 1b       	sub	r20, r24
    154c:	59 0b       	sbc	r21, r25
    154e:	e7 01       	movw	r28, r14
    1550:	68 81       	ld	r22, Y
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	d8 01       	movw	r26, r16
    1556:	11 23       	and	r17, r17
    1558:	0c f4       	brge	.+2      	; 0x155c <main+0x4a2>
    155a:	17 96       	adiw	r26, 0x07	; 7
    155c:	b5 95       	asr	r27
    155e:	a7 95       	ror	r26
    1560:	b5 95       	asr	r27
    1562:	a7 95       	ror	r26
    1564:	b5 95       	asr	r27
    1566:	a7 95       	ror	r26
    1568:	b6 95       	lsr	r27
    156a:	ba 2f       	mov	r27, r26
    156c:	aa 27       	eor	r26, r26
    156e:	b7 95       	ror	r27
    1570:	a7 95       	ror	r26
    1572:	fd 01       	movw	r30, r26
    1574:	ec 53       	subi	r30, 0x3C	; 60
    1576:	fc 4f       	sbci	r31, 0xFC	; 252
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	cb 01       	movw	r24, r22
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <main+0x4cc>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <main+0x4c8>
    158a:	80 78       	andi	r24, 0x80	; 128
    158c:	99 27       	eor	r25, r25
    158e:	04 2e       	mov	r0, r20
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <main+0x4dc>
    1592:	95 95       	asr	r25
    1594:	87 95       	ror	r24
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <main+0x4d8>
    159a:	90 81       	ld	r25, Z
    159c:	89 2b       	or	r24, r25
    159e:	81 93       	st	Z+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    15a0:	2f 5f       	subi	r18, 0xFF	; 255
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	28 30       	cpi	r18, 0x08	; 8
    15a6:	31 05       	cpc	r19, r1
    15a8:	49 f7       	brne	.-46     	; 0x157c <main+0x4c2>
				{
				oled_bufer[(x+i*8+k)+(y+j/8)*OLED_WIDTH]|=((img[j*width+i]<<k)&0b10000000)>>(7-j%8);
    15aa:	69 81       	ldd	r22, Y+1	; 0x01
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	a4 53       	subi	r26, 0x34	; 52
    15b0:	bc 4f       	sbci	r27, 0xFC	; 252
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	cb 01       	movw	r24, r22
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <main+0x506>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <main+0x502>
    15c4:	80 78       	andi	r24, 0x80	; 128
    15c6:	99 27       	eor	r25, r25
    15c8:	04 2e       	mov	r0, r20
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <main+0x516>
    15cc:	95 95       	asr	r25
    15ce:	87 95       	ror	r24
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <main+0x512>
    15d4:	9c 91       	ld	r25, X
    15d6:	89 2b       	or	r24, r25
    15d8:	8d 93       	st	X+, r24
	for(int j=0;j<height;j++)
	{
		
			for(int i=0;i<width;i++)
			{
				for(int k=0;k<8;k++)
    15da:	2f 5f       	subi	r18, 0xFF	; 255
    15dc:	3f 4f       	sbci	r19, 0xFF	; 255
    15de:	28 30       	cpi	r18, 0x08	; 8
    15e0:	31 05       	cpc	r19, r1
    15e2:	49 f7       	brne	.-46     	; 0x15b6 <main+0x4fc>
	}
}

void OLED_Write_To_Bufer(int x,int y,int width,int height,uint8_t* img)
{
	for(int j=0;j<height;j++)
    15e4:	0f 5f       	subi	r16, 0xFF	; 255
    15e6:	1f 4f       	sbci	r17, 0xFF	; 255
    15e8:	82 e0       	ldi	r24, 0x02	; 2
    15ea:	e8 0e       	add	r14, r24
    15ec:	f1 1c       	adc	r15, r1
    15ee:	08 30       	cpi	r16, 0x08	; 8
    15f0:	11 05       	cpc	r17, r1
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <main+0x53c>
    15f4:	a0 cf       	rjmp	.-192    	; 0x1536 <main+0x47c>
    15f6:	e4 e7       	ldi	r30, 0x74	; 116
    15f8:	f3 e0       	ldi	r31, 0x03	; 3

void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
	{
			OLED_Data(oled_bufer[i]);
    15fa:	81 91       	ld	r24, Z+
}


void OLED_Data(int data)
{
	TWDR=data;							
    15fc:	d2 01       	movw	r26, r4
    15fe:	8c 93       	st	X, r24
	TWCR=(1<<TWINT)|(1<<TWEN);				
    1600:	84 e8       	ldi	r24, 0x84	; 132
    1602:	d1 01       	movw	r26, r2
    1604:	8c 93       	st	X, r24
	while(!(TWCR & (1<<TWINT))){};
    1606:	d1 01       	movw	r26, r2
    1608:	8c 91       	ld	r24, X
    160a:	88 23       	and	r24, r24
    160c:	e4 f7       	brge	.-8      	; 0x1606 <main+0x54c>
}


void OLED_Write_Bufer()
{
	for(int i=0;i<(OLED_HEIGHT/8)*OLED_WIDTH;i++)
    160e:	e8 15       	cp	r30, r8
    1610:	f9 05       	cpc	r31, r9
    1612:	09 f4       	brne	.+2      	; 0x1616 <main+0x55c>
    1614:	b1 cd       	rjmp	.-1182   	; 0x1178 <main+0xbe>
    1616:	f1 cf       	rjmp	.-30     	; 0x15fa <main+0x540>
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
	if((PINB>>2)&0b00000001==1) kf++;
	if((PINB>>3)&0b00000001==1) kf++;
	curlvl=kf;
    1618:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <__data_end+0x1>
    161c:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
}

void printlvltoOLEDbufer()
{
	if(curlvl==0) oled.OLED_Write_To_Bufer(96,0,4,8,batary5);
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	09 f0       	breq	.+2      	; 0x1626 <main+0x56c>
    1624:	14 ce       	rjmp	.-984    	; 0x124e <main+0x194>
    1626:	bc cd       	rjmp	.-1160   	; 0x11a0 <main+0xe6>
	if(curlvl==1) oled.OLED_Write_To_Bufer(96,0,4,8,batary4);
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	91 05       	cpc	r25, r1
    162c:	09 f0       	breq	.+2      	; 0x1630 <main+0x576>
    162e:	6a ce       	rjmp	.-812    	; 0x1304 <main+0x24a>
    1630:	12 ce       	rjmp	.-988    	; 0x1256 <main+0x19c>
	if(curlvl==2) oled.OLED_Write_To_Bufer(96,0,4,8,batary3);
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	91 05       	cpc	r25, r1
    1636:	09 f0       	breq	.+2      	; 0x163a <main+0x580>
    1638:	c0 ce       	rjmp	.-640    	; 0x13ba <main+0x300>
    163a:	68 ce       	rjmp	.-816    	; 0x130c <main+0x252>
	if(curlvl==3) oled.OLED_Write_To_Bufer(96,0,4,8,batary2);
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	91 05       	cpc	r25, r1
    1640:	09 f0       	breq	.+2      	; 0x1644 <main+0x58a>
    1642:	18 cf       	rjmp	.-464    	; 0x1474 <main+0x3ba>
    1644:	be ce       	rjmp	.-644    	; 0x13c2 <main+0x308>
	if(curlvl==4) oled.OLED_Write_To_Bufer(96,0,4,8,batary1);
    1646:	04 97       	sbiw	r24, 0x04	; 4
    1648:	09 f0       	breq	.+2      	; 0x164c <main+0x592>
    164a:	6d cf       	rjmp	.-294    	; 0x1526 <main+0x46c>
    164c:	16 cf       	rjmp	.-468    	; 0x147a <main+0x3c0>

0000164e <_GLOBAL__sub_I_zero>:
	 oled.OLED_Write_Bufer();
	 //_delay_ms(1000);
	 
	 
	}
}
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
	0b00000000

};

TWI wire;
OLED oled(wire);
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	84 e7       	ldi	r24, 0x74	; 116
    1656:	93 e0       	ldi	r25, 0x03	; 3
    1658:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN4OLEDC1E3TWI>
private:
int curlvl;
public:
Batary()
{
	DDRB=0x00;
    165c:	14 b8       	out	0x04, r1	; 4
	PORTB=0x0F;	
    165e:	8f e0       	ldi	r24, 0x0F	; 15
    1660:	85 b9       	out	0x05, r24	; 5
}

void refreshlvl()
{
	int kf=0;
	if((PINB>>0)&0b00000001==1) kf++;
    1662:	83 b1       	in	r24, 0x03	; 3
	printlvltoOLEDbufer();
}

void refreshlvl()
{
	int kf=0;
    1664:	81 70       	andi	r24, 0x01	; 1
    1666:	c8 2f       	mov	r28, r24
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	d8 2f       	mov	r29, r24
    166c:	ce 01       	movw	r24, r28
	if((PINB>>0)&0b00000001==1) kf++;
	if((PINB>>1)&0b00000001==1) kf++;
    166e:	19 99       	sbic	0x03, 1	; 3
    1670:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>2)&0b00000001==1) kf++;
    1672:	1a 99       	sbic	0x03, 2	; 3
    1674:	01 96       	adiw	r24, 0x01	; 1
	if((PINB>>3)&0b00000001==1) kf++;
    1676:	1b 99       	sbic	0x03, 3	; 3
    1678:	01 96       	adiw	r24, 0x01	; 1
	curlvl=kf;
    167a:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <__data_end+0x1>
    167e:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <__data_end>
Batary()
{
	DDRB=0x00;
	PORTB=0x0F;	
	refreshlvl();
	printlvltoOLEDbufer();
    1682:	82 e7       	ldi	r24, 0x72	; 114
    1684:	93 e0       	ldi	r25, 0x03	; 3
    1686:	0c db       	rcall	.-2536   	; 0xca0 <_ZN6Batary19printlvltoOLEDbuferEv>
	 oled.OLED_Write_Bufer();
	 //_delay_ms(1000);
	 
	 
	}
}
    1688:	df 91       	pop	r29
    168a:	cf 91       	pop	r28
    168c:	08 95       	ret

0000168e <__tablejump2__>:
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	00 24       	eor	r0, r0
    1694:	00 1c       	adc	r0, r0
    1696:	0b be       	out	0x3b, r0	; 59
    1698:	07 90       	elpm	r0, Z+
    169a:	f6 91       	elpm	r31, Z
    169c:	e0 2d       	mov	r30, r0
    169e:	09 94       	ijmp

000016a0 <_exit>:
    16a0:	f8 94       	cli

000016a2 <__stop_program>:
    16a2:	ff cf       	rjmp	.-2      	; 0x16a2 <__stop_program>
